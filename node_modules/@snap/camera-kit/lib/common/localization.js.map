{"version":3,"file":"localization.js","sourceRoot":"","sources":["../../src/common/localization.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAoC1D,SAAS,YAAY,CACjB,IAAO;IAEP,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,MAAS,EAAE,EAAE;QAC/B,MAAM,GAAG,GAAG,CAAC,eAAkC,EAAE,EAAE;YAC/C,MAAM,OAAO,GAAG,eAAe,CAAC,KAAK,EAAE,CAAC;YACxC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;iBACnB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAY,EAAE,EAAE,WAAC,OAAA,GAAG,MAAA,MAAM,CAAC,GAAG,CAAC,mCAAI,EAAE,GAAG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAA,EAAA,CAAC,CAAC;iBAC5E,MAAM,CAAC,OAAO,CAAC;iBACf,IAAI,CAAC,EAAE,CAAC,CAAC;QAClB,CAAC,CAAC;QACF,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC,CAAC;AACN,CAAC;AAED;;GAEG;AACH,MAAM,kBAAkB,GAAG,YAAY,CAAC,CAAC,kBAAkB,EAAE,mBAAmB,EAAE,cAAc,CAAC,CAAC,CAAC;AAEnG;;GAEG;AAEH,yBAAyB;AACzB,2DAA2D;AAC3D,wFAAwF;AACxF,MAAM,KAAK,GAAG;IACV,kBAAkB,EAAE,kBAAkB,CAClC,CAAC,GAAG,EAAE,EAAE,CACJ,GAAG,CAAA,4DAA4D,CAAC;8DACd,CAAC;8FAC+B,CAAC;uGACQ,CAClG;IACD,iBAAiB,EAAE,SAAS;IAC5B,iBAAiB,EAAE,SAAS;CAC/B,CAAC;AAEF;;GAEG;AAEH,MAAM,UAAU,GAA0C;IACtD,KAAK;CACR,CAAC;AAEF,MAAM,gBAAgB,GAAG,MAAA,UAAU,CAAC,kBAAkB,CAAC,MAAM,CAAC,mCAAI,KAAK,CAAC;AAExE,MAAM,UAAU,eAAe,CAAsC,QAAY;IAC7E,OAAO,gBAAgB,CAAC,QAAQ,CAAC,CAAC;AACtC,CAAC","sourcesContent":["import { cameraKitUserAgent } from \"./cameraKitUserAgent\";\n\n/**\n * This implementation is limited by how TypeScript currently implements tag function for template literals.\n *\n * The way tag functions are typed by the TypeScript compiler limits their usefulness, for two reasons:\n *\n * 1. Specific literal types are not inferred from interpolation expressions -- the following does not work:\n * ```ts\n * function tag<K extends readonly string[]>(strings: readonly string[], ...keys: K): string { ... }\n * tag`This is a ${\"test\"} template.` // the K type parameter is not correctly inferred as `readonly ['test']`\n * ```\n * 2. The return type of a function used as a tag function will always be `string` -- the following does not work:\n * ```ts\n * function tag<K extends readonly string[]>(\n *   strings: readonly string[],\n *   ...keys: K\n * ): (values: {[k in K[number]]: string}) => string { ... }\n *\n * const template = tag`This is a ${\"test\"} template` // TS infers the type of `template` as `string` -- clearly wrong.\n * ```\n *\n * An attempt is made here to work around those limitations and still provide a reasonably amount of type safety without\n * adding too much verbosity.\n *\n * See https://github.com/microsoft/TypeScript/pull/49552\n */\n\n/**\n * We use the en_US string object to define all localizable stringIds and their types (either a TemplateFunction or a\n * plain string).\n */\ntype LocalizableStrings = typeof en_US;\n\ntype TemplateFunction<K extends readonly string[], V extends { [key in K[number]]: string }> = (values: V) => string;\n\nfunction makeTemplate<const K extends readonly string[], V extends { [key in K[number]]: string }>(\n    keys: K\n): (template: (tag: (strings: readonly string[], ...keys: 0[]) => string) => string) => TemplateFunction<K, V> {\n    return (template) => (values: V) => {\n        const tag = (readonlyStrings: readonly string[]) => {\n            const strings = readonlyStrings.slice();\n            return [strings.shift()]\n                .concat(keys.map((key: keyof V) => `${values[key] ?? \"\"}${strings.shift()}`))\n                .concat(strings)\n                .join(\"\");\n        };\n        return template(tag);\n    };\n}\n\n/**\n * Any strings which are templated (i.e. require runtime values) are defined below.\n */\nconst legalPromptMessage = makeTemplate([\"privacyPolicyUrl\", \"termsOfServiceUrl\", \"learnMoreUrl\"]);\n\n/**\n * Strings for each language are defined blow.\n */\n\n// en_US is used both to:\n//  A) define the set of strings which can be localized and\n//  B) provide a default set of strings in case a specific localization cannot be found.\nconst en_US = {\n    legalPromptMessage: legalPromptMessage(\n        (tag) =>\n            tag`By using Lenses, you acknowledge reading Snap's <a href=\"${0}\" target=\"_blank\">\n            Privacy Policy</a> and agree to Snap's <a href=\"${0}\" target=\"_blank\">Terms of Service</a>.\n            Some Lenses use information about your face, hands, and voice to work. <a href=\"${0}\"\n            target=\"_blank\">Learn More</a>, and if you want to agree and continue, click or tap below.`\n    ),\n    legalPromptAccept: \"I Agree\",\n    legalPromptReject: \"Dismiss\",\n};\n\n/**\n * --- end of string definitions ---\n */\n\nconst allStrings: { [key: string]: LocalizableStrings } = {\n    en_US,\n};\n\nconst localizedStrings = allStrings[cameraKitUserAgent.locale] ?? en_US;\n\nexport function localizedString<ID extends keyof LocalizableStrings>(stringId: ID): LocalizableStrings[ID] {\n    return localizedStrings[stringId];\n}\n"]}