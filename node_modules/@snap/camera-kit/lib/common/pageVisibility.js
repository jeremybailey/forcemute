const onHiddenHandlers = new Set();
const onVisibleHandlers = new Set();
let previousVisibilityState = document.visibilityState;
let visibilityTransition = false;
let initialized = false;
function maybeInitializeVisibilityListeners() {
    if (initialized)
        return;
    initialized = true;
    document.addEventListener("visibilitychange", () => {
        const handlers = previousVisibilityState === "visible" && document.visibilityState === "hidden"
            ? onHiddenHandlers
            : previousVisibilityState === "hidden" && document.visibilityState === "visible"
                ? onVisibleHandlers
                : new Set();
        visibilityTransition = document.visibilityState;
        for (const handler of handlers) {
            try {
                handler();
            }
            catch (error) {
                // We'll do the same thing here that we would do if the handler was added directly as an event
                // listener and dispatch an error event if we can.
                if (typeof window !== "undefined")
                    window.dispatchEvent(new CustomEvent("error", { detail: error }));
            }
        }
        previousVisibilityState = visibilityTransition;
        visibilityTransition = false;
    });
}
export function isDuringVisibilityTransition(test) {
    return test === visibilityTransition;
}
/**
 * Run a function when the page is hidden. If this occurs due to tab / browser closure, only synchronous functions will
 * run to completion.
 *
 * If the given handler throws an error, it will be silently swallowed.
 *
 * @param handler
 * @returns A function which, when called, removes the function from the set of visibility change handlers.
 */
export function onPageHidden(handler) {
    maybeInitializeVisibilityListeners();
    onHiddenHandlers.add(handler);
    return () => onHiddenHandlers.delete(handler);
}
/**
 * Run a function when the page is made visible.
 *
 * If the given handler throws an error, it will be silently swallowed.
 *
 * @param handler
 * @returns A function which, when called, removes the function from the set of visibility change handlers.
 */
export function onPageVisible(handler) {
    maybeInitializeVisibilityListeners();
    onVisibleHandlers.add(handler);
    return () => onVisibleHandlers.delete(handler);
}
//# sourceMappingURL=pageVisibility.js.map