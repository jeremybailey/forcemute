{"version":3,"file":"pageVisibility.js","sourceRoot":"","sources":["../../src/common/pageVisibility.ts"],"names":[],"mappings":"AAAA,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAc,CAAC;AAC/C,MAAM,iBAAiB,GAAG,IAAI,GAAG,EAAc,CAAC;AAEhD,IAAI,uBAAuB,GAAG,QAAQ,CAAC,eAAe,CAAC;AACvD,IAAI,oBAAoB,GAAoC,KAAK,CAAC;AAElE,IAAI,WAAW,GAAG,KAAK,CAAC;AACxB,SAAS,kCAAkC;IACvC,IAAI,WAAW;QAAE,OAAO;IACxB,WAAW,GAAG,IAAI,CAAC;IAEnB,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC/C,MAAM,QAAQ,GACV,uBAAuB,KAAK,SAAS,IAAI,QAAQ,CAAC,eAAe,KAAK,QAAQ;YAC1E,CAAC,CAAC,gBAAgB;YAClB,CAAC,CAAC,uBAAuB,KAAK,QAAQ,IAAI,QAAQ,CAAC,eAAe,KAAK,SAAS;gBAChF,CAAC,CAAC,iBAAiB;gBACnB,CAAC,CAAC,IAAI,GAAG,EAAc,CAAC;QAEhC,oBAAoB,GAAG,QAAQ,CAAC,eAAe,CAAC;QAEhD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC5B,IAAI;gBACA,OAAO,EAAE,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACZ,8FAA8F;gBAC9F,kDAAkD;gBAClD,IAAI,OAAO,MAAM,KAAK,WAAW;oBAAE,MAAM,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;aACxG;SACJ;QAED,uBAAuB,GAAG,oBAAoB,CAAC;QAC/C,oBAAoB,GAAG,KAAK,CAAC;IACjC,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAM,UAAU,4BAA4B,CAAC,IAA6B;IACtE,OAAO,IAAI,KAAK,oBAAoB,CAAC;AACzC,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,YAAY,CAAC,OAAmB;IAC5C,kCAAkC,EAAE,CAAC;IACrC,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC9B,OAAO,GAAG,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,aAAa,CAAC,OAAmB;IAC7C,kCAAkC,EAAE,CAAC;IACrC,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC/B,OAAO,GAAG,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACnD,CAAC","sourcesContent":["const onHiddenHandlers = new Set<() => void>();\nconst onVisibleHandlers = new Set<() => void>();\n\nlet previousVisibilityState = document.visibilityState;\nlet visibilityTransition: false | DocumentVisibilityState = false;\n\nlet initialized = false;\nfunction maybeInitializeVisibilityListeners(): void {\n    if (initialized) return;\n    initialized = true;\n\n    document.addEventListener(\"visibilitychange\", () => {\n        const handlers =\n            previousVisibilityState === \"visible\" && document.visibilityState === \"hidden\"\n                ? onHiddenHandlers\n                : previousVisibilityState === \"hidden\" && document.visibilityState === \"visible\"\n                ? onVisibleHandlers\n                : new Set<() => void>();\n\n        visibilityTransition = document.visibilityState;\n\n        for (const handler of handlers) {\n            try {\n                handler();\n            } catch (error) {\n                // We'll do the same thing here that we would do if the handler was added directly as an event\n                // listener and dispatch an error event if we can.\n                if (typeof window !== \"undefined\") window.dispatchEvent(new CustomEvent(\"error\", { detail: error }));\n            }\n        }\n\n        previousVisibilityState = visibilityTransition;\n        visibilityTransition = false;\n    });\n}\n\nexport function isDuringVisibilityTransition(test: DocumentVisibilityState): boolean {\n    return test === visibilityTransition;\n}\n\n/**\n * Run a function when the page is hidden. If this occurs due to tab / browser closure, only synchronous functions will\n * run to completion.\n *\n * If the given handler throws an error, it will be silently swallowed.\n *\n * @param handler\n * @returns A function which, when called, removes the function from the set of visibility change handlers.\n */\nexport function onPageHidden(handler: () => void): () => void {\n    maybeInitializeVisibilityListeners();\n    onHiddenHandlers.add(handler);\n    return () => onHiddenHandlers.delete(handler);\n}\n\n/**\n * Run a function when the page is made visible.\n *\n * If the given handler throws an error, it will be silently swallowed.\n *\n * @param handler\n * @returns A function which, when called, removes the function from the set of visibility change handlers.\n */\nexport function onPageVisible(handler: () => void): () => void {\n    maybeInitializeVisibilityListeners();\n    onVisibleHandlers.add(handler);\n    return () => onVisibleHandlers.delete(handler);\n}\n"]}