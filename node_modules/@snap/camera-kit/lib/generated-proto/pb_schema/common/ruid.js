/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "snapchat.common";
/** Randomization units supported for allocation */
export var Ruid_Type;
(function (Ruid_Type) {
    /** UNSET - Unknown type */
    Ruid_Type[Ruid_Type["UNSET"] = 0] = "UNSET";
    /** USER - Snapchat user ID */
    Ruid_Type[Ruid_Type["USER"] = 1] = "USER";
    /** DEVICE - Config device ID */
    Ruid_Type[Ruid_Type["DEVICE"] = 2] = "DEVICE";
    /** WEB_CLIENT - Web client ID */
    Ruid_Type[Ruid_Type["WEB_CLIENT"] = 3] = "WEB_CLIENT";
    /** AD_ACCOUNT - Ad account ID */
    Ruid_Type[Ruid_Type["AD_ACCOUNT"] = 4] = "AD_ACCOUNT";
    /** USERNAME - Snapchat username (legacy only) */
    Ruid_Type[Ruid_Type["USERNAME"] = 5] = "USERNAME";
    /** AD_MODERATION_AD - Ad Id used by Ad Moderation backend. */
    Ruid_Type[Ruid_Type["AD_MODERATION_AD"] = 6] = "AD_MODERATION_AD";
    /** WEB_SNAPCHAT_USER - Snapchat user id used on web. */
    Ruid_Type[Ruid_Type["WEB_SNAPCHAT_USER"] = 7] = "WEB_SNAPCHAT_USER";
    /** INTERNAL - Internal test RUID, internal use only and no analysis. */
    Ruid_Type[Ruid_Type["INTERNAL"] = 8] = "INTERNAL";
    /** AM_ORGANIZATION - Ads Manager organization ID */
    Ruid_Type[Ruid_Type["AM_ORGANIZATION"] = 9] = "AM_ORGANIZATION";
    /** AM_MEMBER - Ads Manager member ID */
    Ruid_Type[Ruid_Type["AM_MEMBER"] = 10] = "AM_MEMBER";
    /** AM_SESSION - Ads Manager session ID */
    Ruid_Type[Ruid_Type["AM_SESSION"] = 11] = "AM_SESSION";
    /** AM_PROFILE - Ads Manager profile ID */
    Ruid_Type[Ruid_Type["AM_PROFILE"] = 12] = "AM_PROFILE";
    /** AM_SNAPCHAT_USER - Snapchat user ID on Ads Manager */
    Ruid_Type[Ruid_Type["AM_SNAPCHAT_USER"] = 13] = "AM_SNAPCHAT_USER";
    /** SNAPCHAT_ADVERTISING - Snapchat Advertising ID for Budget A/B */
    Ruid_Type[Ruid_Type["SNAPCHAT_ADVERTISING"] = 14] = "SNAPCHAT_ADVERTISING";
    /** AM_CLIENT - Ads Manager client ID */
    Ruid_Type[Ruid_Type["AM_CLIENT"] = 15] = "AM_CLIENT";
    /** MISCHIEF - Mischief id for group chat */
    Ruid_Type[Ruid_Type["MISCHIEF"] = 16] = "MISCHIEF";
    Ruid_Type[Ruid_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Ruid_Type || (Ruid_Type = {}));
function createBaseRuid() {
    return { type: 0, stringValue: "", loggingIdValue: "" };
}
export const Ruid = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.stringValue !== "") {
            writer.uint32(18).string(message.stringValue);
        }
        if (message.loggingIdValue !== "") {
            writer.uint32(26).string(message.loggingIdValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRuid();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.stringValue = reader.string();
                    break;
                case 3:
                    message.loggingIdValue = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRuid();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.stringValue = (_b = object.stringValue) !== null && _b !== void 0 ? _b : "";
        message.loggingIdValue = (_c = object.loggingIdValue) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=ruid.js.map