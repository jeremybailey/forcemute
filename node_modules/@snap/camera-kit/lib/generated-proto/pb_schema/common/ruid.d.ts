import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "snapchat.common";
/** Randomization unit ID */
export interface Ruid {
    /** Type of ID for request */
    type: Ruid_Type;
    /** String value of ID */
    stringValue: string;
    /**
     * When specifying a privacy-sensitive RUID (such as device_id), a logging ID should be used instead of the RUID for logging.
     * Each privacy-sensitive RUID type maps to a replacement logging ID type (for example: device_id -> client_id).
     * Note: this is suffixed with `_value` both to indicate it's a value and to avoid conflict with the LoggingId DTO.
     */
    loggingIdValue: string;
}
/** Randomization units supported for allocation */
export declare enum Ruid_Type {
    /** UNSET - Unknown type */
    UNSET = 0,
    /** USER - Snapchat user ID */
    USER = 1,
    /** DEVICE - Config device ID */
    DEVICE = 2,
    /** WEB_CLIENT - Web client ID */
    WEB_CLIENT = 3,
    /** AD_ACCOUNT - Ad account ID */
    AD_ACCOUNT = 4,
    /** USERNAME - Snapchat username (legacy only) */
    USERNAME = 5,
    /** AD_MODERATION_AD - Ad Id used by Ad Moderation backend. */
    AD_MODERATION_AD = 6,
    /** WEB_SNAPCHAT_USER - Snapchat user id used on web. */
    WEB_SNAPCHAT_USER = 7,
    /** INTERNAL - Internal test RUID, internal use only and no analysis. */
    INTERNAL = 8,
    /** AM_ORGANIZATION - Ads Manager organization ID */
    AM_ORGANIZATION = 9,
    /** AM_MEMBER - Ads Manager member ID */
    AM_MEMBER = 10,
    /** AM_SESSION - Ads Manager session ID */
    AM_SESSION = 11,
    /** AM_PROFILE - Ads Manager profile ID */
    AM_PROFILE = 12,
    /** AM_SNAPCHAT_USER - Snapchat user ID on Ads Manager */
    AM_SNAPCHAT_USER = 13,
    /** SNAPCHAT_ADVERTISING - Snapchat Advertising ID for Budget A/B */
    SNAPCHAT_ADVERTISING = 14,
    /** AM_CLIENT - Ads Manager client ID */
    AM_CLIENT = 15,
    /** MISCHIEF - Mischief id for group chat */
    MISCHIEF = 16,
    UNRECOGNIZED = -1
}
export declare const Ruid: {
    encode(message: Ruid, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Ruid;
    fromPartial<I extends {
        type?: Ruid_Type | undefined;
        stringValue?: string | undefined;
        loggingIdValue?: string | undefined;
    } & {
        type?: Ruid_Type | undefined;
        stringValue?: string | undefined;
        loggingIdValue?: string | undefined;
    } & Record<Exclude<keyof I, keyof Ruid>, never>>(object: I): Ruid;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
