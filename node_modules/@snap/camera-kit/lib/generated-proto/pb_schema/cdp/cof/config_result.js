/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Value } from "../../common/value";
export const protobufPackage = "snapchat.cdp.cof";
/** The suffix of "_PLATFORM" is appended, due to C++ declared enums with global scope, which causes issues in Snapchat/client */
export var ConfigResult_ServePlatform;
(function (ConfigResult_ServePlatform) {
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["UNKNOWN_CONTEXT_PLATFORM"] = 0] = "UNKNOWN_CONTEXT_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["IOS_PLATFORM"] = 1] = "IOS_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["ANDROID_PLATFORM"] = 2] = "ANDROID_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["SERVER_PLATFORM"] = 3] = "SERVER_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigResult_ServePlatform || (ConfigResult_ServePlatform = {}));
export var ClientTargetingExpression_Operator;
(function (ClientTargetingExpression_Operator) {
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["UNKNOWN_OPERATOR"] = 0] = "UNKNOWN_OPERATOR";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["AND"] = 1] = "AND";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["OR"] = 2] = "OR";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_Operator || (ClientTargetingExpression_Operator = {}));
export var ClientTargetingExpression_PredicateOperator;
(function (ClientTargetingExpression_PredicateOperator) {
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["UNKNOWN_PREDICATE_OPERATOR"] = 0] = "UNKNOWN_PREDICATE_OPERATOR";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["EQUAL"] = 1] = "EQUAL";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["NOT_EQUAL"] = 2] = "NOT_EQUAL";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["GREATER_THAN_OR_EQUAL_TO"] = 3] = "GREATER_THAN_OR_EQUAL_TO";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["LESS_THAN_OR_EQUAL_TO"] = 4] = "LESS_THAN_OR_EQUAL_TO";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_PredicateOperator || (ClientTargetingExpression_PredicateOperator = {}));
export var ClientTargetingExpression_Property;
(function (ClientTargetingExpression_Property) {
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UNKNOWN_PROPERTY"] = 0] = "UNKNOWN_PROPERTY";
    /**
     * BATTERY_LEVEL - A enum ordinal indicating the battery level is LOW/MID/HIGH.
     * The ordinals are defined in snapchat.cdp.cof.battery_level.proto
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BATTERY_LEVEL"] = 1] = "BATTERY_LEVEL";
    /** IS_OFFLINE - A boolean indicating whether the device is offline. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_OFFLINE"] = 2] = "IS_OFFLINE";
    /** IS_CHARGING - A boolean indicating whether the device is charging. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_CHARGING"] = 3] = "IS_CHARGING";
    /** BANDWIDTH - An integer representing the download bandwidth in bps. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BANDWIDTH"] = 4] = "BANDWIDTH";
    /** DISK_SIZE - Disk size in mb */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DISK_SIZE"] = 5] = "DISK_SIZE";
    /** DISK_AVAILABLE - Disk space available in mb */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DISK_AVAILABLE"] = 6] = "DISK_AVAILABLE";
    /**
     * MEDIA_TYPE_DEPRECATED - An enum ordinal indicating the type of media being processed.
     * The ordinals are defined in snapchat.snapdoc.MediaMetadata.MediaType.
     *
     * @deprecated
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_TYPE_DEPRECATED"] = 7] = "MEDIA_TYPE_DEPRECATED";
    /** IS_PUBLIC_STORY - A boolean indicating whether the story is shared publicly. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_PUBLIC_STORY"] = 8] = "IS_PUBLIC_STORY";
    /** IS_OFFICIAL_STORY - A boolean indicating whether the story is posted from offcial account and is public. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_OFFICIAL_STORY"] = 9] = "IS_OFFICIAL_STORY";
    /** CAMERA_DIRECTION - An enum for camera direction */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_DIRECTION"] = 10] = "CAMERA_DIRECTION";
    /** CAMERA_CONTEXT - An enum for camera context */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_CONTEXT"] = 11] = "CAMERA_CONTEXT";
    /** CAMERA_API - An enum for camera API */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_API"] = 12] = "CAMERA_API";
    /** CAMERA_FLASH_STATE - An enum for camera flash state */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_FLASH_STATE"] = 13] = "CAMERA_FLASH_STATE";
    /** SNAP_SOURCE - An enum for where the snap orginates */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_SOURCE"] = 14] = "SNAP_SOURCE";
    /** LEGACY_MUSHROOM_CONTENT_TYPE - An enum for what content type is being used */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LEGACY_MUSHROOM_CONTENT_TYPE"] = 15] = "LEGACY_MUSHROOM_CONTENT_TYPE";
    /** UPLOAD_BANDWIDTH - An integer representing the upload bandwidth in bps. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UPLOAD_BANDWIDTH"] = 16] = "UPLOAD_BANDWIDTH";
    /** CAMERA2_LEVEL - An enum for camera2 hardware support level. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_LEVEL"] = 17] = "CAMERA2_LEVEL";
    /** CAMERA_NIGHT_MODE_STATE - An enum for Camera night model state. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_NIGHT_MODE_STATE"] = 18] = "CAMERA_NIGHT_MODE_STATE";
    /** USER_LANGUAGE - The language user chooses the app to display */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_LANGUAGE"] = 19] = "USER_LANGUAGE";
    /** VIDEO_DURATION - The video duration in ms. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["VIDEO_DURATION"] = 20] = "VIDEO_DURATION";
    /** REALTIME_MOBILE_NETWORK_GENERATION - Mobile network generation(3G, 4G, etc) defined in snapchat.cdp.cof.mobile_network_generation.proto */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_MOBILE_NETWORK_GENERATION"] = 21] = "REALTIME_MOBILE_NETWORK_GENERATION";
    /** REALTIME_NETWORK_TYPE - Mobile networktype defined via Connectivity.NetworkType in snapchat.cdp.cof.circumstance_engine.proto */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_TYPE"] = 22] = "REALTIME_NETWORK_TYPE";
    /** REALTIME_NETWORK_IS_METERED - A boolean for if the current network is metered. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_IS_METERED"] = 23] = "REALTIME_NETWORK_IS_METERED";
    /** REALTIME_NETWORK_IS_ROAMING - A boolean for if the current network is roaming. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_IS_ROAMING"] = 24] = "REALTIME_NETWORK_IS_ROAMING";
    /** CAMERA_IS_FIRST_CAPTURE - A boolean indicating whether this is the first capture after app cold start */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_IS_FIRST_CAPTURE"] = 25] = "CAMERA_IS_FIRST_CAPTURE";
    /** PICTURE_MODE - A enum indicating which type of image capture this was [GPU or JPEG] */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PICTURE_MODE"] = 26] = "PICTURE_MODE";
    /** BOLT_USE_CASE - An integer representing what BOLT usecase the caller is using. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_USE_CASE"] = 27] = "BOLT_USE_CASE";
    /** BOLT_CDN_EXPERIMENTATION_ID - An integer representing what BOLT cdn should be experimented with */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_CDN_EXPERIMENTATION_ID"] = 28] = "BOLT_CDN_EXPERIMENTATION_ID";
    /** MINS_SINCE_LAST_LENS_ACTIVATION - Num of mins since a user last activates the Lens. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINS_SINCE_LAST_LENS_ACTIVATION"] = 29] = "MINS_SINCE_LAST_LENS_ACTIVATION";
    /** MINS_SINCE_LAST_SNAPPABLE_LENS_ACTIVATION - Num of mins since user activated snappable lens for the last time. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINS_SINCE_LAST_SNAPPABLE_LENS_ACTIVATION"] = 30] = "MINS_SINCE_LAST_SNAPPABLE_LENS_ACTIVATION";
    /** DAYS_SINCE_LAST_LOGIN_OR_OPEN - Integer between 0 .. N which is the number of days since the user logged in or opened the app */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_LOGIN_OR_OPEN"] = 31] = "DAYS_SINCE_LAST_LOGIN_OR_OPEN";
    /** SPECTACLES_VERSION - An enum for Spectacles version */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPECTACLES_VERSION"] = 32] = "SPECTACLES_VERSION";
    /** STICKY_MAX_CONNECTION_TYPE - A client side property for evaluating the highest tier connection a client has recently used. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STICKY_MAX_CONNECTION_TYPE"] = 33] = "STICKY_MAX_CONNECTION_TYPE";
    /** WITH_ANIMATED_OVERLAY - A boolean indicating whether there is animated overlay with video snap. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WITH_ANIMATED_OVERLAY"] = 34] = "WITH_ANIMATED_OVERLAY";
    /** ESTIMATED_DURATION_FOR_EVENT_MS - Estimated duration for a config-specific event */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ESTIMATED_DURATION_FOR_EVENT_MS"] = 35] = "ESTIMATED_DURATION_FOR_EVENT_MS";
    /** URL - A URL */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["URL"] = 36] = "URL";
    /** MEDIA_SOURCE - content’s origin prior to being injected into the MDP stack */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_SOURCE"] = 37] = "MEDIA_SOURCE";
    /** ASSET_TYPE - how to compose an individual asset into one larger logical asset */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ASSET_TYPE"] = 38] = "ASSET_TYPE";
    /** BOLT_IS_CONTENT_POPULAR - A boolean representing whether the content being resolved is popular or not. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_IS_CONTENT_POPULAR"] = 39] = "BOLT_IS_CONTENT_POPULAR";
    /** CAPTURE_MODE - A enum indicating which mode of capture this was [Timeline or Unknown] */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAPTURE_MODE"] = 40] = "CAPTURE_MODE";
    /** VP9_SOFTWARE_DECODING_SUPPORTED - A boolean representing if VP9 software decoding is supported */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["VP9_SOFTWARE_DECODING_SUPPORTED"] = 41] = "VP9_SOFTWARE_DECODING_SUPPORTED";
    /** AV1_SOFTWARE_DECODING_SUPPORTED - A boolean representing if AV1 software decoding is supported */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AV1_SOFTWARE_DECODING_SUPPORTED"] = 42] = "AV1_SOFTWARE_DECODING_SUPPORTED";
    /** WITH_MUSIC - A boolean to indicate whether there is music edits (e.g. music sticker). */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WITH_MUSIC"] = 43] = "WITH_MUSIC";
    /**
     * FEATURE_PROVIDED_SIZE - A client provided integer representing size. The units is decided by the caller.
     * This will be evaluated using FeatureProvidedSignals.size
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FEATURE_PROVIDED_SIZE"] = 44] = "FEATURE_PROVIDED_SIZE";
    /**
     * MEDIA_TYPE - An enum ordinal indicating the type of media being processed.
     * The ordinals are defined in snapchat.cdp.cof.media_provided_signals.proto
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_TYPE"] = 45] = "MEDIA_TYPE";
    /** SCANNED_CATEGORY_IDS - The ids of the categories that are currently being scanned for (e.g. Amazon, Photomath, etc) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCANNED_CATEGORY_IDS"] = 46] = "SCANNED_CATEGORY_IDS";
    /**
     * CONTENT_VIEW_SOURCE - Numerical value of ContentViewSource (Blizzard enum) which identified Opera session
     * On the client the value is provided via FeatureProvidedSignals.OperaSignals
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTENT_VIEW_SOURCE"] = 47] = "CONTENT_VIEW_SOURCE";
    /** RECIPIENTS_SUPPORT_HEVC - A boolean indicating whether a group of recipients support High Efficiency Video Encoding (HEVC) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RECIPIENTS_SUPPORT_HEVC"] = 48] = "RECIPIENTS_SUPPORT_HEVC";
    /** COGNAC_APP_ID - A Cognac game/mini id that a user is playing */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COGNAC_APP_ID"] = 49] = "COGNAC_APP_ID";
    /** EMAIL_VERIFIED - Whether user's email has verified */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["EMAIL_VERIFIED"] = 50] = "EMAIL_VERIFIED";
    /** PHONE_VERIFIED - Whether user's phone number has verified */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PHONE_VERIFIED"] = 51] = "PHONE_VERIFIED";
    /** NOTIFICATION_PERM_GRANTED - Whether notification permission has granted */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NOTIFICATION_PERM_GRANTED"] = 52] = "NOTIFICATION_PERM_GRANTED";
    /** CONTACT_PERM_GRANTED - Whether contact permission has granted */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTACT_PERM_GRANTED"] = 53] = "CONTACT_PERM_GRANTED";
    /** MUTUAL_FRIENDS_COUNT - Mutual friends count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MUTUAL_FRIENDS_COUNT"] = 54] = "MUTUAL_FRIENDS_COUNT";
    /** GROUPS_COUNT - Groups count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GROUPS_COUNT"] = 55] = "GROUPS_COUNT";
    /** HAS_NON_TEAM_SNAPCHAT_CONVERSATIONS - Whether user has non-team snapchat conversations */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_NON_TEAM_SNAPCHAT_CONVERSATIONS"] = 56] = "HAS_NON_TEAM_SNAPCHAT_CONVERSATIONS";
    /**
     * PLAYBACK_ITEM_TYPE - Numerical value of PlaybackItemType (Blizzard enum) which identifies an Opera playback item type
     * On the client the value is provided via PlaybackItemType
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PLAYBACK_ITEM_TYPE"] = 57] = "PLAYBACK_ITEM_TYPE";
    /**
     * SUP_BOOLEAN_PROPERTY - To get the corresponding SUP property values, check on property_metadata.sup_item_id.item_id
     * Sup boolean property
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_BOOLEAN_PROPERTY"] = 58] = "SUP_BOOLEAN_PROPERTY";
    /** SUP_INTEGER_PROPERTY - Sup integer property */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_INTEGER_PROPERTY"] = 59] = "SUP_INTEGER_PROPERTY";
    /** SUP_LONG_PROPERTY - Sup long property */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_LONG_PROPERTY"] = 60] = "SUP_LONG_PROPERTY";
    /** SUP_STRING_PROPERTY - Sup string property */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_STRING_PROPERTY"] = 61] = "SUP_STRING_PROPERTY";
    /** SUP_DOUBLE_PROPERTY - Sup double property */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_DOUBLE_PROPERTY"] = 62] = "SUP_DOUBLE_PROPERTY";
    /** SUP_MILLIS_PROPERTY_TO_NOW - Sup long property as timestamp in millis to get time elapsed */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_MILLIS_PROPERTY_TO_NOW"] = 63] = "SUP_MILLIS_PROPERTY_TO_NOW";
    /** HAS_USED_SPECTACLES - Whether the user has used Spectacles (incl. Cheerios) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_USED_SPECTACLES"] = 64] = "HAS_USED_SPECTACLES";
    /**
     * SUP_SECS_PROPERTY_TO_NOW - To get the corresponding SUP property values, check on property_metadata.sup_item_id.item_id
     * Sup long property as timestamp in seconds to get time elapsed
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_SECS_PROPERTY_TO_NOW"] = 65] = "SUP_SECS_PROPERTY_TO_NOW";
    /** BOLT_CLIENT_APP_STATE - Enum indicating client App State (Used by BOLT to create targeted network rules) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_CLIENT_APP_STATE"] = 66] = "BOLT_CLIENT_APP_STATE";
    /** EMAIL_SET - Whether user's email has been set (might or might not be verified) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["EMAIL_SET"] = 67] = "EMAIL_SET";
    /** BITMOJI_SET - Whether user's bitmoji has been set */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BITMOJI_SET"] = 68] = "BITMOJI_SET";
    /** QUICK_TAP_CAMERA_SUPPORTED_ENABLED - Quick tap on camera is supported and enabled */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["QUICK_TAP_CAMERA_SUPPORTED_ENABLED"] = 69] = "QUICK_TAP_CAMERA_SUPPORTED_ENABLED";
    /** HAS_ADD_FRIENDS_REQUEST - Whether user has add friends request */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ADD_FRIENDS_REQUEST"] = 70] = "HAS_ADD_FRIENDS_REQUEST";
    /** APP_LAUNCH_FROM_PUSH - App launched from push notification */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LAUNCH_FROM_PUSH"] = 71] = "APP_LAUNCH_FROM_PUSH";
    /** APP_LAUNCH_TYPE - App launch type: cold start, warm start, registration and login */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LAUNCH_TYPE"] = 72] = "APP_LAUNCH_TYPE";
    /** BILLBOARD_CAMPAIGN_LOCAL_IMPRESSION_COUNT - Billboard locally tracked impression count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_IMPRESSION_COUNT"] = 73] = "BILLBOARD_CAMPAIGN_LOCAL_IMPRESSION_COUNT";
    /** BILLBOARD_CAMPAIGN_LOCAL_LAST_IMPRESSION_TIME_SECS_TO_NOW - Billboard locally tracked last impression time in secs to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_IMPRESSION_TIME_SECS_TO_NOW"] = 74] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_IMPRESSION_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_CONTINUOUS_DISMISS_COUNT - Billboard locally tracked continuous dismiss count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_CONTINUOUS_DISMISS_COUNT"] = 75] = "BILLBOARD_CAMPAIGN_LOCAL_CONTINUOUS_DISMISS_COUNT";
    /** FST_NUM_IN_APP_WARNINGS - FST number of in app warnings to show */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_NUM_IN_APP_WARNINGS"] = 76] = "FST_NUM_IN_APP_WARNINGS";
    /** FST_SHOULD_CHANGE_PASSWORD - FST user should change password */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_SHOULD_CHANGE_PASSWORD"] = 77] = "FST_SHOULD_CHANGE_PASSWORD";
    /** FST_IS_BACKGROUND_CHECK - Whether it's a background check or foreground check. Android specific */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_IS_BACKGROUND_CHECK"] = 78] = "FST_IS_BACKGROUND_CHECK";
    /** AUDIO_RECORD_PERM_GRANTED - Whether audio record permission has granted */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AUDIO_RECORD_PERM_GRANTED"] = 79] = "AUDIO_RECORD_PERM_GRANTED";
    /** MUTUAL_FRIENDS_WITH_BIRTHDAY_COUNT - Mutual Friends with birthday count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MUTUAL_FRIENDS_WITH_BIRTHDAY_COUNT"] = 80] = "MUTUAL_FRIENDS_WITH_BIRTHDAY_COUNT";
    /** BILLBOARD_CAMPAIGN_LOCAL_DISMISS_COUNT - Billboard locally tracked dismiss count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_DISMISS_COUNT"] = 81] = "BILLBOARD_CAMPAIGN_LOCAL_DISMISS_COUNT";
    /** USE_VERTICAL_NAVIGATION - A boolean to indicate whether Opera uses vertical navigation or not. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USE_VERTICAL_NAVIGATION"] = 82] = "USE_VERTICAL_NAVIGATION";
    /**
     * FREEABLE_DISK_AVAILABLE - Freeable disk space available in mb. This included Content Manager freeable
     * bytes + DISK_AVAILABLE
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FREEABLE_DISK_AVAILABLE"] = 83] = "FREEABLE_DISK_AVAILABLE";
    /** MEMORIES_COUNT - Num of memories snaps user has */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEMORIES_COUNT"] = 84] = "MEMORIES_COUNT";
    /** DEVICE_MODEL - DEVICE_MODEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_MODEL"] = 85] = "DEVICE_MODEL";
    /** COUNTRY - COUNTRY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COUNTRY"] = 86] = "COUNTRY";
    /** OS - OS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["OS"] = 87] = "OS";
    /** OS_VERSION - OS_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["OS_VERSION"] = 88] = "OS_VERSION";
    /** APP_VERSION - APP_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_VERSION"] = 89] = "APP_VERSION";
    /** BUILD_FLAVOR - BUILD_FLAVOR (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_FLAVOR"] = 90] = "BUILD_FLAVOR";
    /** USER_ID - USER_ID (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_ID"] = 91] = "USER_ID";
    /** LOCALE - LOCALE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LOCALE"] = 92] = "LOCALE";
    /** DEVICE_CLUSTER - DEVICE_CLUSTER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_CLUSTER"] = 93] = "DEVICE_CLUSTER";
    /** DEVICE_BRAND - DEVICE_BRAND (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_BRAND"] = 94] = "DEVICE_BRAND";
    /** IS_EMPLOYEE - IS_EMPLOYEE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_EMPLOYEE"] = 95] = "IS_EMPLOYEE";
    /** USERNAME - USERNAME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USERNAME"] = 96] = "USERNAME";
    /** IS_TEST_USER - IS_TEST_USER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_TEST_USER"] = 97] = "IS_TEST_USER";
    /** USER_PROFILE - USER_PROFILE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PROFILE"] = 98] = "USER_PROFILE";
    /** SCREEN_WIDTH - SCREEN_WIDTH (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_WIDTH"] = 99] = "SCREEN_WIDTH";
    /** SCREEN_HEIGHT - SCREEN_HEIGHT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_HEIGHT"] = 100] = "SCREEN_HEIGHT";
    /** HEVC_SUPPORT - HEVC_SUPPORT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_SUPPORT"] = 101] = "HEVC_SUPPORT";
    /** NETWORK_TYPE - NETWORK_TYPE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NETWORK_TYPE"] = 102] = "NETWORK_TYPE";
    /** MAX_VIDEO_WIDTH - MAX_VIDEO_WIDTH (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MAX_VIDEO_WIDTH"] = 103] = "MAX_VIDEO_WIDTH";
    /** MAX_VIDEO_HEIGHT - MAX_VIDEO_HEIGHT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MAX_VIDEO_HEIGHT"] = 104] = "MAX_VIDEO_HEIGHT";
    /** IS_NETWORK_METERED - IS_NETWORK_METERED (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_NETWORK_METERED"] = 105] = "IS_NETWORK_METERED";
    /** IS_ROAMING - IS_ROAMING (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ROAMING"] = 106] = "IS_ROAMING";
    /** APP_ENGAGEMENT_LEVEL - APP_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_ENGAGEMENT_LEVEL"] = 107] = "APP_ENGAGEMENT_LEVEL";
    /** COMMUNICATION_ENGAGEMENT_LEVEL - COMMUNICATION_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNICATION_ENGAGEMENT_LEVEL"] = 108] = "COMMUNICATION_ENGAGEMENT_LEVEL";
    /** FRIEND_STORY_ENGAGEMENT_LEVEL - FRIEND_STORY_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FRIEND_STORY_ENGAGEMENT_LEVEL"] = 109] = "FRIEND_STORY_ENGAGEMENT_LEVEL";
    /** PUBLIC_USER_STORY_ENGAGEMENT_LEVEL - PUBLIC_USER_STORY_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PUBLIC_USER_STORY_ENGAGEMENT_LEVEL"] = 110] = "PUBLIC_USER_STORY_ENGAGEMENT_LEVEL";
    /** PUBLISHER_STORY_ENGAGEMENT_LEVEL - PUBLISHER_STORY_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PUBLISHER_STORY_ENGAGEMENT_LEVEL"] = 111] = "PUBLISHER_STORY_ENGAGEMENT_LEVEL";
    /** LENS_ENGAGEMENT_LEVEL - LENS_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_ENGAGEMENT_LEVEL"] = 112] = "LENS_ENGAGEMENT_LEVEL";
    /** NON_FRIEND_STORY_ENGAGEMENT_LEVEL - NON_FRIEND_STORY_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NON_FRIEND_STORY_ENGAGEMENT_LEVEL"] = 113] = "NON_FRIEND_STORY_ENGAGEMENT_LEVEL";
    /** FOLLOWER_SIZE_LEVEL - FOLLOWER_SIZE_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FOLLOWER_SIZE_LEVEL"] = 114] = "FOLLOWER_SIZE_LEVEL";
    /** DAYS_SINCE_CREATION - DAYS_SINCE_CREATION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_CREATION"] = 115] = "DAYS_SINCE_CREATION";
    /** USER_PERSONA - USER_PERSONA (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PERSONA"] = 116] = "USER_PERSONA";
    /** USER_CREATION_TIME - USER_CREATION_TIME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_CREATION_TIME"] = 117] = "USER_CREATION_TIME";
    /** MOBILE_NETWORK_TYPE - MOBILE_NETWORK_TYPE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MOBILE_NETWORK_TYPE"] = 118] = "MOBILE_NETWORK_TYPE";
    /** AGGREGATED_USER_BANDWIDTH - AGGREGATED_USER_BANDWIDTH (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AGGREGATED_USER_BANDWIDTH"] = 119] = "AGGREGATED_USER_BANDWIDTH";
    /** LENS_CLUSTER_BIASED - LENS_CLUSTER_BIASED (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_BIASED"] = 120] = "LENS_CLUSTER_BIASED";
    /** LENS_CLUSTER_LOG - LENS_CLUSTER_LOG (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_LOG"] = 121] = "LENS_CLUSTER_LOG";
    /** LENS_CLUSTER_ORIG - LENS_CLUSTER_ORIG (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_ORIG"] = 122] = "LENS_CLUSTER_ORIG";
    /** LENS_CLUSTER_ORIG_4 - LENS_CLUSTER_ORIG_4 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_ORIG_4"] = 123] = "LENS_CLUSTER_ORIG_4";
    /** LENS_CLUSTER_BIASED_LOG - LENS_CLUSTER_BIASED_LOG (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_BIASED_LOG"] = 124] = "LENS_CLUSTER_BIASED_LOG";
    /** APP_LOCALE - APP_LOCALE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LOCALE"] = 125] = "APP_LOCALE";
    /** DEVICE_COMMON_NAME - DEVICE_COMMON_NAME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_COMMON_NAME"] = 126] = "DEVICE_COMMON_NAME";
    /** USER_FRIEND_COUNT - USER_FRIEND_COUNT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_FRIEND_COUNT"] = 127] = "USER_FRIEND_COUNT";
    /** L90_COUNTRY - L90_COUNTRY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["L90_COUNTRY"] = 128] = "L90_COUNTRY";
    /** STUB - STUB (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STUB"] = 129] = "STUB";
    /** IS_TRUE - IS_TRUE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_TRUE"] = 130] = "IS_TRUE";
    /** STORY_POST_RATIO - STORY_POST_RATIO (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_RATIO"] = 131] = "STORY_POST_RATIO";
    /** GENDER - GENDER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GENDER"] = 132] = "GENDER";
    /** INFERRED_AGE_BUCKET - INFERRED_AGE_BUCKET (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["INFERRED_AGE_BUCKET"] = 133] = "INFERRED_AGE_BUCKET";
    /** STORIES - STORIES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORIES"] = 134] = "STORIES";
    /** SENDS - SENDS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SENDS"] = 135] = "SENDS";
    /** SNAP_CREATE_L7 - SNAP_CREATE_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_CREATE_L7"] = 136] = "SNAP_CREATE_L7";
    /** STORY_POST_L7 - STORY_POST_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_L7"] = 137] = "STORY_POST_L7";
    /** COMMUNICATION_L7 - COMMUNICATION_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNICATION_L7"] = 138] = "COMMUNICATION_L7";
    /** DF_L7 - DF_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DF_L7"] = 139] = "DF_L7";
    /** APP_L7 - APP_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_L7"] = 140] = "APP_L7";
    /** DAYS_SINCE_CREATION_BUCKET - DAYS_SINCE_CREATION_BUCKET (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_CREATION_BUCKET"] = 141] = "DAYS_SINCE_CREATION_BUCKET";
    /** BIDIRECTIONAL_FRIEND_STATUS - BIDIRECTIONAL_FRIEND_STATUS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BIDIRECTIONAL_FRIEND_STATUS"] = 142] = "BIDIRECTIONAL_FRIEND_STATUS";
    /** STORY_POST_PREDICTION - STORY_POST_PREDICTION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_PREDICTION"] = 143] = "STORY_POST_PREDICTION";
    /** APP_OPENS - APP_OPENS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPENS"] = 144] = "APP_OPENS";
    /** LENS_SWIPES - LENS_SWIPES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SWIPES"] = 145] = "LENS_SWIPES";
    /** LENS_SNAPS - LENS_SNAPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SNAPS"] = 146] = "LENS_SNAPS";
    /** LENS_OPS - LENS_OPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_OPS"] = 147] = "LENS_OPS";
    /** W1_APP_OPENS - W1_APP_OPENS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_APP_OPENS"] = 148] = "W1_APP_OPENS";
    /** W1_LENS_SWIPES - W1_LENS_SWIPES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_SWIPES"] = 149] = "W1_LENS_SWIPES";
    /** W1_LENS_SNAPS - W1_LENS_SNAPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_SNAPS"] = 150] = "W1_LENS_SNAPS";
    /** W1_LENS_OPS - W1_LENS_OPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_OPS"] = 151] = "W1_LENS_OPS";
    /** W2_APP_OPENS - W2_APP_OPENS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_APP_OPENS"] = 152] = "W2_APP_OPENS";
    /** W2_LENS_SWIPES - W2_LENS_SWIPES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_SWIPES"] = 153] = "W2_LENS_SWIPES";
    /** W2_LENS_SNAPS - W2_LENS_SNAPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_SNAPS"] = 154] = "W2_LENS_SNAPS";
    /** W2_LENS_OPS - W2_LENS_OPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_OPS"] = 155] = "W2_LENS_OPS";
    /** W34_APP_OPENS - W34_APP_OPENS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_APP_OPENS"] = 156] = "W34_APP_OPENS";
    /** W34_LENS_SWIPES - W34_LENS_SWIPES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_SWIPES"] = 157] = "W34_LENS_SWIPES";
    /** W34_LENS_SNAPS - W34_LENS_SNAPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_SNAPS"] = 158] = "W34_LENS_SNAPS";
    /** W34_LENS_OPS - W34_LENS_OPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_OPS"] = 159] = "W34_LENS_OPS";
    /** LENS_SWIPES_PREDICTION - LENS_SWIPES_PREDICTION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SWIPES_PREDICTION"] = 160] = "LENS_SWIPES_PREDICTION";
    /** REGISTRATION_COUNTRY - REGISTRATION_COUNTRY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REGISTRATION_COUNTRY"] = 161] = "REGISTRATION_COUNTRY";
    /** IP_ASN - IP_ASN (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_ASN"] = 162] = "IP_ASN";
    /** IP_REGION - IP_REGION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_REGION"] = 163] = "IP_REGION";
    /** IP_CITY - IP_CITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_CITY"] = 164] = "IP_CITY";
    /** HAS_USER_ID - HAS_USER_ID (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_USER_ID"] = 165] = "HAS_USER_ID";
    /** HAS_BITMOJI - HAS_BITMOJI (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_BITMOJI"] = 166] = "HAS_BITMOJI";
    /** NUM_APP_OPENS_LAST_8_DAYS - NUM_APP_OPENS_LAST_8_DAYS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_APP_OPENS_LAST_8_DAYS"] = 167] = "NUM_APP_OPENS_LAST_8_DAYS";
    /** NUM_FEATURE_STORY_VIEW_DAYS_L7 - NUM_FEATURE_STORY_VIEW_DAYS_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_FEATURE_STORY_VIEW_DAYS_L7"] = 168] = "NUM_FEATURE_STORY_VIEW_DAYS_L7";
    /** NUM_FEATURE_STORY_SYNC_DAYS_L7 - NUM_FEATURE_STORY_SYNC_DAYS_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_FEATURE_STORY_SYNC_DAYS_L7"] = 169] = "NUM_FEATURE_STORY_SYNC_DAYS_L7";
    /** HEXAGON_NN_SUPPORTED_VERSION - HEXAGON_NN_SUPPORTED_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEXAGON_NN_SUPPORTED_VERSION"] = 170] = "HEXAGON_NN_SUPPORTED_VERSION";
    /** NETWORK_QUALITY - NETWORK_QUALITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NETWORK_QUALITY"] = 171] = "NETWORK_QUALITY";
    /** DEVICE_MEMORY_MB - DEVICE_MEMORY_MB (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_MEMORY_MB"] = 172] = "DEVICE_MEMORY_MB";
    /** DEVICE_GL_VERSION - DEVICE_GL_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_GL_VERSION"] = 173] = "DEVICE_GL_VERSION";
    /** SNAP_PRO_STATUS - SNAP_PRO_STATUS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PRO_STATUS"] = 174] = "SNAP_PRO_STATUS";
    /** DEVICE_VP9_DECODING_SUPPORT - DEVICE_VP9_DECODING_SUPPORT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_VP9_DECODING_SUPPORT"] = 175] = "DEVICE_VP9_DECODING_SUPPORT";
    /** AVG_FRIEND_STORY_VIEW_COUNT_L7 - AVG_FRIEND_STORY_VIEW_COUNT_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AVG_FRIEND_STORY_VIEW_COUNT_L7"] = 176] = "AVG_FRIEND_STORY_VIEW_COUNT_L7";
    /** GAME_JOIN_TIME - GAME_JOIN_TIME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GAME_JOIN_TIME"] = 177] = "GAME_JOIN_TIME";
    /** GAME_LAST_ACTIVE_TIME - GAME_LAST_ACTIVE_TIME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GAME_LAST_ACTIVE_TIME"] = 178] = "GAME_LAST_ACTIVE_TIME";
    /** DAYS_SINCE_FIRST_GAME_ACTIVITY - DAYS_SINCE_FIRST_GAME_ACTIVITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_GAME_ACTIVITY"] = 179] = "DAYS_SINCE_FIRST_GAME_ACTIVITY";
    /** DAYS_SINCE_LAST_GAME_ACTIVITY - DAYS_SINCE_LAST_GAME_ACTIVITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_GAME_ACTIVITY"] = 180] = "DAYS_SINCE_LAST_GAME_ACTIVITY";
    /** PF_PAGE_SESSIONS_WITH_LONG_IMP - PF_PAGE_SESSIONS_WITH_LONG_IMP (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PF_PAGE_SESSIONS_WITH_LONG_IMP"] = 181] = "PF_PAGE_SESSIONS_WITH_LONG_IMP";
    /** WIRELESS_CARRIER - WIRELESS_CARRIER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WIRELESS_CARRIER"] = 182] = "WIRELESS_CARRIER";
    /** MINIS_JOIN_TIME - MINIS_JOIN_TIME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINIS_JOIN_TIME"] = 183] = "MINIS_JOIN_TIME";
    /** MINIS_LAST_ACTIVE_TIME - MINIS_LAST_ACTIVE_TIME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINIS_LAST_ACTIVE_TIME"] = 184] = "MINIS_LAST_ACTIVE_TIME";
    /** DAYS_SINCE_FIRST_MINIS_ACTIVITY - DAYS_SINCE_FIRST_MINIS_ACTIVITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_MINIS_ACTIVITY"] = 185] = "DAYS_SINCE_FIRST_MINIS_ACTIVITY";
    /** DAYS_SINCE_LAST_MINIS_ACTIVITY - DAYS_SINCE_LAST_MINIS_ACTIVITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_MINIS_ACTIVITY"] = 186] = "DAYS_SINCE_LAST_MINIS_ACTIVITY";
    /** DEVICE_AV1_DECODING_SUPPORT - DEVICE_AV1_DECODING_SUPPORT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_AV1_DECODING_SUPPORT"] = 187] = "DEVICE_AV1_DECODING_SUPPORT";
    /** APP_PACKAGE_INSTALLER - APP_PACKAGE_INSTALLER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_PACKAGE_INSTALLER"] = 188] = "APP_PACKAGE_INSTALLER";
    /** STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL - STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL"] = 189] = "STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL";
    /** REPORTED_AGE - REPORTED_AGE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REPORTED_AGE"] = 190] = "REPORTED_AGE";
    /** ANDROID_MOBILE_SERVICES_PROVIDER - ANDROID_MOBILE_SERVICES_PROVIDER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ANDROID_MOBILE_SERVICES_PROVIDER"] = 191] = "ANDROID_MOBILE_SERVICES_PROVIDER";
    /** IS_ACQUIRED_USER - IS_ACQUIRED_USER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ACQUIRED_USER"] = 192] = "IS_ACQUIRED_USER";
    /** YDPI - YDPI (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["YDPI"] = 193] = "YDPI";
    /** BIDIRECTIONAL_FRIEND_STATUS_VELLUM - BIDIRECTIONAL_FRIEND_STATUS_VELLUM (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BIDIRECTIONAL_FRIEND_STATUS_VELLUM"] = 194] = "BIDIRECTIONAL_FRIEND_STATUS_VELLUM";
    /** ORIGIN - ORIGIN (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORIGIN"] = 195] = "ORIGIN";
    /** LENSCORE_VERSION - LENSCORE_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENSCORE_VERSION"] = 196] = "LENSCORE_VERSION";
    /** SNAPKIT_APP_ID - SNAPKIT_APP_ID (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPKIT_APP_ID"] = 197] = "SNAPKIT_APP_ID";
    /** GPU - GPU (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GPU"] = 198] = "GPU";
    /** CHIPSET_NAME - CHIPSET_NAME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHIPSET_NAME"] = 199] = "CHIPSET_NAME";
    /** CHIPSET_VERSION - CHIPSET_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHIPSET_VERSION"] = 200] = "CHIPSET_VERSION";
    /** HAS_ZERO_IDFA - HAS_ZERO_IDFA (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ZERO_IDFA"] = 201] = "HAS_ZERO_IDFA";
    /** LIMIT_AD_TRACKING - LIMIT_AD_TRACKING (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LIMIT_AD_TRACKING"] = 202] = "LIMIT_AD_TRACKING";
    /** ATT_AUTH_STATUS - ATT_AUTH_STATUS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ATT_AUTH_STATUS"] = 203] = "ATT_AUTH_STATUS";
    /** CAMERA2_FRONT_SS_GAIN_OVER_TPA - CAMERA2_FRONT_SS_GAIN_OVER_TPA (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_FRONT_SS_GAIN_OVER_TPA"] = 204] = "CAMERA2_FRONT_SS_GAIN_OVER_TPA";
    /** ATTACHMENT_TOOL_V2 - ATTACHMENT_TOOL_V2 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ATTACHMENT_TOOL_V2"] = 205] = "ATTACHMENT_TOOL_V2";
    /** USER_PERSONA_V3 - USER_PERSONA_V3 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PERSONA_V3"] = 206] = "USER_PERSONA_V3";
    /** SNAPS_SEND_WITH_HEVC - SNAPS_SEND_WITH_HEVC (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPS_SEND_WITH_HEVC"] = 207] = "SNAPS_SEND_WITH_HEVC";
    /** SNAPS_SEND_WITHOUT_HEVC - SNAPS_SEND_WITHOUT_HEVC (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPS_SEND_WITHOUT_HEVC"] = 208] = "SNAPS_SEND_WITHOUT_HEVC";
    /** CAMERA2_NATIVE_CRASH_OVER_CAMERA1 - CAMERA2_NATIVE_CRASH_OVER_CAMERA1 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_NATIVE_CRASH_OVER_CAMERA1"] = 209] = "CAMERA2_NATIVE_CRASH_OVER_CAMERA1";
    /** CAMERA2_G2S_LATENCY_OVER_CAMERA1 - CAMERA2_G2S_LATENCY_OVER_CAMERA1 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_G2S_LATENCY_OVER_CAMERA1"] = 210] = "CAMERA2_G2S_LATENCY_OVER_CAMERA1";
    /** IS_INTERNAL - IS_INTERNAL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_INTERNAL"] = 211] = "IS_INTERNAL";
    /** IS_WEB - IS_WEB (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_WEB"] = 212] = "IS_WEB";
    /** APP_OPEN_TO_MAP - APP_OPEN_TO_MAP (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_MAP"] = 213] = "APP_OPEN_TO_MAP";
    /** APP_OPEN_TO_FRIENDSFEED - APP_OPEN_TO_FRIENDSFEED (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_FRIENDSFEED"] = 214] = "APP_OPEN_TO_FRIENDSFEED";
    /** APP_OPEN_TO_LENSES - APP_OPEN_TO_LENSES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_LENSES"] = 215] = "APP_OPEN_TO_LENSES";
    /** APP_OPEN_TO_MEMORIES - APP_OPEN_TO_MEMORIES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_MEMORIES"] = 216] = "APP_OPEN_TO_MEMORIES";
    /** APP_OPEN_TO_COMMUNITY - APP_OPEN_TO_COMMUNITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_COMMUNITY"] = 217] = "APP_OPEN_TO_COMMUNITY";
    /** APP_OPEN_TO_SPOTLIGHT - APP_OPEN_TO_SPOTLIGHT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_SPOTLIGHT"] = 218] = "APP_OPEN_TO_SPOTLIGHT";
    /** IS_IMPACTED_BY_PINC_893 - IS_IMPACTED_BY_PINC_893 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_IMPACTED_BY_PINC_893"] = 219] = "IS_IMPACTED_BY_PINC_893";
    /** DAYS_BEFORE_BIRTHDAY - DAYS_BEFORE_BIRTHDAY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_BEFORE_BIRTHDAY"] = 220] = "DAYS_BEFORE_BIRTHDAY";
    /** HAS_BIPA - HAS_BIPA (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_BIPA"] = 221] = "HAS_BIPA";
    /** SPOTLIGHT_STORY_ENGAGEMENT_STATUS - SPOTLIGHT_STORY_ENGAGEMENT_STATUS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPOTLIGHT_STORY_ENGAGEMENT_STATUS"] = 222] = "SPOTLIGHT_STORY_ENGAGEMENT_STATUS";
    /** INCLUSION_PANEL_MEMBER - INCLUSION_PANEL_MEMBER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["INCLUSION_PANEL_MEMBER"] = 223] = "INCLUSION_PANEL_MEMBER";
    /** HEVC_HW_DECODER - HEVC_HW_DECODER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_HW_DECODER"] = 224] = "HEVC_HW_DECODER";
    /** HEVC_SW_DECODER - HEVC_SW_DECODER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_SW_DECODER"] = 225] = "HEVC_SW_DECODER";
    /**
     * HASH_MURMUR3_128_MOD_100 - Value of a Murmur3 hash of one of the hash_signals fields modulo 100
     * PropertyMetadata.signal_to_hash determines which field should be hashed
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HASH_MURMUR3_128_MOD_100"] = 226] = "HASH_MURMUR3_128_MOD_100";
    /** HAS_ACTIVE_SNAPCHAT_PLUS - Whether user has active Snapchat+ subscription in Atlas's UserData plus_subscription_info property */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ACTIVE_SNAPCHAT_PLUS"] = 227] = "HAS_ACTIVE_SNAPCHAT_PLUS";
    /** SNAP_KIT_OAUTH_ID - OAuth Client ID identifying the source third party application for Snap Kit content */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_KIT_OAUTH_ID"] = 228] = "SNAP_KIT_OAUTH_ID";
    /** ORGANIZATION_TYPE - Organization type of advertiser purchasing ads */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORGANIZATION_TYPE"] = 229] = "ORGANIZATION_TYPE";
    /**
     * CHUNK_UPLOAD_SUPPORT_REQUIRED - Client provided boolean that represent whether the config
     * needs to support uploading in a chunked/streaming manner
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHUNK_UPLOAD_SUPPORT_REQUIRED"] = 230] = "CHUNK_UPLOAD_SUPPORT_REQUIRED";
    /** CLOUDFRONT_POP - The last known CloudFront Point of Presence used */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CLOUDFRONT_POP"] = 231] = "CLOUDFRONT_POP";
    /** BILLBOARD_CAMPAIGN_LOCAL_FIRST_IMPRESSION_TIME_SECS_TO_NOW - Billboard locally tracked first impresstion time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_IMPRESSION_TIME_SECS_TO_NOW"] = 232] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_IMPRESSION_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_CLICK_COUNT - Billboard locally tracked click count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_CLICK_COUNT"] = 233] = "BILLBOARD_CAMPAIGN_LOCAL_CLICK_COUNT";
    /** BILLBOARD_CAMPAIGN_LOCAL_INTERACTION_COUNT - Billboard locally tracked interaction count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_INTERACTION_COUNT"] = 234] = "BILLBOARD_CAMPAIGN_LOCAL_INTERACTION_COUNT";
    /** BILLBOARD_CAMPAIGN_LOCAL_LAST_INTERACTION_TIME_SECS_TO_NOW - Billboard locally tracked last interaction time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_INTERACTION_TIME_SECS_TO_NOW"] = 235] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_INTERACTION_TIME_SECS_TO_NOW";
    /** FST_LOCK_SCREEN_WIDGET_BILLBOARD_LAUNCHED_FROM_PUSH - Lock screen widgets billboard - app open via push notification */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_LOCK_SCREEN_WIDGET_BILLBOARD_LAUNCHED_FROM_PUSH"] = 236] = "FST_LOCK_SCREEN_WIDGET_BILLBOARD_LAUNCHED_FROM_PUSH";
    /** WEB_SCREEN_WIDTH - Web browser screen width in CSS pixels */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEB_SCREEN_WIDTH"] = 237] = "WEB_SCREEN_WIDTH";
    /** WEB_SCREEN_HEIGHT - Web browser screen height in CSS pixels */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEB_SCREEN_HEIGHT"] = 238] = "WEB_SCREEN_HEIGHT";
    /** SUP_IOS_LOCK_SCREEN_WIDGET_ENABLED - iOS 16 lock screen widgets enabled */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_IOS_LOCK_SCREEN_WIDGET_ENABLED"] = 239] = "SUP_IOS_LOCK_SCREEN_WIDGET_ENABLED";
    /** SNAP_PRIVACY - Atlas enum property that indicates a user's snap privacy settings (Friends vs. Everyone) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PRIVACY"] = 240] = "SNAP_PRIVACY";
    /** ADS_INTERFACES_IS_NEW_ORGANIZATION - Is a new organization in ads interfaces UI */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ADS_INTERFACES_IS_NEW_ORGANIZATION"] = 241] = "ADS_INTERFACES_IS_NEW_ORGANIZATION";
    /** SERVER_ONLY - if true only server callers can get the config */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SERVER_ONLY"] = 242] = "SERVER_ONLY";
    /** GHE_ORGANIZATION - The Github Enterprise organization */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_ORGANIZATION"] = 243] = "GHE_ORGANIZATION";
    /** GHE_REPOSITORY - The Github Enterprise Repository, which is contained by a GHE organization */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_REPOSITORY"] = 244] = "GHE_REPOSITORY";
    /** GHE_USER_EMAIL - In the context of Machamp, the user identifier (email) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_USER_EMAIL"] = 245] = "GHE_USER_EMAIL";
    /** BUILD_DEFINITION_ID - In the context of Machamp, the build definition identifier is a UUID hash of the GHE organization and and repository. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_DEFINITION_ID"] = 246] = "BUILD_DEFINITION_ID";
    /** BUILD_DEFINITION_NAME - In the context of Machamp, the build definition name is name of the build from the build.yaml */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_DEFINITION_NAME"] = 247] = "BUILD_DEFINITION_NAME";
    /** LCA_PRINCIPAL - LCA Principal of the service calling Circumstance Engine */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LCA_PRINCIPAL"] = 248] = "LCA_PRINCIPAL";
    /**
     * MEDIA_PERFORMANCE_CLASS - A performance class defines a set of device capabilities by Android
     * e.g. 30, 31, See https://android-developers.googleblog.com/2022/03/using-performance-class-to-optimize.html
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_PERFORMANCE_CLASS"] = 249] = "MEDIA_PERFORMANCE_CLASS";
    /** COMMUNITY_COUNT - Number of Communities user is in */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNITY_COUNT"] = 250] = "COMMUNITY_COUNT";
    /** RECIPIENTS_SUPPORT_FMP4 - A boolean indicating whether a group of recipients support fMP4 playback */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RECIPIENTS_SUPPORT_FMP4"] = 251] = "RECIPIENTS_SUPPORT_FMP4";
    /** SCREEN_ASPECT_RATIO - The screen aspect ratio. It's the result of SCREEN_WIDTH / SCREEN_HEIGHT */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_ASPECT_RATIO"] = 252] = "SCREEN_ASPECT_RATIO";
    /**
     * USER_GROUP - USER GROUP. This property is not expected to ever be supported on any
     * of the clients, but is rather needed to signal to the client that a given
     * config depends on an unsupported property, so that the client can emit a metric
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_GROUP"] = 253] = "USER_GROUP";
    /**
     * USER_HAS_DENIED_CAMERA_PERM - A boolean value indicating whether the user has denied camera permission. And the property
     * value would remain TRUE for users who have ever denied camera permission since first time
     * of reading the property value
     * New users are by default denied camera permission.
     *
     * @deprecated
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_HAS_DENIED_CAMERA_PERM"] = 254] = "USER_HAS_DENIED_CAMERA_PERM";
    /**
     * CAMEOS_ENGAGEMENT_LEVEL - Cameos engagement level based on number of Cameos views in the last 7 days.
     * e.g. IDLE, CASUAL, REGULAR, POWER
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMEOS_ENGAGEMENT_LEVEL"] = 255] = "CAMEOS_ENGAGEMENT_LEVEL";
    /**
     * HAS_CAMEOS - Whether the user has Cameos.
     * e.g. TRUE, FALSE
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_CAMEOS"] = 256] = "HAS_CAMEOS";
    /**
     * IS_ACTIVE_LENS_VIDEO_CHAT_USER - Whether the user has interacted with lenses in video chat in the last 7 days.
     * e.g. TRUE, FALSE
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ACTIVE_LENS_VIDEO_CHAT_USER"] = 257] = "IS_ACTIVE_LENS_VIDEO_CHAT_USER";
    /**
     * NUM_SPOTLIGHT_POSTS_L7 - The number of Spotlight posts a user has made in the last 7 days.
     * e.g. 0, 100, 1000
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_SPOTLIGHT_POSTS_L7"] = 258] = "NUM_SPOTLIGHT_POSTS_L7";
    /**
     * NUM_MAP_POSTS_L7 - The number of Map posts a user has made in the last 7 days.
     * e.g. 0, 100, 1000
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_MAP_POSTS_L7"] = 259] = "NUM_MAP_POSTS_L7";
    /**
     * HAS_CREATED_PUBLIC_PROFILE - Whether a user has created a public profile.
     * e.g. TRUE, FALSE
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_CREATED_PUBLIC_PROFILE"] = 260] = "HAS_CREATED_PUBLIC_PROFILE";
    /**
     * HAS_PUBLIC_PROFILE_ACCESS_VIA_ROLE - Whether a user has access to a public profile via a role.
     * e.g. TRUE, FALSE
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_PUBLIC_PROFILE_ACCESS_VIA_ROLE"] = 261] = "HAS_PUBLIC_PROFILE_ACCESS_VIA_ROLE";
    /**
     * DAYS_SINCE_LAST_CAMERA_PERM_DENY - Integer value represents the number of days since last time the user denied camera permission.
     * Default value is -1 if user has no record of denying camera permission (the user has granted camera permission permanently).
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_CAMERA_PERM_DENY"] = 262] = "DAYS_SINCE_LAST_CAMERA_PERM_DENY";
    /** DAYS_SINCE_AD_ORG_JOIN - The days since the user last joined an ads manager organization */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_AD_ORG_JOIN"] = 263] = "DAYS_SINCE_AD_ORG_JOIN";
    /** DAYS_SINCE_FIRST_AD_CREATE - The days since the user created an ad within ads manager via their ad organization */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_AD_CREATE"] = 264] = "DAYS_SINCE_FIRST_AD_CREATE";
    /** ORGANIZATION_COUNTRY - Organization country */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORGANIZATION_COUNTRY"] = 265] = "ORGANIZATION_COUNTRY";
    /** DAYS_SINCE_FIRST_DWEB_VISIT - The days since the user first visited dWeb (Web Chat) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_DWEB_VISIT"] = 266] = "DAYS_SINCE_FIRST_DWEB_VISIT";
    /** DAYS_SINCE_LAST_DWEB_VISIT - The days since the user has last visited dWeb (Web Chat) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_DWEB_VISIT"] = 267] = "DAYS_SINCE_LAST_DWEB_VISIT";
    /** WEEKS_SINCE_USING_DWEB - The weeks group in which the user has been absent from dWeb (Web Chat) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEEKS_SINCE_USING_DWEB"] = 268] = "WEEKS_SINCE_USING_DWEB";
    /** HAS_LENS - Whether a capture session has lens */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_LENS"] = 269] = "HAS_LENS";
    /**
     * BILLBOARD_SERVER_IMPRESSION_COUNT - Billboard Cooldown and Cap Unit will support these properties
     * Basic Counter for impression / click / dismiss
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_IMPRESSION_COUNT"] = 270] = "BILLBOARD_SERVER_IMPRESSION_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_CLICK_COUNT"] = 271] = "BILLBOARD_SERVER_CLICK_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_DISMISS_COUNT"] = 272] = "BILLBOARD_SERVER_DISMISS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_INTERACTION_COUNT"] = 273] = "BILLBOARD_SERVER_INTERACTION_COUNT";
    /** BILLBOARD_SERVER_FIRST_IMPRESSION_TIME_SECS_TO_NOW - Time to now signals in Seconds */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_IMPRESSION_TIME_SECS_TO_NOW"] = 274] = "BILLBOARD_SERVER_FIRST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_IMPRESSION_TIME_SECS_TO_NOW"] = 275] = "BILLBOARD_SERVER_LAST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_CLICK_TIME_SECS_TO_NOW"] = 276] = "BILLBOARD_SERVER_FIRST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_CLICK_TIME_SECS_TO_NOW"] = 277] = "BILLBOARD_SERVER_LAST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_DISMISS_TIME_SECS_TO_NOW"] = 278] = "BILLBOARD_SERVER_FIRST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_DISMISS_TIME_SECS_TO_NOW"] = 279] = "BILLBOARD_SERVER_LAST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_INTERACTION_TIME_SECS_TO_NOW"] = 280] = "BILLBOARD_SERVER_FIRST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_INTERACTION_TIME_SECS_TO_NOW"] = 281] = "BILLBOARD_SERVER_LAST_INTERACTION_TIME_SECS_TO_NOW";
    /** BILLBOARD_SERVER_CONTINUOUS_DISMISS_COUNT - Continuous Counter */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_CONTINUOUS_DISMISS_COUNT"] = 282] = "BILLBOARD_SERVER_CONTINUOUS_DISMISS_COUNT";
    /** BILLBOARD_CAMPAIGN_LOCAL_FIRST_CLICK_TIME_SECS_TO_NOW - Billboard first click time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_CLICK_TIME_SECS_TO_NOW"] = 283] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_CLICK_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_LAST_CLICK_TIME_SECS_TO_NOW - Billboard last click time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_CLICK_TIME_SECS_TO_NOW"] = 284] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_CLICK_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_FIRST_DISMISS_TIME_SECS_TO_NOW - Billboard first dismiss time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_DISMISS_TIME_SECS_TO_NOW"] = 285] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_DISMISS_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_LAST_DISMISS_TIME_SECS_TO_NOW - Billboard last dismiss time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_DISMISS_TIME_SECS_TO_NOW"] = 286] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_DISMISS_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_FIRST_INTERACTION_TIME_SECS_TO_NOW - Billboard locally tracked first interaction time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_INTERACTION_TIME_SECS_TO_NOW"] = 287] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_Property || (ClientTargetingExpression_Property = {}));
/**
 * Which field of feature_provided_signals.hash_signals to hash
 * To be used by the HASH_MURMUR3_128_MOD_100 property only
 */
export var ClientTargetingExpression_PropertyMetadata_SignalToHash;
(function (ClientTargetingExpression_PropertyMetadata_SignalToHash) {
    /** UNKNOWN_SIGNAL_TO_HASH - Unset variant */
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["UNKNOWN_SIGNAL_TO_HASH"] = 0] = "UNKNOWN_SIGNAL_TO_HASH";
    /**
     * HASH_SEED_AND_USER_ID - Indicates that seed+user_id string should be hashed
     * (namespace is supplied by the server, user_id - by the client)
     */
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["HASH_SEED_AND_USER_ID"] = 1] = "HASH_SEED_AND_USER_ID";
    /**
     * HASH_USER_ID_AND_NAMESPACE - Indicates that used_id+namespace string should be hashed
     * (seed is supplied by the server, user_id - by the client)
     */
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["HASH_USER_ID_AND_NAMESPACE"] = 2] = "HASH_USER_ID_AND_NAMESPACE";
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_PropertyMetadata_SignalToHash || (ClientTargetingExpression_PropertyMetadata_SignalToHash = {}));
function createBaseConfigResult() {
    return {
        configId: "",
        value: undefined,
        targetingExpression: undefined,
        ttlSeconds: 0,
        configRuleUuidBytes: new Uint8Array(),
        priority: 0,
        namespace: 0,
        studyName: "",
        experimentId: 0,
        delete: false,
        servePlatforms: [],
        sequenceId: 0,
        ruidType: 0,
        segmentOrdinal: 0,
        generatedFromAbAllowlists: false,
    };
}
export const ConfigResult = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.configId !== "") {
            writer.uint32(10).string(message.configId);
        }
        if (message.value !== undefined) {
            Value.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        if (message.targetingExpression !== undefined) {
            ClientTargetingExpression.encode(message.targetingExpression, writer.uint32(26).fork()).ldelim();
        }
        if (message.ttlSeconds !== 0) {
            writer.uint32(32).int64(message.ttlSeconds);
        }
        if (message.configRuleUuidBytes.length !== 0) {
            writer.uint32(42).bytes(message.configRuleUuidBytes);
        }
        if (message.priority !== 0) {
            writer.uint32(48).int32(message.priority);
        }
        if (message.namespace !== 0) {
            writer.uint32(56).int32(message.namespace);
        }
        if (message.studyName !== "") {
            writer.uint32(66).string(message.studyName);
        }
        if (message.experimentId !== 0) {
            writer.uint32(72).int32(message.experimentId);
        }
        if (message.delete === true) {
            writer.uint32(80).bool(message.delete);
        }
        writer.uint32(90).fork();
        for (const v of message.servePlatforms) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.sequenceId !== 0) {
            writer.uint32(96).int32(message.sequenceId);
        }
        if (message.ruidType !== 0) {
            writer.uint32(104).int32(message.ruidType);
        }
        if (message.segmentOrdinal !== 0) {
            writer.uint32(112).int32(message.segmentOrdinal);
        }
        if (message.generatedFromAbAllowlists === true) {
            writer.uint32(120).bool(message.generatedFromAbAllowlists);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configId = reader.string();
                    break;
                case 2:
                    message.value = Value.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.targetingExpression = ClientTargetingExpression.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ttlSeconds = longToNumber(reader.int64());
                    break;
                case 5:
                    message.configRuleUuidBytes = reader.bytes();
                    break;
                case 6:
                    message.priority = reader.int32();
                    break;
                case 7:
                    message.namespace = reader.int32();
                    break;
                case 8:
                    message.studyName = reader.string();
                    break;
                case 9:
                    message.experimentId = reader.int32();
                    break;
                case 10:
                    message.delete = reader.bool();
                    break;
                case 11:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.servePlatforms.push(reader.int32());
                        }
                    }
                    else {
                        message.servePlatforms.push(reader.int32());
                    }
                    break;
                case 12:
                    message.sequenceId = reader.int32();
                    break;
                case 13:
                    message.ruidType = reader.int32();
                    break;
                case 14:
                    message.segmentOrdinal = reader.int32();
                    break;
                case 15:
                    message.generatedFromAbAllowlists = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseConfigResult();
        message.configId = (_a = object.configId) !== null && _a !== void 0 ? _a : "";
        message.value = object.value !== undefined && object.value !== null ? Value.fromPartial(object.value) : undefined;
        message.targetingExpression =
            object.targetingExpression !== undefined && object.targetingExpression !== null
                ? ClientTargetingExpression.fromPartial(object.targetingExpression)
                : undefined;
        message.ttlSeconds = (_b = object.ttlSeconds) !== null && _b !== void 0 ? _b : 0;
        message.configRuleUuidBytes = (_c = object.configRuleUuidBytes) !== null && _c !== void 0 ? _c : new Uint8Array();
        message.priority = (_d = object.priority) !== null && _d !== void 0 ? _d : 0;
        message.namespace = (_e = object.namespace) !== null && _e !== void 0 ? _e : 0;
        message.studyName = (_f = object.studyName) !== null && _f !== void 0 ? _f : "";
        message.experimentId = (_g = object.experimentId) !== null && _g !== void 0 ? _g : 0;
        message.delete = (_h = object.delete) !== null && _h !== void 0 ? _h : false;
        message.servePlatforms = ((_j = object.servePlatforms) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.sequenceId = (_k = object.sequenceId) !== null && _k !== void 0 ? _k : 0;
        message.ruidType = (_l = object.ruidType) !== null && _l !== void 0 ? _l : 0;
        message.segmentOrdinal = (_m = object.segmentOrdinal) !== null && _m !== void 0 ? _m : 0;
        message.generatedFromAbAllowlists = (_o = object.generatedFromAbAllowlists) !== null && _o !== void 0 ? _o : false;
        return message;
    },
};
function createBaseConfigResultBundle() {
    return { etag: "", configResults: [] };
}
export const ConfigResultBundle = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.etag !== "") {
            writer.uint32(10).string(message.etag);
        }
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigResultBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.etag = reader.string();
                    break;
                case 2:
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseConfigResultBundle();
        message.etag = (_a = object.etag) !== null && _a !== void 0 ? _a : "";
        message.configResults = ((_b = object.configResults) === null || _b === void 0 ? void 0 : _b.map((e) => ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function createBaseClientTargetingExpression() {
    return {
        operator: 0,
        children: [],
        property: 0,
        predicateOperator: 0,
        value: undefined,
        propertyMetadata: undefined,
    };
}
export const ClientTargetingExpression = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.operator !== 0) {
            writer.uint32(8).int32(message.operator);
        }
        for (const v of message.children) {
            ClientTargetingExpression.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.property !== 0) {
            writer.uint32(24).int32(message.property);
        }
        if (message.predicateOperator !== 0) {
            writer.uint32(32).int32(message.predicateOperator);
        }
        if (message.value !== undefined) {
            Value.encode(message.value, writer.uint32(42).fork()).ldelim();
        }
        if (message.propertyMetadata !== undefined) {
            ClientTargetingExpression_PropertyMetadata.encode(message.propertyMetadata, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientTargetingExpression();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.int32();
                    break;
                case 2:
                    message.children.push(ClientTargetingExpression.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.property = reader.int32();
                    break;
                case 4:
                    message.predicateOperator = reader.int32();
                    break;
                case 5:
                    message.value = Value.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.propertyMetadata = ClientTargetingExpression_PropertyMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseClientTargetingExpression();
        message.operator = (_a = object.operator) !== null && _a !== void 0 ? _a : 0;
        message.children = ((_b = object.children) === null || _b === void 0 ? void 0 : _b.map((e) => ClientTargetingExpression.fromPartial(e))) || [];
        message.property = (_c = object.property) !== null && _c !== void 0 ? _c : 0;
        message.predicateOperator = (_d = object.predicateOperator) !== null && _d !== void 0 ? _d : 0;
        message.value = object.value !== undefined && object.value !== null ? Value.fromPartial(object.value) : undefined;
        message.propertyMetadata =
            object.propertyMetadata !== undefined && object.propertyMetadata !== null
                ? ClientTargetingExpression_PropertyMetadata.fromPartial(object.propertyMetadata)
                : undefined;
        return message;
    },
};
function createBaseClientTargetingExpression_PropertyMetadata() {
    return { itemId: 0, signalToHash: 0, abNamespaceForHashing: "", abSeedForHashing: "" };
}
export const ClientTargetingExpression_PropertyMetadata = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.itemId !== 0) {
            writer.uint32(8).int32(message.itemId);
        }
        if (message.signalToHash !== 0) {
            writer.uint32(16).int32(message.signalToHash);
        }
        if (message.abNamespaceForHashing !== "") {
            writer.uint32(26).string(message.abNamespaceForHashing);
        }
        if (message.abSeedForHashing !== "") {
            writer.uint32(34).string(message.abSeedForHashing);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientTargetingExpression_PropertyMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.itemId = reader.int32();
                    break;
                case 2:
                    message.signalToHash = reader.int32();
                    break;
                case 3:
                    message.abNamespaceForHashing = reader.string();
                    break;
                case 4:
                    message.abSeedForHashing = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseClientTargetingExpression_PropertyMetadata();
        message.itemId = (_a = object.itemId) !== null && _a !== void 0 ? _a : 0;
        message.signalToHash = (_b = object.signalToHash) !== null && _b !== void 0 ? _b : 0;
        message.abNamespaceForHashing = (_c = object.abNamespaceForHashing) !== null && _c !== void 0 ? _c : "";
        message.abSeedForHashing = (_d = object.abSeedForHashing) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=config_result.js.map