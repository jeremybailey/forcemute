{"version":3,"file":"legalState.js","sourceRoot":"","sources":["../../src/legal/legalState.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    defineAction,\n    defineActions,\n    defineState,\n    defineStates,\n    dispatch,\n    forActions,\n    inStates,\n    StateMachine,\n} from \"@snap/state-management\";\nimport { catchError, from, map, merge, of, switchMap } from \"rxjs\";\nimport { Injectable } from \"../dependency-injection/Injectable\";\nimport {\n    LegalDocument,\n    LegalDocument_Type,\n    LegalPrompt as LegalPromptProto,\n} from \"../generated-proto/pb_schema/camera_kit/v3/legal_prompt\";\nimport { ConfigResult } from \"../generated-proto/pb_schema/cdp/cof/config_result\";\nimport { getLogger } from \"../logger/logger\";\nimport { ExpiringPersistence } from \"../persistence/ExpiringPersistence\";\nimport { IndexedDBPersistence } from \"../persistence/IndexedDBPersistence\";\nimport { RemoteConfiguration, remoteConfigurationFactory } from \"../remote-configuration/remoteConfiguration\";\nimport { LegalPrompt, legalPromptFactory } from \"./legalPrompt\";\n\nconst logger = getLogger(\"LegalState\");\n\ntype SupportedDocumentType =\n    | LegalDocument_Type.PRIVACY_POLICY\n    | LegalDocument_Type.TERMS_OF_SERVICE\n    | LegalDocument_Type.LEARN_MORE;\n\n/**\n * We store a hash of the last accepted ToS content. This is how we determine if the user previously accepted the\n * relevant ToS.\n *\n * ToS acceptance is only valid for 12 hours. That is, if legal status is checked and the last acceptance occurred more\n * than 12 hours ago, the user must be prompted to accept again.\n */\nconst tosContentHashExpiry = 12 * 60 * 60;\nconst tosContentHashKey = \"lastAcceptedTosContentHash\";\n\n/**\n * Fast, simple hashing function from github.com/bryc\n * https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js\n */\nconst computeHash = (str: string): string => {\n    let h1 = 0xdeadbeef;\n    let h2 = 0x41c6ce57;\n    for (let i = 0; i < str.length; i++) {\n        const ch = str.charCodeAt(i);\n        h1 = Math.imul(h1 ^ ch, 2654435761);\n        h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n    h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n    h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n    return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString(16);\n};\n\nconst createLegalState = () => {\n    const states = defineStates(defineState(\"unknown\")(), defineState(\"accepted\")(), defineState(\"rejected\")());\n\n    const actions = defineActions(\n        defineAction(\"requestLegalPrompt\")(),\n        defineAction(\"accept\")<string>(),\n        defineAction(\"reject\")<string>()\n    );\n\n    return new StateMachine(actions, states, states.unknown(), (actions) => {\n        return merge(\n            actions.pipe(\n                inStates(\"unknown\"),\n                forActions(\"accept\"),\n                map(() => states.accepted())\n            ),\n            actions.pipe(\n                inStates(\"unknown\"),\n                forActions(\"reject\"),\n                map(() => states.rejected())\n            ),\n            actions.pipe(\n                forActions(\"requestLegalPrompt\"),\n                map(() => states.unknown())\n            )\n        );\n    });\n};\n\nconst defaultLegalDocumentDate = new Date(\"2021-09-30T00:00:00+00:00\");\nconst defaultLegalPrompt = LegalPromptProto.fromPartial({\n    documents: [\n        LegalDocument.fromPartial({\n            type: LegalDocument_Type.PRIVACY_POLICY,\n            webUrl: \"https://values.snap.com/privacy/privacy-policy\",\n            version: \"1\",\n            timestamp: defaultLegalDocumentDate,\n        }),\n        LegalDocument.fromPartial({\n            type: LegalDocument_Type.TERMS_OF_SERVICE,\n            webUrl: \"https://snap.com/terms\",\n            version: \"1\",\n            timestamp: defaultLegalDocumentDate,\n        }),\n        LegalDocument.fromPartial({\n            type: LegalDocument_Type.LEARN_MORE,\n            webUrl: \"https://support.snapchat.com/article/camera-information-use\",\n            version: \"1\",\n            timestamp: defaultLegalDocumentDate,\n        }),\n    ],\n    disabled: false,\n});\n\nconst hasAnyValue = (c: ConfigResult): c is ConfigResult & { value: { anyValue: { value: Uint8Array } } } => {\n    return c.value?.anyValue?.value instanceof Uint8Array;\n};\n\nconst getDocumentOrDefault =\n    (documents: LegalDocument[]) =>\n    <T extends SupportedDocumentType>(type: T): LegalDocument & { type: T } => {\n        return (documents.find((d) => d.type === type) ??\n            defaultLegalPrompt.documents.find((d) => d.type === type)!) as LegalDocument & { type: T };\n    };\n\nexport type LegalState = ReturnType<typeof createLegalState>;\n\n/**\n * We maintain the state of the user's acceptance of Snap's various legal documents. Other components may require that\n * the legal state be \"accepted\" before proceeding (e.g. to apply a lens).\n *\n * On page load, the legal state starts as \"unknown.\" If a request is made to determine the legal state, the following\n * business logic is implemented:\n *\n * 1. Download remote COF config value containing the legal documents + a `disabled` field to optionally skip the legal\n * requirement.\n * 2. Check for a `lastAcceptedTosContentHash` stored in IndexedDB.\n * 3. Prompt the user to accept/reject the legal documents.\n *\n *                     ┌────────────────────────────────────────────────────────┐\n *                     │       COF config value includes \"disabled: true\"       │\n *                     └────────────────────────────────────────────────────────┘\n *                                                  │\n *                                                  │\n *                           ┌────────No────────────┴────────────Yes──────────────────┐\n *                           │                                                        │\n *                           ▼                                                        │\n *        ┌────────────────────────────────────┐                                      ▼\n *        │\"lastAcceptedTosContentHash\" exists │                               ┌────────────┐\n *        └────────────────────────────────────┘                               │  Skip ToS  │\n *                           │                                                 └────────────┘\n *                           │                                                        ▲\n *        ┌─────────────No───┴───────Yes────────────┐                                 │\n *        │                                         │                                 │\n *        │                                         │                                 │\n *        ▼                                         ▼                                 │\n * ┌────────────┐              ┌────────────────────────────────────────┐             │\n * │  Show ToS  │              │  Hash of ToS content from COF matches  │             │\n * └────────────┘              │      \"lastAcceptedTosContentHash\"      │             │\n *        ▲                    └────────────────────────────────────────┘             │\n *        │                                         │                                 │\n *        │                                         │                                 │\n *        └──────────────────No─────────────────────┴───────────────────Yes───────────┘\n *\n * @internal\n */\nexport const legalStateFactory = Injectable(\n    \"legalState\",\n    [remoteConfigurationFactory.token, legalPromptFactory.token] as const,\n    (remoteConfig: RemoteConfiguration, legalPrompt: LegalPrompt): LegalState => {\n        const persistance = new ExpiringPersistence<string>(\n            () => tosContentHashExpiry,\n            new IndexedDBPersistence({ databaseName: \"Legal\" })\n        );\n        const getLastAcceptedTosContentHash = () =>\n            from(persistance.retrieve(tosContentHashKey).catch((error) => logger.warn(error)));\n\n        const setLastAcceptedTosContentHash = (hash: string) =>\n            persistance.store(tosContentHashKey, hash).catch((error) => logger.warn(error));\n\n        const legalState = createLegalState();\n\n        legalState.events\n            .pipe(\n                inStates(\"unknown\", \"rejected\"),\n                forActions(\"requestLegalPrompt\"),\n                switchMap(() =>\n                    remoteConfig.get(\"CAMERA_KIT_LEGAL_PROMPT\").pipe(\n                        map((configResults) => {\n                            const config = configResults.find(hasAnyValue);\n                            if (!config) return defaultLegalPrompt;\n                            return LegalPromptProto.decode(config.value.anyValue.value);\n                        }),\n                        catchError((error) => {\n                            logger.error(error);\n                            return of(defaultLegalPrompt);\n                        })\n                    )\n                ),\n                switchMap((config) => {\n                    if (config.disabled) return of(legalState.actions.accept(\"disabled\"));\n\n                    const currentTosContentHash = computeHash(JSON.stringify(config.documents));\n\n                    return getLastAcceptedTosContentHash().pipe(\n                        switchMap((lastAcceptedTosContentHash) => {\n                            if (currentTosContentHash === lastAcceptedTosContentHash) return of(true);\n\n                            // Delegate prompting the end-user to accept/reject the legal documents. This returns with\n                            // an Observable<boolean> indicating accept/reject.\n                            const documentOfType = getDocumentOrDefault(config.documents);\n                            return legalPrompt(\n                                documentOfType(LegalDocument_Type.PRIVACY_POLICY),\n                                documentOfType(LegalDocument_Type.TERMS_OF_SERVICE),\n                                documentOfType(LegalDocument_Type.LEARN_MORE)\n                            );\n                        }),\n                        map((didAccept) => {\n                            if (!didAccept) return legalState.actions.reject(currentTosContentHash);\n                            setLastAcceptedTosContentHash(currentTosContentHash);\n                            return legalState.actions.accept(currentTosContentHash);\n                        })\n                    );\n                }),\n                dispatch(legalState)\n            )\n            .subscribe();\n\n        return legalState;\n    }\n);\n"]}