{"version":3,"file":"operationalMetricsReporter.js","sourceRoot":"","sources":["../../src/metrics/operationalMetricsReporter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"../dependency-injection/Injectable\";\nimport { FetchHandler } from \"../handlers/defaultFetchHandler\";\nimport { HandlerChainBuilder } from \"../handlers/HandlerChainBuilder\";\nimport { createBatchingHandler } from \"../handlers/batchingHandler\";\nimport {\n    OperationalMetric,\n    OperationalMetricsBundle,\n} from \"../generated-proto/pb_schema/camera_kit/v3/operational_metrics\";\nimport { SetOperationalMetricsRequest } from \"../generated-proto/pb_schema/camera_kit/v3/service\";\nimport { createMappingHandler } from \"../handlers/mappingHandler\";\nimport { metricsHandlerFactory } from \"./metricsHandler\";\n\ntype MetricsHandler = (metric: OperationalMetric) => Promise<void>;\n\n// CameraKit's prod metrics endpoint.\n// See: https://github.sc-corp.net/Snapchat/pb_schema/blob/c390b9c/proto/camera_kit/v3/service.proto#L126\nconst OPERATIONAL_METRICS_ENDPOINT =\n    \"https://api-kit.snapchat.com/com.snap.camerakit.v3.Metrics/metrics/operational_metrics\";\n\nconst DIMENSION_DELIMITER = \".\";\n\n// These values are (currently) arbitrarily selected.\n// TODO: Once we have gathered a sufficient quantity of metrics data, we should tune these numbers to ensure we're\n// operating with the right cost vs. alarming SLA vs. IDB storage size tradeoffs.\nconst METRIC_BATCH_MAX_SIZE = 100;\nconst METRIC_BATCH_MAX_AGE_MS = 5000;\n\n/**\n * Use this class to report operational metrics – these are metrics that describe aspects of the SDK's performance,\n * which may be used to assess and investigate operational issues.\n */\n/** @internal */\nexport class OperationalMetricsReporter {\n    constructor(private readonly metricsHandler: MetricsHandler) {}\n\n    /**\n     * Record a count.\n     *\n     * @param name\n     * @param count\n     * @param dimensions An optional Map containing dimensions which describe the metric.\n     * For example: `new Map([['status', '200']])`\n     * @returns Promise which resolves when the metric has been handled.\n     */\n    count(name: string, count: number, dimensions?: Map<string, string>): Promise<void> {\n        return this.record(name, { $case: \"count\", count }, dimensions);\n    }\n\n    /**\n     * Record a duration in milliseconds.\n     *\n     * @param name\n     * @param latencyMillis\n     * @param dimensions An optional Map containing dimensions which describe the metric.\n     * For example: `new Map([['status', '200']])`\n     * @returns Promise which resolves when the metric has been handled.\n     */\n    timer(name: string, latencyMillis: number, dimensions?: Map<string, string>): Promise<void> {\n        return this.record(name, { $case: \"latencyMillis\", latencyMillis }, dimensions);\n    }\n\n    /**\n     * Record a histogram.\n     *\n     * @param name\n     * @param histogram\n     * @param dimensions An optional Map containing dimensions which describe the metric.\n     * For example: `new Map([['status', '200']])`\n     * @returns Promise which resolves when the metric has been handled.\n     */\n    histogram(name: string, histogram: number, dimensions?: Map<string, string>): Promise<void> {\n        return this.record(name, { $case: \"histogram\", histogram }, dimensions);\n    }\n\n    private record(\n        name: string,\n        metric: Required<OperationalMetric>[\"metric\"],\n        dimensions?: Map<string, string | number>\n    ): Promise<void> {\n        // The naming convention (metricName.dimensionName.dimensionValue.dimensionName.dimensionValue...) is mentioned\n        // the Graphene docs here https://wiki.sc-corp.net/display/METRICS/Graphene\n        // TODO: find explicit documentation of the API, if it exists.\n        const serializedDimensions = dimensions\n            ? `.${Array.from(dimensions.entries())\n                  .map((d) => d.join(DIMENSION_DELIMITER))\n                  .join(DIMENSION_DELIMITER)}`\n            : \"\";\n\n        return this.metricsHandler({\n            name: `${name}${serializedDimensions}`,\n            timestamp: new Date(),\n            metric,\n        });\n    }\n}\n\n/**\n * @internal\n */\nexport const operationalMetricReporterFactory = Injectable(\n    \"operationalMetricsReporter\",\n    [metricsHandlerFactory.token] as const,\n    (metricsHandler: FetchHandler) => {\n        const handler = new HandlerChainBuilder(metricsHandler)\n            .map(\n                createMappingHandler((metrics: OperationalMetricsBundle) => {\n                    const request: SetOperationalMetricsRequest = { metrics };\n                    return new Request(OPERATIONAL_METRICS_ENDPOINT, {\n                        method: \"POST\",\n                        body: JSON.stringify(SetOperationalMetricsRequest.toJSON(request)),\n                        credentials: \"include\",\n\n                        // Setting this to true makes fetch behave like `Navigator.sendBeacon` – that is, the request\n                        // will still be made even if the page terminates.\n                        // https://developer.mozilla.org/en-US/docs/Web/API/fetch\n                        keepalive: true,\n                    });\n                })\n            )\n            .map(\n                createBatchingHandler({\n                    // The batching logic here is very simple – it could be improved by e.g. combining counts with\n                    // the same name, computing statistics to reduce overall data sent, etc. Right now this is\n                    // premature optimization, but could become a good idea in the future.\n                    batchReduce: (previousBundle: OperationalMetricsBundle | undefined, metric: OperationalMetric) => {\n                        const bundle = previousBundle ?? { metrics: [] };\n                        bundle.metrics.push(metric);\n                        return bundle;\n                    },\n                    isBatchComplete: (bundle) => bundle.metrics.length >= METRIC_BATCH_MAX_SIZE,\n                    maxBatchAge: METRIC_BATCH_MAX_AGE_MS,\n                })\n            ).handler;\n\n        return new OperationalMetricsReporter(handler);\n    }\n);\n"]}