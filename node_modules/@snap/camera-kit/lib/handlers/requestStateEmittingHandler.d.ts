import { TypedCustomEvent } from "../events/TypedCustomEvent";
import { TypedEventTarget } from "../events/TypedEventTarget";
import { ChainableHandler, RequestMetadata } from "./HandlerChainBuilder";
interface Started {
    requestId: number;
    timeMs: number;
    dimensions: Dimensions;
}
interface Completed {
    requestId: number;
    timeMs: number;
    dimensions: Dimensions;
    status: number;
    sizeByte: number;
}
interface Errored {
    requestId: number;
    timeMs: number;
    dimensions: Dimensions;
    error: Error;
}
export type Dimensions = Record<string, string | undefined>;
export type RequestStateEvents = TypedCustomEvent<"started", Started> | TypedCustomEvent<"completed", Completed> | TypedCustomEvent<"errored", Errored>;
export declare const requestStateEventTarget: TypedEventTarget<RequestStateEvents>;
export declare const dispatchRequestStarted: (data: Omit<Started, "requestId" | "timeMs">) => Started;
export declare const dispatchRequestCompleted: (data: Omit<Completed, "timeMs">) => Completed;
export declare const dispatchRequestErrored: (data: Omit<Errored, "timeMs">) => Errored;
export declare const createRequestStateEmittingHandler: <D extends Dimensions = Dimensions>() => ChainableHandler<[RequestInfo, D], Response, RequestInfo, Response, RequestMetadata>;
export {};
