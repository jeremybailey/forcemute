{"version":3,"file":"remoteConfiguration.js","sourceRoot":"","sources":["../../src/remote-configuration/remoteConfiguration.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAc,WAAW,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC1E,OAAO,EAA0B,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAC9E,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAGhE,OAAO,EAAE,SAAS,EAAE,MAAM,gDAAgD,CAAC;AAC3E,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AAEjD,MAAM,uBAAuB,GAAoC;IAC7D,UAAU,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,eAAe,CAAC;CAC/D,CAAC;AAEF,MAAM,OAAO,mBAAmB;IAG5B,YAAY,QAAgB,EAAE,eAA0D;QACpF,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,EAAE;YAC1E,sFAAsF;YACtF,OAAO,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,MAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,CAAC;QACjF,CAAC,CAAC,CAAC;QAEH,MAAM,UAAU,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAE/C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI;QACpC,2GAA2G;QAC3G,2GAA2G;QAC3G,yGAAyG;QACzG,oCAAoC;QACpC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,EAAE,CAC1B,IAAI,CACA,UAAU,iCACH,uBAAuB,KAC1B,gBAAgB,IAClB,CACL,CACJ,EACD,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACX,MAAM,UAAU,GAAG,IAAI,GAAG,EAA0B,CAAC;YACrD,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;;gBACpC,MAAM,aAAa,GAAG,MAAA,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,mCAAI,EAAE,CAAC;gBAC5D,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC3B,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;YACH,OAAO,UAAU,CAAC;QACtB,CAAC,CAAC,EACF,WAAW,CAAC,CAAC,CAAC,CACjB,CAAC;IACN,CAAC;IAED,GAAG,CAAC,QAAgB;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,WAAC,OAAA,MAAA,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,mCAAI,EAAE,CAAA,EAAA,CAAC,CAAC,CAAC;IAC7E,CAAC;CACJ;AAED,MAAM,CAAC,MAAM,0BAA0B,GAAG,UAAU,CAChD,qBAAqB,EACrB,CAAC,kBAAkB,CAAU,EAC7B,CAAC,MAA8B,EAAuB,EAAE;IACpD,MAAM,YAAY,GAAG,IAAI,mBAAmB,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC;IAEtF,+GAA+G;IAC/G,sGAAsG;IACtG,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IAE/C,OAAO,YAAY,CAAC;AACxB,CAAC,CACJ,CAAC","sourcesContent":["import { from, map, mergeMap, Observable, shareReplay, take } from \"rxjs\";\nimport { CameraKitConfiguration, configurationToken } from \"../configuration\";\nimport { Injectable } from \"../dependency-injection/Injectable\";\nimport { ConfigTargetingRequest } from \"../generated-proto/pb_schema/cdp/cof/config_request\";\nimport { ConfigResult } from \"../generated-proto/pb_schema/cdp/cof/config_result\";\nimport { Namespace } from \"../generated-proto/pb_schema/cdp/cof/namespace\";\nimport { cofHandlerFactory } from \"./cofHandler\";\n\nconst defaultTargetingRequest: Partial<ConfigTargetingRequest> = {\n    namespaces: [Namespace.LENS_CORE, Namespace.CAMERA_KIT_CORE],\n};\n\nexport class RemoteConfiguration {\n    private readonly configById: Observable<Map<string, ConfigResult[]>>;\n\n    constructor(apiToken: string, lensPerformance: CameraKitConfiguration[\"lensPerformance\"]) {\n        const lensCluster = Promise.resolve(lensPerformance).then((lensPerformance) => {\n            // `0` means no cluster could be determined. For COF, we'll omit a value in that case.\n            return lensPerformance?.cluster === 0 ? undefined : lensPerformance?.cluster;\n        });\n\n        const cofHandler = cofHandlerFactory(apiToken);\n\n        this.configById = from(lensCluster).pipe(\n            // Note: we don't catch errors here, purposefully letting them propagate to subscribers outside this class.\n            // Subscribers, having more context about the config use-case, will know better how to handle an error than\n            // we do here (e.g. their logging / reporting will have more context, and they can use the error they get\n            // from this Observable as a cause).\n            mergeMap((lensClusterOrig4) =>\n                from(\n                    cofHandler({\n                        ...defaultTargetingRequest,\n                        lensClusterOrig4,\n                    })\n                )\n            ),\n            map((result) => {\n                const configById = new Map<string, ConfigResult[]>();\n                result.configResults.forEach((config) => {\n                    const configsWithId = configById.get(config.configId) ?? [];\n                    configsWithId.push(config);\n                    configById.set(config.configId, configsWithId);\n                });\n                return configById;\n            }),\n            shareReplay(1)\n        );\n    }\n\n    get(configId: string): Observable<ConfigResult[]> {\n        return this.configById.pipe(map((config) => config.get(configId) ?? []));\n    }\n}\n\nexport const remoteConfigurationFactory = Injectable(\n    \"remoteConfiguration\",\n    [configurationToken] as const,\n    (config: CameraKitConfiguration): RemoteConfiguration => {\n        const remoteConfig = new RemoteConfiguration(config.apiToken, config.lensPerformance);\n\n        // We'll kick off remote configuration loading by subscribing (and then unsubscribing) to a dummy config value.\n        // Subsequent requests for config will use the shared Observable, benefitting from this eager loading.\n        remoteConfig.get(\"\").pipe(take(1)).subscribe();\n\n        return remoteConfig;\n    }\n);\n"]}