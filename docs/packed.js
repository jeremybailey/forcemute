/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 37:
/***/ (function(module) {

!function(e,t){if(true)module.exports=t();else { var n, r; }}(this,(function(){return e={418:function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.i=function(e){return e},r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),o=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={splitValues:!1});var r,o=this;this.headersMap={},e&&("undefined"!=typeof Headers&&e instanceof Headers?n.getHeaderKeys(e).forEach((function(r){n.getHeaderValues(e,r).forEach((function(e){t.splitValues?o.append(r,n.splitHeaderValue(e)):o.append(r,e)}))})):"object"==typeof(r=e)&&"object"==typeof r.headersMap&&"function"==typeof r.forEach?e.forEach((function(e,t){o.append(e,t)})):"undefined"!=typeof Map&&e instanceof Map?e.forEach((function(e,t){o.append(t,e)})):"string"==typeof e?this.appendFromString(e):"object"==typeof e&&Object.getOwnPropertyNames(e).forEach((function(t){var r=e[t];Array.isArray(r)?r.forEach((function(e){o.append(t,e)})):o.append(t,r)})))}return e.prototype.appendFromString=function(e){for(var t=e.split("\r\n"),r=0;r<t.length;r++){var n=t[r],o=n.indexOf(":");if(o>0){var s=n.substring(0,o).trim(),i=n.substring(o+1).trim();this.append(s,i)}}},e.prototype.delete=function(e,t){var r=n.normalizeName(e);if(void 0===t)delete this.headersMap[r];else{var o=this.headersMap[r];if(o){var s=o.indexOf(t);s>=0&&o.splice(s,1),0===o.length&&delete this.headersMap[r]}}},e.prototype.append=function(e,t){var r=this,o=n.normalizeName(e);Array.isArray(this.headersMap[o])||(this.headersMap[o]=[]),Array.isArray(t)?t.forEach((function(e){r.headersMap[o].push(n.normalizeValue(e))})):this.headersMap[o].push(n.normalizeValue(t))},e.prototype.set=function(e,t){var r=n.normalizeName(e);if(Array.isArray(t)){var o=[];t.forEach((function(e){o.push(n.normalizeValue(e))})),this.headersMap[r]=o}else this.headersMap[r]=[n.normalizeValue(t)]},e.prototype.has=function(e,t){var r=this.headersMap[n.normalizeName(e)];if(!Array.isArray(r))return!1;if(void 0!==t){var o=n.normalizeValue(t);return r.indexOf(o)>=0}return!0},e.prototype.get=function(e){var t=this.headersMap[n.normalizeName(e)];return void 0!==t?t.concat():[]},e.prototype.forEach=function(e){var t=this;Object.getOwnPropertyNames(this.headersMap).forEach((function(r){e(r,t.headersMap[r])}),this)},e.prototype.toHeaders=function(){if("undefined"!=typeof Headers){var e=new Headers;return this.forEach((function(t,r){r.forEach((function(r){e.append(t,r)}))})),e}throw new Error("Headers class is not defined")},e}();t.BrowserHeaders=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(0);t.BrowserHeaders=n.BrowserHeaders},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.iterateHeaders=function(e,t){for(var r=e[Symbol.iterator](),n=r.next();!n.done;)t(n.value[0]),n=r.next()},t.iterateHeadersKeys=function(e,t){for(var r=e.keys(),n=r.next();!n.done;)t(n.value),n=r.next()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(2);t.normalizeName=function(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()},t.normalizeValue=function(e){return"string"!=typeof e&&(e=String(e)),e},t.getHeaderValues=function(e,t){var r=e;if(r instanceof Headers&&r.getAll)return r.getAll(t);var n=r.get(t);return n&&"string"==typeof n?[n]:n},t.getHeaderKeys=function(e){var t=e,r={},o=[];return t.keys?n.iterateHeadersKeys(t,(function(e){r[e]||(r[e]=!0,o.push(e))})):t.forEach?t.forEach((function(e,t){r[t]||(r[t]=!0,o.push(t))})):n.iterateHeaders(t,(function(e){var t=e[0];r[t]||(r[t]=!0,o.push(t))})),o},t.splitHeaderValue=function(e){var t=[];return e.split(", ").forEach((function(e){e.split(",").forEach((function(e){t.push(e)}))})),t}}]))},617:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChunkParser=t.ChunkType=t.encodeASCII=t.decodeASCII=void 0;var n,o=r(65);function s(e){return 9===(t=e)||10===t||13===t||e>=32&&e<=126;var t}function i(e){for(var t=0;t!==e.length;++t)if(!s(e[t]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(e))}function a(e){return 128==(128&e.getUint8(0))}function u(e){return e.getUint32(1,!1)}function d(e,t,r){return e.byteLength-t>=r}function c(e,t,r){if(e.slice)return e.slice(t,r);var n=e.length;void 0!==r&&(n=r);for(var o=new Uint8Array(n-t),s=0,i=t;i<n;i++)o[s++]=e[i];return o}t.decodeASCII=i,t.encodeASCII=function(e){for(var t=new Uint8Array(e.length),r=0;r!==e.length;++r){var n=e.charCodeAt(r);if(!s(n))throw new Error("Metadata contains invalid ASCII");t[r]=n}return t},function(e){e[e.MESSAGE=1]="MESSAGE",e[e.TRAILERS=2]="TRAILERS"}(n=t.ChunkType||(t.ChunkType={}));var p=function(){function e(){this.buffer=null,this.position=0}return e.prototype.parse=function(e,t){if(0===e.length&&t)return[];var r,s=[];if(null==this.buffer)this.buffer=e,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=e,this.position=0;else{var p=this.buffer.byteLength-this.position,h=new Uint8Array(p+e.byteLength),f=c(this.buffer,this.position);h.set(f,0);var l=new Uint8Array(e);h.set(l,p),this.buffer=h,this.position=0}for(;;){if(!d(this.buffer,this.position,5))return s;var g=c(this.buffer,this.position,this.position+5),b=new DataView(g.buffer,g.byteOffset,g.byteLength),y=u(b);if(!d(this.buffer,this.position,5+y))return s;var v=c(this.buffer,this.position+5,this.position+5+y);if(this.position+=5+y,a(b))return s.push({chunkType:n.TRAILERS,trailers:(r=v,new o.Metadata(i(r)))}),s;s.push({chunkType:n.MESSAGE,data:v})}},e}();t.ChunkParser=p},8:function(e,t){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.httpStatusToCode=t.Code=void 0,function(e){e[e.OK=0]="OK",e[e.Canceled=1]="Canceled",e[e.Unknown=2]="Unknown",e[e.InvalidArgument=3]="InvalidArgument",e[e.DeadlineExceeded=4]="DeadlineExceeded",e[e.NotFound=5]="NotFound",e[e.AlreadyExists=6]="AlreadyExists",e[e.PermissionDenied=7]="PermissionDenied",e[e.ResourceExhausted=8]="ResourceExhausted",e[e.FailedPrecondition=9]="FailedPrecondition",e[e.Aborted=10]="Aborted",e[e.OutOfRange=11]="OutOfRange",e[e.Unimplemented=12]="Unimplemented",e[e.Internal=13]="Internal",e[e.Unavailable=14]="Unavailable",e[e.DataLoss=15]="DataLoss",e[e.Unauthenticated=16]="Unauthenticated"}(r=t.Code||(t.Code={})),t.httpStatusToCode=function(e){switch(e){case 0:return r.Internal;case 200:return r.OK;case 400:return r.InvalidArgument;case 401:return r.Unauthenticated;case 403:return r.PermissionDenied;case 404:return r.NotFound;case 409:return r.Aborted;case 412:return r.FailedPrecondition;case 429:return r.ResourceExhausted;case 499:return r.Canceled;case 500:return r.Unknown;case 501:return r.Unimplemented;case 503:return r.Unavailable;case 504:return r.DeadlineExceeded;default:return r.Unknown}}},934:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.client=void 0;var n=r(65),o=r(617),s=r(8),i=r(346),a=r(57),u=r(882);t.client=function(e,t){return new d(e,t)};var d=function(){function e(e,t){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new o.ChunkParser,this.methodDefinition=e,this.props=t,this.createTransport()}return e.prototype.createTransport=function(){var e=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,t={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:e,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(t):this.transport=a.makeDefaultTransport(t)},e.prototype.onTransportHeaders=function(e,t){if(this.props.debug&&i.debug("onHeaders",e,t),this.closed)this.props.debug&&i.debug("grpc.onHeaders received after request was closed - ignoring");else if(0===t);else{this.responseHeaders=e,this.props.debug&&i.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var r=c(e);this.props.debug&&i.debug("onHeaders.gRPCStatus",r);var n=r&&r>=0?r:s.httpStatusToCode(t);this.props.debug&&i.debug("onHeaders.code",n);var o=e.get("grpc-message")||[];if(this.props.debug&&i.debug("onHeaders.gRPCMessage",o),this.rawOnHeaders(e),n!==s.Code.OK){var a=this.decodeGRPCStatus(o[0]);this.rawOnError(n,a,e)}}},e.prototype.onTransportChunk=function(e){var t=this;if(this.closed)this.props.debug&&i.debug("grpc.onChunk received after request was closed - ignoring");else{var r=[];try{r=this.parser.parse(e)}catch(e){return this.props.debug&&i.debug("onChunk.parsing error",e,e.message),void this.rawOnError(s.Code.Internal,"parsing error: "+e.message)}r.forEach((function(e){if(e.chunkType===o.ChunkType.MESSAGE){var r=t.methodDefinition.responseType.deserializeBinary(e.data);t.rawOnMessage(r)}else e.chunkType===o.ChunkType.TRAILERS&&(t.responseHeaders?(t.responseTrailers=new n.Metadata(e.trailers),t.props.debug&&i.debug("onChunk.trailers",t.responseTrailers)):(t.responseHeaders=new n.Metadata(e.trailers),t.rawOnHeaders(t.responseHeaders)))}))}},e.prototype.onTransportEnd=function(){if(this.props.debug&&i.debug("grpc.onEnd"),this.closed)this.props.debug&&i.debug("grpc.onEnd received after request was closed - ignoring");else if(void 0!==this.responseTrailers){var e=c(this.responseTrailers);if(null!==e){var t=this.responseTrailers.get("grpc-message"),r=this.decodeGRPCStatus(t[0]);this.rawOnEnd(e,r,this.responseTrailers)}else this.rawOnError(s.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(void 0===this.responseHeaders)return void this.rawOnError(s.Code.Unknown,"Response closed without headers");var n=c(this.responseHeaders),o=this.responseHeaders.get("grpc-message");if(this.props.debug&&i.debug("grpc.headers only response ",n,o),null===n)return void this.rawOnEnd(s.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var a=this.decodeGRPCStatus(o[0]);this.rawOnEnd(n,a,this.responseHeaders)}},e.prototype.decodeGRPCStatus=function(e){if(!e)return"";try{return decodeURIComponent(e)}catch(t){return e}},e.prototype.rawOnEnd=function(e,t,r){var n=this;this.props.debug&&i.debug("rawOnEnd",e,t,r),this.completed||(this.completed=!0,this.onEndCallbacks.forEach((function(o){if(!n.closed)try{o(e,t,r)}catch(e){setTimeout((function(){throw e}),0)}})))},e.prototype.rawOnHeaders=function(e){this.props.debug&&i.debug("rawOnHeaders",e),this.completed||this.onHeadersCallbacks.forEach((function(t){try{t(e)}catch(e){setTimeout((function(){throw e}),0)}}))},e.prototype.rawOnError=function(e,t,r){var o=this;void 0===r&&(r=new n.Metadata),this.props.debug&&i.debug("rawOnError",e,t),this.completed||(this.completed=!0,this.onEndCallbacks.forEach((function(n){if(!o.closed)try{n(e,t,r)}catch(e){setTimeout((function(){throw e}),0)}})))},e.prototype.rawOnMessage=function(e){var t=this;this.props.debug&&i.debug("rawOnMessage",e.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach((function(r){if(!t.closed)try{r(e)}catch(e){setTimeout((function(){throw e}),0)}}))},e.prototype.onHeaders=function(e){this.onHeadersCallbacks.push(e)},e.prototype.onMessage=function(e){this.onMessageCallbacks.push(e)},e.prototype.onEnd=function(e){this.onEndCallbacks.push(e)},e.prototype.start=function(e){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var t=new n.Metadata(e||{});t.set("content-type","application/grpc-web+proto"),t.set("x-grpc-web","1"),this.transport.start(t)},e.prototype.send=function(e){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var t=u.frameRequest(e);this.transport.sendMessage(t)},e.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},e.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&i.debug("request.abort aborting request"),this.transport.cancel()},e}();function c(e){var t=e.get("grpc-status")||[];if(t.length>0)try{var r=t[0];return parseInt(r,10)}catch(e){return null}return null}},346:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.debug=void 0,t.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.debug?console.debug.apply(null,e):console.log.apply(null,e)}},607:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.grpc=void 0;var n,o=r(418),s=r(57),i=r(229),a=r(540),u=r(210),d=r(859),c=r(8),p=r(938),h=r(35),f=r(934);(n=t.grpc||(t.grpc={})).setDefaultTransport=s.setDefaultTransportFactory,n.CrossBrowserHttpTransport=d.CrossBrowserHttpTransport,n.FetchReadableStreamTransport=i.FetchReadableStreamTransport,n.XhrTransport=u.XhrTransport,n.WebsocketTransport=a.WebsocketTransport,n.Code=c.Code,n.Metadata=o.BrowserHeaders,n.client=function(e,t){return f.client(e,t)},n.invoke=p.invoke,n.unary=h.unary},938:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.invoke=void 0;var n=r(934);t.invoke=function(e,t){if(e.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var r=n.client(e,{host:t.host,transport:t.transport,debug:t.debug});return t.onHeaders&&r.onHeaders(t.onHeaders),t.onMessage&&r.onMessage(t.onMessage),t.onEnd&&r.onEnd(t.onEnd),r.start(t.metadata),r.send(t.request),r.finishSend(),{close:function(){r.close()}}}},65:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Metadata=void 0;var n=r(418);Object.defineProperty(t,"Metadata",{enumerable:!0,get:function(){return n.BrowserHeaders}})},57:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.makeDefaultTransport=t.setDefaultTransportFactory=void 0;var n=r(859),o=function(e){return n.CrossBrowserHttpTransport({withCredentials:!1})(e)};t.setDefaultTransportFactory=function(e){o=e},t.makeDefaultTransport=function(e){return o(e)}},229:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.detectFetchSupport=t.FetchReadableStreamTransport=void 0;var o=r(65),s=r(346);t.FetchReadableStreamTransport=function(e){return function(t){return function(e,t){return e.debug&&s.debug("fetchRequest",e),new i(e,t)}(t,e)}};var i=function(){function e(e,t){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=e,this.init=t}return e.prototype.pump=function(e,t){var r=this;if(this.reader=e,this.cancelled)return this.options.debug&&s.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch((function(e){r.options.debug&&s.debug("Fetch.pump.reader.cancel exception",e)}));this.reader.read().then((function(e){if(e.done)return r.options.onEnd(),t;r.options.onChunk(e.value),r.pump(r.reader,t)})).catch((function(e){r.cancelled?r.options.debug&&s.debug("Fetch.catch - request cancelled"):(r.cancelled=!0,r.options.debug&&s.debug("Fetch.catch",e.message),r.options.onEnd(e))}))},e.prototype.send=function(e){var t=this;fetch(this.options.url,n(n({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:e,signal:this.controller&&this.controller.signal})).then((function(e){if(t.options.debug&&s.debug("Fetch.response",e),t.options.onHeaders(new o.Metadata(e.headers),e.status),!e.body)return e;t.pump(e.body.getReader(),e)})).catch((function(e){t.cancelled?t.options.debug&&s.debug("Fetch.catch - request cancelled"):(t.cancelled=!0,t.options.debug&&s.debug("Fetch.catch",e.message),t.options.onEnd(e))}))},e.prototype.sendMessage=function(e){this.send(e)},e.prototype.finishSend=function(){},e.prototype.start=function(e){this.metadata=e},e.prototype.cancel=function(){var e=this;this.cancelled?this.options.debug&&s.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&s.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&s.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&s.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch((function(t){e.options.debug&&s.debug("Fetch.cancel.reader.cancel exception",t)}))):this.options.debug&&s.debug("Fetch.cancel before reader"))},e}();t.detectFetchSupport=function(){return"undefined"!=typeof Response&&Response.prototype.hasOwnProperty("body")&&"function"==typeof Headers}},859:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CrossBrowserHttpTransport=void 0;var n=r(229),o=r(210);t.CrossBrowserHttpTransport=function(e){if(n.detectFetchSupport()){var t={credentials:e.withCredentials?"include":"same-origin"};return n.FetchReadableStreamTransport(t)}return o.XhrTransport({withCredentials:e.withCredentials})}},210:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.stringToArrayBuffer=t.MozChunkedArrayBufferXHR=t.XHR=t.XhrTransport=void 0;var s=r(65),i=r(346),a=r(849);t.XhrTransport=function(e){return function(t){if(a.detectMozXHRSupport())return new d(t,e);if(a.detectXHROverrideMimeTypeSupport())return new u(t,e);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var u=function(){function e(e,t){this.options=e,this.init=t}return e.prototype.onProgressEvent=function(){this.options.debug&&i.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var e=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var t=p(e);this.options.onChunk(t)},e.prototype.onLoadEvent=function(){this.options.debug&&i.debug("XHR.onLoadEvent"),this.options.onEnd()},e.prototype.onStateChange=function(){this.options.debug&&i.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new s.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},e.prototype.sendMessage=function(e){this.xhr.send(e)},e.prototype.finishSend=function(){},e.prototype.start=function(e){var t=this;this.metadata=e;var r=new XMLHttpRequest;this.xhr=r,r.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach((function(e,t){r.setRequestHeader(e,t.join(", "))})),r.withCredentials=Boolean(this.init.withCredentials),r.addEventListener("readystatechange",this.onStateChange.bind(this)),r.addEventListener("progress",this.onProgressEvent.bind(this)),r.addEventListener("loadend",this.onLoadEvent.bind(this)),r.addEventListener("error",(function(e){t.options.debug&&i.debug("XHR.error",e),t.options.onEnd(e.error)}))},e.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},e.prototype.cancel=function(){this.options.debug&&i.debug("XHR.abort"),this.xhr.abort()},e}();t.XHR=u;var d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.configureXhr=function(){this.options.debug&&i.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},t.prototype.onProgressEvent=function(){var e=this.xhr.response;this.options.debug&&i.debug("MozXHR.onProgressEvent: ",new Uint8Array(e)),this.options.onChunk(new Uint8Array(e))},t}(u);function c(e,t){var r=e.charCodeAt(t);if(r>=55296&&r<=56319){var n=e.charCodeAt(t+1);n>=56320&&n<=57343&&(r=65536+(r-55296<<10)+(n-56320))}return r}function p(e){for(var t=new Uint8Array(e.length),r=0,n=0;n<e.length;n++){var o=String.prototype.codePointAt?e.codePointAt(n):c(e,n);t[r++]=255&o}return t}t.MozChunkedArrayBufferXHR=d,t.stringToArrayBuffer=p},849:function(e,t){"use strict";var r;function n(){if(void 0!==r)return r;if(XMLHttpRequest){r=new XMLHttpRequest;try{r.open("GET","https://localhost")}catch(e){}}return r}function o(e){var t=n();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}Object.defineProperty(t,"__esModule",{value:!0}),t.detectXHROverrideMimeTypeSupport=t.detectMozXHRSupport=t.xhrSupportsResponseType=void 0,t.xhrSupportsResponseType=o,t.detectMozXHRSupport=function(){return"undefined"!=typeof XMLHttpRequest&&o("moz-chunked-arraybuffer")},t.detectXHROverrideMimeTypeSupport=function(){return"undefined"!=typeof XMLHttpRequest&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebsocketTransport=void 0;var n,o=r(346),s=r(617);!function(e){e[e.FINISH_SEND=1]="FINISH_SEND"}(n||(n={}));var i=new Uint8Array([1]);t.WebsocketTransport=function(){return function(e){return function(e){e.debug&&o.debug("websocketRequest",e);var t,r=function(e){if("https://"===e.substr(0,8))return"wss://"+e.substr(8);if("http://"===e.substr(0,7))return"ws://"+e.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(e.url),a=[];function u(e){if(e===n.FINISH_SEND)t.send(i);else{var r=e,o=new Int8Array(r.byteLength+1);o.set(new Uint8Array([0])),o.set(r,1),t.send(o)}}return{sendMessage:function(e){t&&t.readyState!==t.CONNECTING?u(e):a.push(e)},finishSend:function(){t&&t.readyState!==t.CONNECTING?u(n.FINISH_SEND):a.push(n.FINISH_SEND)},start:function(n){(t=new WebSocket(r,["grpc-websockets"])).binaryType="arraybuffer",t.onopen=function(){var r;e.debug&&o.debug("websocketRequest.onopen"),t.send((r="",n.forEach((function(e,t){r+=e+": "+t.join(", ")+"\r\n"})),s.encodeASCII(r))),a.forEach((function(e){u(e)}))},t.onclose=function(t){e.debug&&o.debug("websocketRequest.onclose",t),e.onEnd()},t.onerror=function(t){e.debug&&o.debug("websocketRequest.onerror",t)},t.onmessage=function(t){e.onChunk(new Uint8Array(t.data))}},cancel:function(){e.debug&&o.debug("websocket.abort"),t.close()}}}(e)}}},35:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unary=void 0;var n=r(65),o=r(934);t.unary=function(e,t){if(e.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(e.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var r=null,s=null,i=o.client(e,{host:t.host,transport:t.transport,debug:t.debug});return i.onHeaders((function(e){r=e})),i.onMessage((function(e){s=e})),i.onEnd((function(e,o,i){t.onEnd({status:e,statusMessage:o,headers:r||new n.Metadata,message:s,trailers:i})})),i.start(t.metadata),i.send(t.request),i.finishSend(),{close:function(){i.close()}}}},882:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.frameRequest=void 0,t.frameRequest=function(e){var t=e.serializeBinary(),r=new ArrayBuffer(t.byteLength+5);return new DataView(r,1,4).setUint32(0,t.length,!1),new Uint8Array(r,5).set(t),new Uint8Array(r)}}},t={},function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(607);var e,t}));

/***/ }),

/***/ 537:
/***/ ((module) => {

"use strict";

module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}


/***/ }),

/***/ 419:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};


/***/ }),

/***/ 211:
/***/ ((module) => {

"use strict";

module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};


/***/ }),

/***/ 945:
/***/ ((module) => {

"use strict";


module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}


/***/ }),

/***/ 199:
/***/ ((module) => {

"use strict";

module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}


/***/ }),

/***/ 662:
/***/ ((module) => {

"use strict";

module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}


/***/ }),

/***/ 997:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};


/***/ }),

/***/ 84:
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else { var i, a; }
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __nested_webpack_require_536__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_536__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_536__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_536__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__nested_webpack_require_536__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__nested_webpack_require_536__.d = function(exports, name, getter) {
/******/ 		if(!__nested_webpack_require_536__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__nested_webpack_require_536__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__nested_webpack_require_536__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__nested_webpack_require_536__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_536__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_536__(__nested_webpack_require_536__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __nested_webpack_require_2975__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __nested_webpack_require_2975__(3);
function isBrowserHeaders(arg) {
    return typeof arg === "object" && typeof arg.headersMap === "object" && typeof arg.forEach === "function";
}
var BrowserHeaders = (function () {
    function BrowserHeaders(init, options) {
        if (init === void 0) { init = {}; }
        if (options === void 0) { options = { splitValues: false }; }
        var _this = this;
        this.headersMap = {};
        if (init) {
            if (typeof Headers !== "undefined" && init instanceof Headers) {
                var keys = util_1.getHeaderKeys(init);
                keys.forEach(function (key) {
                    var values = util_1.getHeaderValues(init, key);
                    values.forEach(function (value) {
                        if (options.splitValues) {
                            _this.append(key, util_1.splitHeaderValue(value));
                        }
                        else {
                            _this.append(key, value);
                        }
                    });
                });
            }
            else if (isBrowserHeaders(init)) {
                init.forEach(function (key, values) {
                    _this.append(key, values);
                });
            }
            else if (typeof Map !== "undefined" && init instanceof Map) {
                var asMap = init;
                asMap.forEach(function (value, key) {
                    _this.append(key, value);
                });
            }
            else if (typeof init === "string") {
                this.appendFromString(init);
            }
            else if (typeof init === "object") {
                Object.getOwnPropertyNames(init).forEach(function (key) {
                    var asObject = init;
                    var values = asObject[key];
                    if (Array.isArray(values)) {
                        values.forEach(function (value) {
                            _this.append(key, value);
                        });
                    }
                    else {
                        _this.append(key, values);
                    }
                });
            }
        }
    }
    BrowserHeaders.prototype.appendFromString = function (str) {
        var pairs = str.split("\r\n");
        for (var i = 0; i < pairs.length; i++) {
            var p = pairs[i];
            var index = p.indexOf(":");
            if (index > 0) {
                var key = p.substring(0, index).trim();
                var value = p.substring(index + 1).trim();
                this.append(key, value);
            }
        }
    };
    BrowserHeaders.prototype.delete = function (key, value) {
        var normalizedKey = util_1.normalizeName(key);
        if (value === undefined) {
            delete this.headersMap[normalizedKey];
        }
        else {
            var existing = this.headersMap[normalizedKey];
            if (existing) {
                var index = existing.indexOf(value);
                if (index >= 0) {
                    existing.splice(index, 1);
                }
                if (existing.length === 0) {
                    delete this.headersMap[normalizedKey];
                }
            }
        }
    };
    BrowserHeaders.prototype.append = function (key, value) {
        var _this = this;
        var normalizedKey = util_1.normalizeName(key);
        if (!Array.isArray(this.headersMap[normalizedKey])) {
            this.headersMap[normalizedKey] = [];
        }
        if (Array.isArray(value)) {
            value.forEach(function (arrayValue) {
                _this.headersMap[normalizedKey].push(util_1.normalizeValue(arrayValue));
            });
        }
        else {
            this.headersMap[normalizedKey].push(util_1.normalizeValue(value));
        }
    };
    BrowserHeaders.prototype.set = function (key, value) {
        var normalizedKey = util_1.normalizeName(key);
        if (Array.isArray(value)) {
            var normalized_1 = [];
            value.forEach(function (arrayValue) {
                normalized_1.push(util_1.normalizeValue(arrayValue));
            });
            this.headersMap[normalizedKey] = normalized_1;
        }
        else {
            this.headersMap[normalizedKey] = [util_1.normalizeValue(value)];
        }
    };
    BrowserHeaders.prototype.has = function (key, value) {
        var keyArray = this.headersMap[util_1.normalizeName(key)];
        var keyExists = Array.isArray(keyArray);
        if (!keyExists) {
            return false;
        }
        if (value !== undefined) {
            var normalizedValue = util_1.normalizeValue(value);
            return keyArray.indexOf(normalizedValue) >= 0;
        }
        else {
            return true;
        }
    };
    BrowserHeaders.prototype.get = function (key) {
        var values = this.headersMap[util_1.normalizeName(key)];
        if (values !== undefined) {
            return values.concat();
        }
        return [];
    };
    BrowserHeaders.prototype.forEach = function (callback) {
        var _this = this;
        Object.getOwnPropertyNames(this.headersMap)
            .forEach(function (key) {
            callback(key, _this.headersMap[key]);
        }, this);
    };
    BrowserHeaders.prototype.toHeaders = function () {
        if (typeof Headers !== "undefined") {
            var headers_1 = new Headers();
            this.forEach(function (key, values) {
                values.forEach(function (value) {
                    headers_1.append(key, value);
                });
            });
            return headers_1;
        }
        else {
            throw new Error("Headers class is not defined");
        }
    };
    return BrowserHeaders;
}());
exports.BrowserHeaders = BrowserHeaders;


/***/ }),
/* 1 */
/***/ (function(module, exports, __nested_webpack_require_8924__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BrowserHeaders_1 = __nested_webpack_require_8924__(0);
exports.BrowserHeaders = BrowserHeaders_1.BrowserHeaders;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function iterateHeaders(headers, callback) {
    var iterator = headers[Symbol.iterator]();
    var entry = iterator.next();
    while (!entry.done) {
        callback(entry.value[0]);
        entry = iterator.next();
    }
}
exports.iterateHeaders = iterateHeaders;
function iterateHeadersKeys(headers, callback) {
    var iterator = headers.keys();
    var entry = iterator.next();
    while (!entry.done) {
        callback(entry.value);
        entry = iterator.next();
    }
}
exports.iterateHeadersKeys = iterateHeadersKeys;


/***/ }),
/* 3 */
/***/ (function(module, exports, __nested_webpack_require_9870__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var iterateHeaders_1 = __nested_webpack_require_9870__(2);
function normalizeName(name) {
    if (typeof name !== "string") {
        name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError("Invalid character in header field name");
    }
    return name.toLowerCase();
}
exports.normalizeName = normalizeName;
function normalizeValue(value) {
    if (typeof value !== "string") {
        value = String(value);
    }
    return value;
}
exports.normalizeValue = normalizeValue;
function getHeaderValues(headersAsNative, key) {
    var headers = toWindowHeaders(headersAsNative);
    if (headers instanceof Headers && headers.getAll) {
        return headers.getAll(key);
    }
    var getValue = headers.get(key);
    if (getValue && typeof getValue === "string") {
        return [getValue];
    }
    return getValue;
}
exports.getHeaderValues = getHeaderValues;
function toWindowHeaders(headersAsNative) {
    return headersAsNative;
}
function getHeaderKeys(headersAsNative) {
    var headers = toWindowHeaders(headersAsNative);
    var asMap = {};
    var keys = [];
    if (headers.keys) {
        iterateHeaders_1.iterateHeadersKeys(headers, function (key) {
            if (!asMap[key]) {
                asMap[key] = true;
                keys.push(key);
            }
        });
    }
    else if (headers.forEach) {
        headers.forEach(function (_, key) {
            if (!asMap[key]) {
                asMap[key] = true;
                keys.push(key);
            }
        });
    }
    else {
        iterateHeaders_1.iterateHeaders(headers, function (entry) {
            var key = entry[0];
            if (!asMap[key]) {
                asMap[key] = true;
                keys.push(key);
            }
        });
    }
    return keys;
}
exports.getHeaderKeys = getHeaderKeys;
function splitHeaderValue(str) {
    var values = [];
    var commaSpaceValues = str.split(", ");
    commaSpaceValues.forEach(function (commaSpaceValue) {
        commaSpaceValue.split(",").forEach(function (commaValue) {
            values.push(commaValue);
        });
    });
    return values;
}
exports.splitHeaderValue = splitHeaderValue;


/***/ })
/******/ ]);
});

/***/ }),

/***/ 720:
/***/ ((module) => {

module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};


/***/ }),

/***/ 100:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// minimal library entry point.


module.exports = __webpack_require__(482);


/***/ }),

/***/ 482:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = __webpack_require__(173);
protobuf.BufferWriter = __webpack_require__(155);
protobuf.Reader       = __webpack_require__(408);
protobuf.BufferReader = __webpack_require__(593);

// Utility
protobuf.util         = __webpack_require__(693);
protobuf.rpc          = __webpack_require__(994);
protobuf.roots        = __webpack_require__(54);
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}

// Set up buffer utility according to the environment
configure();


/***/ }),

/***/ 408:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Reader;

var util      = __webpack_require__(693);

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup(buffer) {
            return (Reader.create = function create_buffer(buffer) {
                return util.Buffer.isBuffer(buffer)
                    ? new BufferReader(buffer)
                    /* istanbul ignore next */
                    : create_array(buffer);
            })(buffer);
        }
        /* istanbul ignore next */
        : create_array;
};

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = create();

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};


/***/ }),

/***/ 593:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = BufferReader;

// extends Reader
var Reader = __webpack_require__(408);
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = __webpack_require__(693);

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

BufferReader._configure = function () {
    /* istanbul ignore else */
    if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
};


/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice
        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

BufferReader._configure();


/***/ }),

/***/ 54:
/***/ ((module) => {

"use strict";

module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */


/***/ }),

/***/ 994:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = __webpack_require__(948);


/***/ }),

/***/ 948:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Service;

var util = __webpack_require__(693);

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};


/***/ }),

/***/ 630:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = LongBits;

var util = __webpack_require__(693);

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};


/***/ }),

/***/ 693:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = __webpack_require__(537);

// converts to / from base64 encoded strings
util.base64 = __webpack_require__(419);

// base class of rpc.Service
util.EventEmitter = __webpack_require__(211);

// float handling accross browsers
util.float = __webpack_require__(945);

// requires modules optionally and hides the call from bundlers
util.inquire = __webpack_require__(199);

// converts to / from utf8 encoded strings
util.utf8 = __webpack_require__(997);

// provides a node-like buffer pool in the browser
util.pool = __webpack_require__(662);

// utility to work with the low and high bits of a 64 bit value
util.LongBits = __webpack_require__(630);

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 */
util.isNode = Boolean(typeof __webpack_require__.g !== "undefined"
                   && __webpack_require__.g
                   && __webpack_require__.g.process
                   && __webpack_require__.g.process.versions
                   && __webpack_require__.g.process.versions.node);

/**
 * Global object reference.
 * @memberof util
 * @type {Object}
 */
util.global = util.isNode && __webpack_require__.g
           || typeof window !== "undefined" && window
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};


/***/ }),

/***/ 173:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Writer;

var util      = __webpack_require__(693);

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup() {
            return (Writer.create = function create_buffer() {
                return new BufferWriter();
            })();
        }
        /* istanbul ignore next */
        : function create_array() {
            return new Writer();
        };
};

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = create();

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
    Writer.create = create();
    BufferWriter._configure();
};


/***/ }),

/***/ 155:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = BufferWriter;

// extends Writer
var Writer = __webpack_require__(173);
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = __webpack_require__(693);

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

BufferWriter._configure = function () {
    /**
     * Allocates a buffer of the specified size.
     * @function
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */
    BufferWriter.alloc = util._Buffer_allocUnsafe;

    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set"
        ? function writeBytesBuffer_set(val, buf, pos) {
          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
          // also works for plain array values
        }
        /* istanbul ignore next */
        : function writeBytesBuffer_copy(val, buf, pos) {
          if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
          else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
        };
};


/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else if (buf.utf8Write)
        buf.utf8Write(val, pos);
    else
        buf.write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util.Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

BufferWriter._configure();


/***/ }),

/***/ 660:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    // Metadata Proposal
    // https://rbuckton.github.io/reflect-metadata/
    (function (factory) {
        var root = typeof __webpack_require__.g === "object" ? __webpack_require__.g :
            typeof self === "object" ? self :
                typeof this === "object" ? this :
                    Function("return this;")();
        var exporter = makeExporter(Reflect);
        if (typeof root.Reflect === "undefined") {
            root.Reflect = Reflect;
        }
        else {
            exporter = makeExporter(root.Reflect, exporter);
        }
        factory(exporter);
        function makeExporter(target, previous) {
            return function (key, value) {
                if (typeof target[key] !== "function") {
                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });
                }
                if (previous)
                    previous(key, value);
            };
        }
    })(function (exporter) {
        var hasOwn = Object.prototype.hasOwnProperty;
        // feature test for Symbol support
        var supportsSymbol = typeof Symbol === "function";
        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        var HashMap = {
            // create an object in dictionary mode (a.k.a. "slow" mode in v8)
            create: supportsCreate
                ? function () { return MakeDictionary(Object.create(null)); }
                : supportsProto
                    ? function () { return MakeDictionary({ __proto__: null }); }
                    : function () { return MakeDictionary({}); },
            has: downLevel
                ? function (map, key) { return hasOwn.call(map, key); }
                : function (map, key) { return key in map; },
            get: downLevel
                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
                : function (map, key) { return map[key]; },
        };
        // Load global or shim versions of Map, Set, and WeakMap
        var functionPrototype = Object.getPrototypeOf(Function);
        var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
        var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
        var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        // [[Metadata]] internal slot
        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
        var Metadata = new _WeakMap();
        /**
         * Applies a set of decorators to a property of a target object.
         * @param decorators An array of decorators.
         * @param target The target object.
         * @param propertyKey (Optional) The property key to decorate.
         * @param attributes (Optional) The property descriptor for the target key.
         * @remarks Decorators are applied in reverse order.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Example = Reflect.decorate(decoratorsArray, Example);
         *
         *     // property (on constructor)
         *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Object.defineProperty(Example, "staticMethod",
         *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
         *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
         *
         *     // method (on prototype)
         *     Object.defineProperty(Example.prototype, "method",
         *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
         *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
         *
         */
        function decorate(decorators, target, propertyKey, attributes) {
            if (!IsUndefined(propertyKey)) {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                    throw new TypeError();
                if (IsNull(attributes))
                    attributes = undefined;
                propertyKey = ToPropertyKey(propertyKey);
                return DecorateProperty(decorators, target, propertyKey, attributes);
            }
            else {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsConstructor(target))
                    throw new TypeError();
                return DecorateConstructor(decorators, target);
            }
        }
        exporter("decorate", decorate);
        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
        /**
         * A default metadata decorator factory that can be used on a class, class member, or parameter.
         * @param metadataKey The key for the metadata entry.
         * @param metadataValue The value for the metadata entry.
         * @returns A decorator function.
         * @remarks
         * If `metadataKey` is already defined for the target and target key, the
         * metadataValue for that key will be overwritten.
         * @example
         *
         *     // constructor
         *     @Reflect.metadata(key, value)
         *     class Example {
         *     }
         *
         *     // property (on constructor, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticProperty;
         *     }
         *
         *     // property (on prototype, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         property;
         *     }
         *
         *     // method (on constructor)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticMethod() { }
         *     }
         *
         *     // method (on prototype)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         method() { }
         *     }
         *
         */
        function metadata(metadataKey, metadataValue) {
            function decorator(target, propertyKey) {
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                    throw new TypeError();
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
            }
            return decorator;
        }
        exporter("metadata", metadata);
        /**
         * Define a unique metadata entry on the target.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param metadataValue A value that contains attached metadata.
         * @param target The target object on which to define metadata.
         * @param propertyKey (Optional) The property key for the target.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Reflect.defineMetadata("custom:annotation", options, Example);
         *
         *     // property (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
         *
         *     // method (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
         *
         *     // decorator factory as metadata-producing annotation.
         *     function MyAnnotation(options): Decorator {
         *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
         *     }
         *
         */
        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        exporter("defineMetadata", defineMetadata);
        /**
         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasMetadata", hasMetadata);
        /**
         * Gets a value indicating whether the target object has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasOwnMetadata", hasOwnMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetMetadata(metadataKey, target, propertyKey);
        }
        exporter("getMetadata", getMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("getOwnMetadata", getOwnMetadata);
        /**
         * Gets the metadata keys defined on the target object or its prototype chain.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "method");
         *
         */
        function getMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryMetadataKeys(target, propertyKey);
        }
        exporter("getMetadataKeys", getMetadataKeys);
        /**
         * Gets the unique metadata keys defined on the target object.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
         *
         */
        function getOwnMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryOwnMetadataKeys(target, propertyKey);
        }
        exporter("getOwnMetadataKeys", getOwnMetadataKeys);
        /**
         * Deletes the metadata entry from the target object with the provided key.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata entry was found and deleted; otherwise, false.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.deleteMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function deleteMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            if (!metadataMap.delete(metadataKey))
                return false;
            if (metadataMap.size > 0)
                return true;
            var targetMetadata = Metadata.get(target);
            targetMetadata.delete(propertyKey);
            if (targetMetadata.size > 0)
                return true;
            Metadata.delete(target);
            return true;
        }
        exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsConstructor(decorated))
                        throw new TypeError();
                    target = decorated;
                }
            }
            return target;
        }
        function DecorateProperty(decorators, target, propertyKey, descriptor) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target, propertyKey, descriptor);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsObject(decorated))
                        throw new TypeError();
                    descriptor = decorated;
                }
            }
            return descriptor;
        }
        function GetOrCreateMetadataMap(O, P, Create) {
            var targetMetadata = Metadata.get(O);
            if (IsUndefined(targetMetadata)) {
                if (!Create)
                    return undefined;
                targetMetadata = new _Map();
                Metadata.set(O, targetMetadata);
            }
            var metadataMap = targetMetadata.get(P);
            if (IsUndefined(metadataMap)) {
                if (!Create)
                    return undefined;
                metadataMap = new _Map();
                targetMetadata.set(P, metadataMap);
            }
            return metadataMap;
        }
        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
        function OrdinaryHasMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return true;
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryHasMetadata(MetadataKey, parent, P);
            return false;
        }
        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            return ToBoolean(metadataMap.has(MetadataKey));
        }
        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
        function OrdinaryGetMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return OrdinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryGetMetadata(MetadataKey, parent, P);
            return undefined;
        }
        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return undefined;
            return metadataMap.get(MetadataKey);
        }
        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
            metadataMap.set(MetadataKey, MetadataValue);
        }
        // 3.1.6.1 OrdinaryMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
        function OrdinaryMetadataKeys(O, P) {
            var ownKeys = OrdinaryOwnMetadataKeys(O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (parent === null)
                return ownKeys;
            var parentKeys = OrdinaryMetadataKeys(parent, P);
            if (parentKeys.length <= 0)
                return ownKeys;
            if (ownKeys.length <= 0)
                return parentKeys;
            var set = new _Set();
            var keys = [];
            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
                var key = ownKeys_1[_i];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
                var key = parentKeys_1[_a];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            return keys;
        }
        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
        function OrdinaryOwnMetadataKeys(O, P) {
            var keys = [];
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return keys;
            var keysObj = metadataMap.keys();
            var iterator = GetIterator(keysObj);
            var k = 0;
            while (true) {
                var next = IteratorStep(iterator);
                if (!next) {
                    keys.length = k;
                    return keys;
                }
                var nextValue = IteratorValue(next);
                try {
                    keys[k] = nextValue;
                }
                catch (e) {
                    try {
                        IteratorClose(iterator);
                    }
                    finally {
                        throw e;
                    }
                }
                k++;
            }
        }
        // 6 ECMAScript Data Typ0es and Values
        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
        function Type(x) {
            if (x === null)
                return 1 /* Null */;
            switch (typeof x) {
                case "undefined": return 0 /* Undefined */;
                case "boolean": return 2 /* Boolean */;
                case "string": return 3 /* String */;
                case "symbol": return 4 /* Symbol */;
                case "number": return 5 /* Number */;
                case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
                default: return 6 /* Object */;
            }
        }
        // 6.1.1 The Undefined Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
        function IsUndefined(x) {
            return x === undefined;
        }
        // 6.1.2 The Null Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
        function IsNull(x) {
            return x === null;
        }
        // 6.1.5 The Symbol Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
        function IsSymbol(x) {
            return typeof x === "symbol";
        }
        // 6.1.7 The Object Type
        // https://tc39.github.io/ecma262/#sec-object-type
        function IsObject(x) {
            return typeof x === "object" ? x !== null : typeof x === "function";
        }
        // 7.1 Type Conversion
        // https://tc39.github.io/ecma262/#sec-type-conversion
        // 7.1.1 ToPrimitive(input [, PreferredType])
        // https://tc39.github.io/ecma262/#sec-toprimitive
        function ToPrimitive(input, PreferredType) {
            switch (Type(input)) {
                case 0 /* Undefined */: return input;
                case 1 /* Null */: return input;
                case 2 /* Boolean */: return input;
                case 3 /* String */: return input;
                case 4 /* Symbol */: return input;
                case 5 /* Number */: return input;
            }
            var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
            if (exoticToPrim !== undefined) {
                var result = exoticToPrim.call(input, hint);
                if (IsObject(result))
                    throw new TypeError();
                return result;
            }
            return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
        }
        // 7.1.1.1 OrdinaryToPrimitive(O, hint)
        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
        function OrdinaryToPrimitive(O, hint) {
            if (hint === "string") {
                var toString_1 = O.toString;
                if (IsCallable(toString_1)) {
                    var result = toString_1.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            else {
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var toString_2 = O.toString;
                if (IsCallable(toString_2)) {
                    var result = toString_2.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            throw new TypeError();
        }
        // 7.1.2 ToBoolean(argument)
        // https://tc39.github.io/ecma262/2016/#sec-toboolean
        function ToBoolean(argument) {
            return !!argument;
        }
        // 7.1.12 ToString(argument)
        // https://tc39.github.io/ecma262/#sec-tostring
        function ToString(argument) {
            return "" + argument;
        }
        // 7.1.14 ToPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-topropertykey
        function ToPropertyKey(argument) {
            var key = ToPrimitive(argument, 3 /* String */);
            if (IsSymbol(key))
                return key;
            return ToString(key);
        }
        // 7.2 Testing and Comparison Operations
        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
        // 7.2.2 IsArray(argument)
        // https://tc39.github.io/ecma262/#sec-isarray
        function IsArray(argument) {
            return Array.isArray
                ? Array.isArray(argument)
                : argument instanceof Object
                    ? argument instanceof Array
                    : Object.prototype.toString.call(argument) === "[object Array]";
        }
        // 7.2.3 IsCallable(argument)
        // https://tc39.github.io/ecma262/#sec-iscallable
        function IsCallable(argument) {
            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
            return typeof argument === "function";
        }
        // 7.2.4 IsConstructor(argument)
        // https://tc39.github.io/ecma262/#sec-isconstructor
        function IsConstructor(argument) {
            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
            return typeof argument === "function";
        }
        // 7.2.7 IsPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-ispropertykey
        function IsPropertyKey(argument) {
            switch (Type(argument)) {
                case 3 /* String */: return true;
                case 4 /* Symbol */: return true;
                default: return false;
            }
        }
        // 7.3 Operations on Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-objects
        // 7.3.9 GetMethod(V, P)
        // https://tc39.github.io/ecma262/#sec-getmethod
        function GetMethod(V, P) {
            var func = V[P];
            if (func === undefined || func === null)
                return undefined;
            if (!IsCallable(func))
                throw new TypeError();
            return func;
        }
        // 7.4 Operations on Iterator Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
        function GetIterator(obj) {
            var method = GetMethod(obj, iteratorSymbol);
            if (!IsCallable(method))
                throw new TypeError(); // from Call
            var iterator = method.call(obj);
            if (!IsObject(iterator))
                throw new TypeError();
            return iterator;
        }
        // 7.4.4 IteratorValue(iterResult)
        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
        function IteratorValue(iterResult) {
            return iterResult.value;
        }
        // 7.4.5 IteratorStep(iterator)
        // https://tc39.github.io/ecma262/#sec-iteratorstep
        function IteratorStep(iterator) {
            var result = iterator.next();
            return result.done ? false : result;
        }
        // 7.4.6 IteratorClose(iterator, completion)
        // https://tc39.github.io/ecma262/#sec-iteratorclose
        function IteratorClose(iterator) {
            var f = iterator["return"];
            if (f)
                f.call(iterator);
        }
        // 9.1 Ordinary Object Internal Methods and Internal Slots
        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
        // 9.1.1.1 OrdinaryGetPrototypeOf(O)
        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
        function OrdinaryGetPrototypeOf(O) {
            var proto = Object.getPrototypeOf(O);
            if (typeof O !== "function" || O === functionPrototype)
                return proto;
            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
            // Try to determine the superclass constructor. Compatible implementations
            // must either set __proto__ on a subclass constructor to the superclass constructor,
            // or ensure each class has a valid `constructor` property on its prototype that
            // points back to the constructor.
            // If this is not the same as Function.[[Prototype]], then this is definately inherited.
            // This is the case when in ES6 or when using __proto__ in a compatible browser.
            if (proto !== functionPrototype)
                return proto;
            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
            var prototype = O.prototype;
            var prototypeProto = prototype && Object.getPrototypeOf(prototype);
            if (prototypeProto == null || prototypeProto === Object.prototype)
                return proto;
            // If the constructor was not a function, then we cannot determine the heritage.
            var constructor = prototypeProto.constructor;
            if (typeof constructor !== "function")
                return proto;
            // If we have some kind of self-reference, then we cannot determine the heritage.
            if (constructor === O)
                return proto;
            // we have a pretty good guess at the heritage.
            return constructor;
        }
        // naive Map shim
        function CreateMapPolyfill() {
            var cacheSentinel = {};
            var arraySentinel = [];
            var MapIterator = /** @class */ (function () {
                function MapIterator(keys, values, selector) {
                    this._index = 0;
                    this._keys = keys;
                    this._values = values;
                    this._selector = selector;
                }
                MapIterator.prototype["@@iterator"] = function () { return this; };
                MapIterator.prototype[iteratorSymbol] = function () { return this; };
                MapIterator.prototype.next = function () {
                    var index = this._index;
                    if (index >= 0 && index < this._keys.length) {
                        var result = this._selector(this._keys[index], this._values[index]);
                        if (index + 1 >= this._keys.length) {
                            this._index = -1;
                            this._keys = arraySentinel;
                            this._values = arraySentinel;
                        }
                        else {
                            this._index++;
                        }
                        return { value: result, done: false };
                    }
                    return { value: undefined, done: true };
                };
                MapIterator.prototype.throw = function (error) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    throw error;
                };
                MapIterator.prototype.return = function (value) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    return { value: value, done: true };
                };
                return MapIterator;
            }());
            return /** @class */ (function () {
                function Map() {
                    this._keys = [];
                    this._values = [];
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                }
                Object.defineProperty(Map.prototype, "size", {
                    get: function () { return this._keys.length; },
                    enumerable: true,
                    configurable: true
                });
                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
                Map.prototype.get = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    return index >= 0 ? this._values[index] : undefined;
                };
                Map.prototype.set = function (key, value) {
                    var index = this._find(key, /*insert*/ true);
                    this._values[index] = value;
                    return this;
                };
                Map.prototype.delete = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    if (index >= 0) {
                        var size = this._keys.length;
                        for (var i = index + 1; i < size; i++) {
                            this._keys[i - 1] = this._keys[i];
                            this._values[i - 1] = this._values[i];
                        }
                        this._keys.length--;
                        this._values.length--;
                        if (key === this._cacheKey) {
                            this._cacheKey = cacheSentinel;
                            this._cacheIndex = -2;
                        }
                        return true;
                    }
                    return false;
                };
                Map.prototype.clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                };
                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
                Map.prototype["@@iterator"] = function () { return this.entries(); };
                Map.prototype[iteratorSymbol] = function () { return this.entries(); };
                Map.prototype._find = function (key, insert) {
                    if (this._cacheKey !== key) {
                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                    }
                    if (this._cacheIndex < 0 && insert) {
                        this._cacheIndex = this._keys.length;
                        this._keys.push(key);
                        this._values.push(undefined);
                    }
                    return this._cacheIndex;
                };
                return Map;
            }());
            function getKey(key, _) {
                return key;
            }
            function getValue(_, value) {
                return value;
            }
            function getEntry(key, value) {
                return [key, value];
            }
        }
        // naive Set shim
        function CreateSetPolyfill() {
            return /** @class */ (function () {
                function Set() {
                    this._map = new _Map();
                }
                Object.defineProperty(Set.prototype, "size", {
                    get: function () { return this._map.size; },
                    enumerable: true,
                    configurable: true
                });
                Set.prototype.has = function (value) { return this._map.has(value); };
                Set.prototype.add = function (value) { return this._map.set(value, value), this; };
                Set.prototype.delete = function (value) { return this._map.delete(value); };
                Set.prototype.clear = function () { this._map.clear(); };
                Set.prototype.keys = function () { return this._map.keys(); };
                Set.prototype.values = function () { return this._map.values(); };
                Set.prototype.entries = function () { return this._map.entries(); };
                Set.prototype["@@iterator"] = function () { return this.keys(); };
                Set.prototype[iteratorSymbol] = function () { return this.keys(); };
                return Set;
            }());
        }
        // naive WeakMap shim
        function CreateWeakMapPolyfill() {
            var UUID_SIZE = 16;
            var keys = HashMap.create();
            var rootKey = CreateUniqueKey();
            return /** @class */ (function () {
                function WeakMap() {
                    this._key = CreateUniqueKey();
                }
                WeakMap.prototype.has = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.has(table, this._key) : false;
                };
                WeakMap.prototype.get = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.get(table, this._key) : undefined;
                };
                WeakMap.prototype.set = function (target, value) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                    table[this._key] = value;
                    return this;
                };
                WeakMap.prototype.delete = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? delete table[this._key] : false;
                };
                WeakMap.prototype.clear = function () {
                    // NOTE: not a real clear, just makes the previous data unreachable
                    this._key = CreateUniqueKey();
                };
                return WeakMap;
            }());
            function CreateUniqueKey() {
                var key;
                do
                    key = "@@WeakMap@@" + CreateUUID();
                while (HashMap.has(keys, key));
                keys[key] = true;
                return key;
            }
            function GetOrCreateWeakMapTable(target, create) {
                if (!hasOwn.call(target, rootKey)) {
                    if (!create)
                        return undefined;
                    Object.defineProperty(target, rootKey, { value: HashMap.create() });
                }
                return target[rootKey];
            }
            function FillRandomBytes(buffer, size) {
                for (var i = 0; i < size; ++i)
                    buffer[i] = Math.random() * 0xff | 0;
                return buffer;
            }
            function GenRandomBytes(size) {
                if (typeof Uint8Array === "function") {
                    if (typeof crypto !== "undefined")
                        return crypto.getRandomValues(new Uint8Array(size));
                    if (typeof msCrypto !== "undefined")
                        return msCrypto.getRandomValues(new Uint8Array(size));
                    return FillRandomBytes(new Uint8Array(size), size);
                }
                return FillRandomBytes(new Array(size), size);
            }
            function CreateUUID() {
                var data = GenRandomBytes(UUID_SIZE);
                // mark as random - RFC 4122 § 4.4
                data[6] = data[6] & 0x4f | 0x40;
                data[8] = data[8] & 0xbf | 0x80;
                var result = "";
                for (var offset = 0; offset < UUID_SIZE; ++offset) {
                    var byte = data[offset];
                    if (offset === 4 || offset === 6 || offset === 8)
                        result += "-";
                    if (byte < 16)
                        result += "0";
                    result += byte.toString(16).toLowerCase();
                }
                return result;
            }
        }
        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
        function MakeDictionary(obj) {
            obj.__ = undefined;
            delete obj.__;
            return obj;
        }
    });
})(Reflect || (Reflect = {}));


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/environment.json
const environment_namespaceObject = JSON.parse('{"l":"0.9.0-alpha.1"}');
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lensCoreWasmVersions.json
const lensCoreWasmVersions_namespaceObject = JSON.parse('{"i8":"209","c$":"8","FH":"https://cf-st.sc-cdn.net/d/MkroAjRWoH1TVgTCn9VZV?go=IgsKCTIBBEgBUFxgAQ%3D%3D&uc=92"}');
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/copyDefinedProperties.js
/**
 * Copy only those properties of an object which are not undefined.
 *
 * This can be useful when using `Object.assign(foo, bar)` or `{ ...foo, ...bar }` to copy values from one object to
 * another. There's a (rather annoying) difference between a property not existing in an object and that property
 * existing but having an undefined value. When copying values using either of the methods above, it's generally
 * expected that undefined properties won't overwrite defined properties. But that's not the behavior – this helper
 * function is needed to ensure undefined properties in `bar` don't clobber corresponding properties in `foo`.
 *
 * @param obj Any object, possibly with properties whose values are undefined.
 * @returns A copy of the input object, without keys whose values were undefined.
 */
function copyDefinedProperties(obj) {
    return Object.fromEntries(Object.entries(obj).filter(([_, value]) => value !== undefined));
}
//# sourceMappingURL=copyDefinedProperties.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/configurationOverrides.js
/**
 * Prefix of override key on window object.
 */
const windowFieldPrefix = "__snap_camkit_override__";
const configPropertiesToOverride = ["wasmEndpointOverride", "logger", "logLevel"];
configPropertiesToOverride.forEach((fieldToOverride) => {
    defineWindowField(fieldToOverride);
});
function defineWindowField(propertyToOverride) {
    if (typeof window === "undefined")
        return;
    Object.defineProperty(window, `${windowFieldPrefix}${propertyToOverride}`, {
        get() {
            var _a;
            return (_a = getConfigurationOverrides()) === null || _a === void 0 ? void 0 : _a[propertyToOverride];
        },
        set(value) {
            var _a;
            const storedOverrdies = (_a = getConfigurationOverrides()) !== null && _a !== void 0 ? _a : {};
            storedOverrdies[propertyToOverride] = value;
            if (Object.values(storedOverrdies).every((value) => typeof value === "undefined")) {
                sessionStorage.removeItem(windowFieldPrefix);
            }
            else {
                sessionStorage.setItem(windowFieldPrefix, JSON.stringify(storedOverrdies));
            }
        },
        enumerable: false,
        configurable: true,
    });
}
/**
 * Checks whether there are configuration overrides stored, and if yes, returns them.
 *
 * @internal
 */
function getConfigurationOverrides() {
    const overridesString = sessionStorage.getItem(windowFieldPrefix);
    return overridesString && JSON.parse(overridesString);
}
//# sourceMappingURL=configurationOverrides.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/dependency-injection/Injectable.js
function Injectable(token, dependenciesOrFn, maybeFn) {
    const dependencies = Array.isArray(dependenciesOrFn) ? dependenciesOrFn : [];
    const fn = typeof dependenciesOrFn === "function" ? dependenciesOrFn : maybeFn;
    if (!fn) {
        throw new TypeError("[Factory] Received invalid arguments. The factory function must be either the second " +
            "or third argument.");
    }
    if (fn.length !== dependencies.length) {
        throw new TypeError("[Factory] Function arity does not match the number of dependencies. Function has arity " +
            `${fn.length}, but ${dependencies.length} dependencies were specified.` +
            `\nDependencies: ${JSON.stringify(dependencies)}`);
    }
    const factory = (...args) => fn(...args);
    factory.token = token;
    factory.dependencies = dependencies;
    return factory;
}
//# sourceMappingURL=Injectable.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/configuration.js



/**
 * Defaults are provided for runtime configuration and any optional bootstrap configuration properties which require
 * defaults.
 */
const defaultConfiguration = {
    // If the applications doesn't provide performance data (e.g. via estimateLensPerformance), we'll use 0 to indicate
    // no performance estimation occurred. This is indicative of typical performance-targeting logic, which often
    // defaults to the lowest-tier experience in the absense of performance cluster data.
    lensPerformance: { cluster: 0, benchmarks: [], webglRendererInfo: "unknown" },
    logger: "noop",
    logLevel: "info",
    shouldUseWorker: true,
};
/** @internal */
const configurationToken = "configuration";
/** @internal */
const createCameraKitConfigurationFactory = (configuration) => {
    // always leave debug mode warning about overrides in console
    const overrides = getConfigurationOverrides();
    if (overrides) {
        console.warn("Configuration overrides applied", overrides);
    }
    return Injectable(configurationToken, () => {
        // We'll ensure that we handle errors on any Promises passed as config values, otherwise we either must
        // handle them separately wherever they're used, or rejections would go unhandled.
        const safeConfig = Object.assign(Object.assign({}, configuration), { lensPerformance: configuration.lensPerformance instanceof Promise
                ? // Safety: defaultConfiguration.lensPerformance is defined (it's hardcoded above).
                    configuration.lensPerformance.catch(() => defaultConfiguration.lensPerformance)
                : configuration.lensPerformance });
        return Object.assign(Object.assign(Object.assign({}, defaultConfiguration), copyDefinedProperties(safeConfig)), copyDefinedProperties(overrides !== null && overrides !== void 0 ? overrides : {}));
    });
};
//# sourceMappingURL=configuration.js.map
;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.js
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.push(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.push(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};

function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};

function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function tslib_es6_awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

;// CONCATENATED MODULE: ./node_modules/wasm-feature-detect/dist/esm/index.js
const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return"undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));

;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/loadScript.js
function loadScript(scriptUri) {
    return new Promise((resolve, reject) => {
        const scriptElement = document.createElement("script");
        scriptElement.src = scriptUri;
        scriptElement.async = true;
        scriptElement.addEventListener("load", () => resolve(), { once: true });
        scriptElement.addEventListener("error", (event) => reject(event), { once: true });
        document.body.appendChild(scriptElement);
    });
}
//# sourceMappingURL=loadScript.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/typeguards.js
function isString(value) {
    return typeof value === "string";
}
/**
 * Ensures given value is a safe string.
 *
 * Safe strings allow to prevent CRLF attacks. We use encoding approach inspired by:
 * https://community.veracode.com/s/question/0D53n00007hJJV5CAO/is-cwe-id-117-intended-for-consolelog
 */
function isSafeString(value) {
    return isString(value) && encodeURIComponent(value) === value;
}
function isNumber(value) {
    return typeof value === "number";
}
function isNotNull(value) {
    return value !== null;
}
function isArrayOfType(elementTypeGuard, value) {
    return Array.isArray(value) && value.every((id) => elementTypeGuard(id));
}
function isStringArray(value) {
    return isArrayOfType(isString, value);
}
function isSafeStringArray(value) {
    return isArrayOfType(isSafeString, value);
}
/**
 * Guards given value is instance of ArrayBuffer.
 */
function isArrayBuffer(value) {
    return value instanceof ArrayBuffer;
}
/**
 * Guards given value is a typed array.
 */
function isTypedArray(value) {
    return value instanceof Object.getPrototypeOf(Uint8Array);
}
/**
 * Guards given object is not undefined.
 */
function isUndefined(value) {
    return typeof value === "undefined";
}
/**
 * Narrow an unknown type to a Record (i.e. a non-null JS object). This holds true for class instances, not just
 * plain objects.
 */
function isRecord(value) {
    return typeof value === "object" && value !== null && !Array.isArray(value);
}
/**
 * Check if the value is an arbitrary function
 */
function isFunction(value) {
    return typeof value === "function";
}
/**
 * Apply a given type predicate asserting values are of type T to each value in a Record.
 *
 * @param predicate Any unary type predicate
 * @returns A type predicate which takes an UnknownRecord and tests that all its values are of type T
 */
function predicateRecordValues(predicate) {
    return (value) => {
        for (const v of Object.values(value))
            if (!predicate(v))
                return false;
        return true;
    };
}
/**
 * Checks whether given value is undefined or a safe URL string.
 *
 * The function checks whether given string is a valid URL with https: protocol.
 *
 * @param urlString URL string to check.
 * @returns True if URL is valid.
 */
function isEmptyOrSafeUrl(urlString) {
    if (!urlString)
        return true;
    try {
        const url = new URL(urlString);
        return url.protocol === "https:" || url.protocol === "http:";
    }
    catch (_a) {
        return false;
    }
}
//# sourceMappingURL=typeguards.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/debugHandler.js


/**
 * Addes cookies to auth requests to custom LensCore binaries
 * when there are debugging overrides.
 *
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const createDebugHandler = () => {
    var _a;
    const noCustomWasmEndpoint = !((_a = getConfigurationOverrides()) === null || _a === void 0 ? void 0 : _a.wasmEndpointOverride);
    if (noCustomWasmEndpoint) {
        return (next) => next;
    }
    return (next) => (input, init) => {
        var _a;
        const url = isString(input) ? input : (_a = input === null || input === void 0 ? void 0 : input.url) !== null && _a !== void 0 ? _a : "";
        // if requests are made to internal LensCore binaries site
        // we have to include cookies for auth purposes
        // as per https://wiki.sc-corp.net/x/KsnRCg
        if (url.startsWith("https://lens-core-wasm.sc-corp.net/")) {
            return next(input, Object.assign(Object.assign({}, init), { credentials: "include" }));
        }
        return next(input, init);
    };
};
//# sourceMappingURL=debugHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/HandlerChainBuilder.js
/**
 * Creates a Handler chain – a series of functions composed such that each function may call a supplied `next` function
 * which passes execution down the chain. When the final Handler in the chain returns, execution passes back up the
 * chain eventually returning to the caller.
 *
 * Each Handler chain begins with a "raw" Handler – this is a function which takes some request and returns some
 * response. A chain is then created by supplying a series of mapping functions – the ChainableHandler type – which will
 * be called with the `next` Handler in the chain.
 *
 * Ex:
 * ```ts
 * const handler = (request: string, metadata?: RequestMetadata) => Promise.resolve(`Responded to ${request}`)
 * const chainable = (next: Handler<string, string>) => (request: string, metadata?: RequestMetadata) => {
 *   return next(`modified ${request}`, metadata)
 * }
 *
 * const chain = new HandlerChainBuilder(handler)
 *   .map(chainable)
 *   .handler
 *
 * const response = await chain('hello')
 * expect(response).toBe('Responded to modified hello; 0')
 * ```
 * You can largely ignore the `metadata` argument present in the above example. This is the mechanism by which an
 * AbortSignal is passed to each Handler in the chain, but the only real requirement when implementing a Handler is
 * to pass this argument along to the `next` function. In fact, many Handlers will want to be generic over the type
 * of metadata:
 * ```ts
 * const chainable = <Meta>(next: Handler<string, string, Meta>) => (request: string, metadata: Meta) => {
 *   return next(`modified ${request}`, metadata)
 * }
 * ```
 * Actually, it's a very good idea for Handlers to be as generic as possible, since that will allow greater re-use. In
 * the above example, we don't do anything with the response from `next`, so we can let that be generic, too:
 * ```ts
 * const chainable = <Res, Meta>(next: Handler<string, Res, Meta>) => (request: string, metadata: Meta) => {
 *   return next(`modified ${request}`, metadata)
 * }
 * ```
 * Now if some other Handler in the chain decides to return a different response type, our Handler won't require any
 * changes to compile.
 *
 * ---
 *
 * Since execution passes from handler to handler in the chain, and then back, handlers have the opportunity to modify
 * or observe both the request and response. This might be useful for implementing serialization/deserialization, but
 * the simplest example that demonstrates this feature is measuring request latency:
 * ```ts
 * const latencyMeasuringHandler = <Req, Res, Meta>(next: Handler<Req, Res, Meta>) =>
 *   async (req: Req, metadata: Meta) => {
 *     const start = performance.now()
 *     const response = await next(req, metadata)
 *     const latency = performance.now() - start
 *     console.log(`latency for request ${request} was ${latency}`)
 *     return response
 *   }
 * ```
 * Execution is first passed to our measuring handler, which marks the `start` timestamp. Then it passes execution on
 * down the chain. After a response is received (by some handler down the chain), execution passes back up to our
 * handler here, which records the amount of time spent inside `next`.
 *
 * ---
 *
 * Handlers may also abort requests. They can do this in two ways:
 *   1. Create an `AbortController` and add its `AbortSignal` to the `metadata` object when calling `next`.
 *   2. Resolve its returned Promise.
 *
 * The first approach is straightforward, but the second may benefit from an example – the simplest is a handler which
 * will timeout a request:
 * ```ts
 * const timeoutHandler = <Req, Res, Meta>(next: Handler<Req, Res, Meta>) => (req: Req, metadata: Meta) => {
 *   return Promise.race([
 *     next(req, metadata),
 *     sleep(1000),
 *   ])
 * }
 * ```
 * The Promise returned by this handler will resolve either when the `next` handler resolves or 1 second has elapsed,
 * whichever happens first. If the timeout happens first, we want the `next` handler to recieve an abort signal so that
 * it can terminate early (since its result is no longer needed).
 *
 * HandlerChainBuilder makes this happen by observing when each handler completes, and sending an abort signal to all
 * the handlers "downstream" from the aborting handler.
 */
class HandlerChainBuilder {
    constructor(inner) {
        // The TS compiler has the following behavior:
        //
        // class Infer<T extends SomeType | undefined> { constructor(f: (t?: T) => void) {} }
        // const f = (t?: SomeType) => {}
        // const i = new Infer(f)
        //
        // The type of `i` is inferred to be `Infer<SomeType>` instead of `Infer<SomeType | undefined>`, even though the
        // type of `f`'s argument is `SomeType | undefined`. This seems to be a bug in type inference. Note that making
        // the constructor argument required gives the expected behavior:
        //
        // class Infer<T extends SomeType | undefined> { constructor(f: (t: T) => void) {} }
        // const f = (t?: SomeType) => {}
        // const i = new Infer(f)
        //
        // Now `i` is inferred to be `Infer<SomeType | undefined>`.
        //
        // This has consequences if the inferred type T is used elsewhere in the class.
        //
        // In this case, we need to make sure that if the given `inner` function marks the metadata argument as
        // optional, that HandlerChainBuilder correctly infers that the Meta type includes undefined. So we don't mark
        // metadata as optional, and so we must cast to `Handler` (which does mark it as optional).
        //
        // Safety: We're adding `| undefined` to the metadata type, which may be unsafe – `undefined` may not be
        // assignable to Meta. But when handling the argument of type Meta, we simply pass it through from handler to
        // handler – we never call `inner` without passing the metadata argument we've received from some call to an
        // outer handler. The typing visible to callers remains safe.
        this.inner = inner;
    }
    get handler() {
        return this.inner;
    }
    map(outer) {
        // To create the next handler in the chain, we compose the "outer" handler with the "inner" handler.
        //
        // The outer handler observes its own completion and sends an abort signal to the inner handler when it has
        // resolved. To prevent unexpected behavior, the inner handler also observes its own completion, setting a flag
        // when it resolves so that – if it resolves before the outer handler – the outer handler can skip sending the
        // abort signal (since the inner handler has already completed).
        const outerHandler = (req, metadata) => {
            var _a;
            const abort = new AbortController();
            const signal = abort.signal;
            // It's important to not signal an abort to an inner handler which has already completed – it seems like
            // this would be a non-issue (shouldn't aborting after completion be a no-op?), but specifically for the
            // browser's implementation of `fetch`, aborting even after the `fetch` Promise resolves can cause an abort
            // error if e.g. the Fetch Response's body has not yet been read.
            //
            // So, for safety, we will only abort inner handlers which are still executing.
            let innerCompleted = false;
            const maybeAbort = () => {
                var _a;
                // Safety: we never give `abort` to anyone else, so we know if the signal is aborted, this function
                // has already run, so we can return early without fear of leaking. We also know if inner has completed,
                // it has already performed cleanup.
                if (signal.aborted || innerCompleted)
                    return;
                // If we've gotten here, the outer handler has either completed, or we heard an abort event while the
                // inner handler is still executing – so we pass the abort signal down to the inner handler.
                abort.abort();
                (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.removeEventListener("abort", maybeAbort);
            };
            (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.addEventListener("abort", maybeAbort);
            const innerHandler = new Proxy(this.inner, {
                apply: (target, thisArg, args) => {
                    const [req, metadata] = args;
                    // To help Handler authors out, we'll do some bookkeeping and cleanup for them – if they forget to
                    // remove an abort event listener, we'll remove it for them when the Promise they return resolves.
                    // Note: No need to proxy removeEventListener, since removing a non-existent listener just no-ops.
                    const abortListeners = [];
                    signal.addEventListener = new Proxy(signal.addEventListener, {
                        apply: (target, thisArg, args) => {
                            abortListeners.push(args[1]);
                            return Reflect.apply(target, thisArg, args);
                        },
                    });
                    const cleanupAndMarkComplete = () => {
                        var _a;
                        // The only reason we listen to upstream aborts is to pass them to the inner handler – since the
                        // inner handler has completed, we no longer need the listener.
                        (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.removeEventListener("abort", maybeAbort);
                        abortListeners.forEach((listener) => signal.removeEventListener("abort", listener));
                        innerCompleted = true;
                    };
                    const innerResponse = Reflect.apply(target, thisArg, [
                        req,
                        Object.assign(Object.assign({}, metadata), { signal }),
                    ]);
                    // Using `finally` is more idiomatic, but causes trouble in some environments (e.g. some testing
                    // runtimes which detect uncaught rejected promises).
                    innerResponse.catch(() => { }).then(cleanupAndMarkComplete);
                    return innerResponse;
                },
            });
            const outerResponse = outer(innerHandler)(req, metadata);
            outerResponse.catch(() => { }).then(maybeAbort);
            return outerResponse;
        };
        return new HandlerChainBuilder(outerHandler);
    }
}
//# sourceMappingURL=HandlerChainBuilder.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction_isFunction(value) {
    return typeof value === 'function';
}
//# sourceMappingURL=isFunction.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
    var _super = function (instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
}
//# sourceMappingURL=createErrorClass.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js

var UnsubscriptionError = createErrorClass(function (_super) {
    return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors
            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
            : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
    };
});
//# sourceMappingURL=UnsubscriptionError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
    if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
    }
}
//# sourceMappingURL=arrRemove.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subscription.js




var Subscription = (function () {
    function Subscription(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
    }
    Subscription.prototype.unsubscribe = function () {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) {
                    try {
                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                            var parent_1 = _parentage_1_1.value;
                            parent_1.remove(this);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    _parentage.remove(this);
                }
            }
            var initialFinalizer = this.initialTeardown;
            if (isFunction_isFunction(initialFinalizer)) {
                try {
                    initialFinalizer();
                }
                catch (e) {
                    errors = e instanceof UnsubscriptionError ? e.errors : [e];
                }
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
                this._finalizers = null;
                try {
                    for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                        var finalizer = _finalizers_1_1.value;
                        try {
                            execFinalizer(finalizer);
                        }
                        catch (err) {
                            errors = errors !== null && errors !== void 0 ? errors : [];
                            if (err instanceof UnsubscriptionError) {
                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (errors) {
                throw new UnsubscriptionError(errors);
            }
        }
    };
    Subscription.prototype.add = function (teardown) {
        var _a;
        if (teardown && teardown !== this) {
            if (this.closed) {
                execFinalizer(teardown);
            }
            else {
                if (teardown instanceof Subscription) {
                    if (teardown.closed || teardown._hasParent(this)) {
                        return;
                    }
                    teardown._addParent(this);
                }
                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
            }
        }
    };
    Subscription.prototype._hasParent = function (parent) {
        var _parentage = this._parentage;
        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
    };
    Subscription.prototype._addParent = function (parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription.prototype._removeParent = function (parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
            this._parentage = null;
        }
        else if (Array.isArray(_parentage)) {
            arrRemove(_parentage, parent);
        }
    };
    Subscription.prototype.remove = function (teardown) {
        var _finalizers = this._finalizers;
        _finalizers && arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription) {
            teardown._removeParent(this);
        }
    };
    Subscription.EMPTY = (function () {
        var empty = new Subscription();
        empty.closed = true;
        return empty;
    })();
    return Subscription;
}());

var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
    return (value instanceof Subscription ||
        (value && 'closed' in value && isFunction_isFunction(value.remove) && isFunction_isFunction(value.add) && isFunction_isFunction(value.unsubscribe)));
}
function execFinalizer(finalizer) {
    if (isFunction_isFunction(finalizer)) {
        finalizer();
    }
    else {
        finalizer.unsubscribe();
    }
}
//# sourceMappingURL=Subscription.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/config.js
var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: undefined,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false,
};
//# sourceMappingURL=config.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js

var timeoutProvider = {
    setTimeout: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
            return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
        }
        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
    },
    clearTimeout: function (handle) {
        var delegate = timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=timeoutProvider.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js


function reportUnhandledError(err) {
    timeoutProvider.setTimeout(function () {
        var onUnhandledError = config.onUnhandledError;
        if (onUnhandledError) {
            onUnhandledError(err);
        }
        else {
            throw err;
        }
    });
}
//# sourceMappingURL=reportUnhandledError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop() { }
//# sourceMappingURL=noop.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
function errorNotification(error) {
    return createNotification('E', undefined, error);
}
function nextNotification(value) {
    return createNotification('N', value, undefined);
}
function createNotification(kind, value, error) {
    return {
        kind: kind,
        value: value,
        error: error,
    };
}
//# sourceMappingURL=NotificationFactories.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/errorContext.js

var context = null;
function errorContext(cb) {
    if (config.useDeprecatedSynchronousErrorHandling) {
        var isRoot = !context;
        if (isRoot) {
            context = { errorThrown: false, error: null };
        }
        cb();
        if (isRoot) {
            var _a = context, errorThrown = _a.errorThrown, error = _a.error;
            context = null;
            if (errorThrown) {
                throw error;
            }
        }
    }
    else {
        cb();
    }
}
function captureError(err) {
    if (config.useDeprecatedSynchronousErrorHandling && context) {
        context.errorThrown = true;
        context.error = err;
    }
}
//# sourceMappingURL=errorContext.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subscriber.js









var Subscriber = (function (_super) {
    __extends(Subscriber, _super);
    function Subscriber(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
            _this.destination = destination;
            if (isSubscription(destination)) {
                destination.add(_this);
            }
        }
        else {
            _this.destination = EMPTY_OBSERVER;
        }
        return _this;
    }
    Subscriber.create = function (next, error, complete) {
        return new SafeSubscriber(next, error, complete);
    };
    Subscriber.prototype.next = function (value) {
        if (this.isStopped) {
            handleStoppedNotification(nextNotification(value), this);
        }
        else {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (this.isStopped) {
            handleStoppedNotification(errorNotification(err), this);
        }
        else {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (this.isStopped) {
            handleStoppedNotification(COMPLETE_NOTIFICATION, this);
        }
        else {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
        }
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        try {
            this.destination.error(err);
        }
        finally {
            this.unsubscribe();
        }
    };
    Subscriber.prototype._complete = function () {
        try {
            this.destination.complete();
        }
        finally {
            this.unsubscribe();
        }
    };
    return Subscriber;
}(Subscription));

var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
}
var ConsumerObserver = (function () {
    function ConsumerObserver(partialObserver) {
        this.partialObserver = partialObserver;
    }
    ConsumerObserver.prototype.next = function (value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
            try {
                partialObserver.next(value);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    ConsumerObserver.prototype.error = function (err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
            try {
                partialObserver.error(err);
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
        else {
            handleUnhandledError(err);
        }
    };
    ConsumerObserver.prototype.complete = function () {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
            try {
                partialObserver.complete();
            }
            catch (error) {
                handleUnhandledError(error);
            }
        }
    };
    return ConsumerObserver;
}());
var SafeSubscriber = (function (_super) {
    __extends(SafeSubscriber, _super);
    function SafeSubscriber(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (isFunction_isFunction(observerOrNext) || !observerOrNext) {
            partialObserver = {
                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),
                error: error !== null && error !== void 0 ? error : undefined,
                complete: complete !== null && complete !== void 0 ? complete : undefined,
            };
        }
        else {
            var context_1;
            if (_this && config.useDeprecatedNextContext) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function () { return _this.unsubscribe(); };
                partialObserver = {
                    next: observerOrNext.next && bind(observerOrNext.next, context_1),
                    error: observerOrNext.error && bind(observerOrNext.error, context_1),
                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                };
            }
            else {
                partialObserver = observerOrNext;
            }
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
    }
    return SafeSubscriber;
}(Subscriber));

function handleUnhandledError(error) {
    if (config.useDeprecatedSynchronousErrorHandling) {
        captureError(error);
    }
    else {
        reportUnhandledError(error);
    }
}
function defaultErrorHandler(err) {
    throw err;
}
function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = config.onStoppedNotification;
    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
}
var EMPTY_OBSERVER = {
    closed: true,
    next: noop,
    error: defaultErrorHandler,
    complete: noop,
};
//# sourceMappingURL=Subscriber.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();
//# sourceMappingURL=observable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity_identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/pipe.js

function pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (fns.length === 0) {
        return identity_identity;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Observable.js







var Observable_Observable = (function () {
    function Observable(subscribe) {
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
        errorContext(function () {
            var _a = _this, operator = _a.operator, source = _a.source;
            subscriber.add(operator
                ?
                    operator.call(subscriber, source)
                : source
                    ?
                        _this._subscribe(subscriber)
                    :
                        _this._trySubscribe(subscriber));
        });
        return subscriber;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscriber = new SafeSubscriber({
                next: function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscriber.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve,
            });
            _this.subscribe(subscriber);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable.prototype[observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        return pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
    return value && isFunction_isFunction(value.next) && isFunction_isFunction(value.error) && isFunction_isFunction(value.complete);
}
function isSubscriber(value) {
    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
}
//# sourceMappingURL=Observable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js

var ObjectUnsubscribedError = createErrorClass(function (_super) {
    return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = 'ObjectUnsubscribedError';
        this.message = 'object unsubscribed';
    };
});
//# sourceMappingURL=ObjectUnsubscribedError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/Subject.js






var Subject = (function (_super) {
    __extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype._throwIfClosed = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError();
        }
    };
    Subject.prototype.next = function (value) {
        var _this = this;
        errorContext(function () {
            var e_1, _a;
            _this._throwIfClosed();
            if (!_this.isStopped) {
                if (!_this.currentObservers) {
                    _this.currentObservers = Array.from(_this.observers);
                }
                try {
                    for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var observer = _c.value;
                        observer.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
    };
    Subject.prototype.error = function (err) {
        var _this = this;
        errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.hasError = _this.isStopped = true;
                _this.thrownError = err;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().error(err);
                }
            }
        });
    };
    Subject.prototype.complete = function () {
        var _this = this;
        errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.isStopped = true;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().complete();
                }
            }
        });
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject.prototype, "observed", {
        get: function () {
            var _a;
            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
    });
    Subject.prototype._trySubscribe = function (subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
    };
    Subject.prototype._innerSubscribe = function (subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
            return EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new Subscription(function () {
            _this.currentObservers = null;
            arrRemove(observers, subscriber);
        });
    };
    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
            subscriber.error(thrownError);
        }
        else if (isStopped) {
            subscriber.complete();
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_Observable));

var AnonymousSubject = (function (_super) {
    __extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject.prototype.error = function (err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject.prototype.complete = function () {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject;
}(Subject));

//# sourceMappingURL=Subject.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/entries.js
// `Object.entries` does not use `keyof` types, so it loses type specificity. We'll fix this with a wrapper.
const entries = (o) => Object.entries(o);
//# sourceMappingURL=entries.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/logger/logger.js


/**
 * The subsject is created and overrdien in initLogger().
 * The function has to be called each time new instance of CameraKit is bootstrapped.
 */
let logEntriesSubject = new Subject();
/**
 * This map associates log level names with their corresponding level value.
 * This means that a configured log level will match all log entries with a level value greater than
 * or equal to the configured value.
 */
const logLevelMap = {
    error: 3,
    warn: 2,
    log: 1,
    info: 1,
    debug: 0,
};
/**
 * Initializes new logger subject.
 * @internal
 */
function initLogger() {
    return (logEntriesSubject = new Subject());
}
/**
 * Gets logger for a given module.
 *
 * @internal
 *
 * @param module Module name.
 * @returns Logger instance.
 */
function getLogger(module) {
    return entries(logLevelMap).reduce((logger, [level]) => {
        logger[level] = (...messages) => {
            logEntriesSubject.next({
                time: new Date(),
                module,
                level,
                messages,
            });
        };
        return logger;
    }, {});
}
//# sourceMappingURL=logger.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/retryingHandler.js



const logger = getLogger("retryingHandler");
const logRetry = (responseOrError, sleep) => {
    logger.warn(`Retrying handler got failed response:`, responseOrError, `Waited ${sleep} millis, attempting retry now.`);
};
const sleep = (millis) => new Promise((resolve) => setTimeout(resolve, millis));
const randomInRange = (min, max) => Math.round(Math.random() * (max - min) + min);
const defaultOptions = {
    backoffMultiple: 3,
    baseSleep: 500,
    maxSleep: 5 * 1000,
    // The Response type is very common, so our default predicate special-cases to retry all failed Responses.
    retryPredicate: (responseOrError) => (responseOrError instanceof Response ? !responseOrError.ok : true),
};
/**
 * Returns a cloned instance of Request if the input is of that type, otherwise returns the input unchanged.
 *
 * This is necessary when attempting to retry a request.
 * It is not possible to reuse the same Request instance that has already been sent.
 */
function ensureClonedRequest(input) {
    return input instanceof Request ? input.clone() : input;
}
/**
 * Retry requests using an exponential backoff with jitter strategy.
 *
 * More about this approach to retries can be found
 * [here](https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/). This implementation uses the
 * "Decorrelated jitter" algorithm described in that post. This offers a good tradeoff between call volume and latency,
 * and also allows for convenient configurability.
 *
 * @param options
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const createRetryingHandler = (options = {}) => {
    const definedOptions = copyDefinedProperties(options);
    const { backoffMultiple, baseSleep, maxSleep, retryPredicate } = Object.assign(Object.assign({}, defaultOptions), definedOptions);
    const jitterSleep = (priorSleep) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        const nextSleep = Math.min(maxSleep, randomInRange(baseSleep, priorSleep * backoffMultiple));
        yield sleep(nextSleep);
        return nextSleep;
    });
    const makeRequestAttempt = (next, priorSleep = baseSleep) => (req, metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        try {
            const response = yield next(ensureClonedRequest(req), metadata);
            if (retryPredicate(response)) {
                const nextSleep = yield jitterSleep(priorSleep);
                // The request may have been aborted while we were sleeping. In that case, we'll resolve
                // with the failed response. In many cases this will be ignored, because an AbortError has already
                // been returned to the caller of the Handler chain – but this prevents us from doing
                // any extra work, and there may be edge cases where the caller could find the response useful.
                if ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.aborted)
                    return response;
                logRetry(response, nextSleep);
                return makeRequestAttempt(next, nextSleep)(req, metadata);
            }
            return response;
        }
        catch (error) {
            if (!(error instanceof Error)) {
                throw new Error("Invalid type caught by retrying handler. Handlers may only throw Errors. Got " +
                    `${JSON.stringify(error)}`);
            }
            // If the request fails because it was aborted, we assume this was done intentionally and we can stop.
            if (error.name === "AbortError")
                throw error;
            // If no retry is to be attempted, return the error to the caller.
            if (!retryPredicate(error))
                throw error;
            const nextSleep = yield jitterSleep(priorSleep);
            if ((_b = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _b === void 0 ? void 0 : _b.aborted)
                throw error;
            logRetry(error, nextSleep);
            return makeRequestAttempt(next, nextSleep)(req, metadata);
        }
    });
    return (next) => makeRequestAttempt(next);
};
//# sourceMappingURL=retryingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/noCorsRetryingFetchHandler.js



const noCorsRetryingFetchHandler_logger = getLogger("noCorsRetryingFetchHandler");
const noCorsRetryingFetchHandler_logRetry = (error) => {
    noCorsRetryingFetchHandler_logger.warn(`NoCorsRetrying handler got failed response:`, error, `Retrying request with {mode: "no-cors"}.`);
};
/**
 * Some requests may require a no-cors pre-flight (which are allowed to follow redirects) before they can be
 * successful.
 *
 * An example is a federated identity authentication flow, like OpenID Connect or OAuth. In many such schemes,
 * an unauthenticated request will not include CORs headers. Instead, a redirect to an Identity Provider will be
 * returned. In order follow this redirect, the Fetch request must be made with "no-cors" mode.
 *
 * Once the "no-cors" request is made, redirects are followed resulting in authentication cookies being set on the
 * original domain. Then, the original request can be retried and the server will authenticate the request and set
 * proper CORs headers on the response.
 *
 * Here's an example request flow, in which the page already has cookies for IdentityProvider.com (if that wasn't
 * the case, IdentityProvider.com would prompt the user for credentials and the rest of the flow would be the same):
 *
 * ```
 * WebPage a.com        MyServer b.com    IdentityProvider c.com
 *    |                         |                 |
 * Original request,            |                 |
 * unauthenticated:             |                 |
 *    |------------------------>|                 |
 *    |<--302: c.com, no CORs---|                 |
 *    |                         |                 |
 *    |                         |                 |
 * No CORs headers in           |                 |
 * response. Retry in           |                 |
 * "no-cors" mode:              |                 |
 *    |-----"no-cors" mode----->|                 |
 *    |<--302: c.com, no CORs---|                 |
 *    |                         |                 |
 *    |                         |                 |
 *    |------------------IdP cookies------------->|
 *    |<----------302: b.com?token=foo------------|
 *                              |                 |
 *    |                         |                 |
 *    |----b.com?token=foo----->|                 |
 *    |<-302: b.com, set cookie-|                 |
 *    |                         |                 |
 *    |                         |                 |
 * Retry original request,      |                 |
 * now authenticated:           |                 |
 *    |-----------cookie------->|                 |
 *    |<-----------200----------|                 |
 *                              |                 |
 * ```
 */
const createNoCorsRetryingFetchHandler = () => {
    // If concurrent requests are made to the same domain, we only want to perform one "no-cors" request. We assume
    // requests to the same domain will set the same authentication cookies. To support this, we'll store any
    // in-flight "no-cors" retries and re-use them for concurrent requests.
    const noCorsRequests = new Map();
    return (next) => (input, init = {}) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a;
        // `host` includes domain:port, so works for local development. If the input is a relative path, we'll
        // use `location.origin` to resolve into a fully qualified URL (although of course we don't actually
        // anticipate any CORs issues in that case -- but this is cleaner than special-casing).
        let requestKey = typeof input === "string" ? input : input.url;
        try {
            requestKey = new URL(requestKey, location.origin).host;
        }
        catch (_) {
            /* no-op, use the full input URL as the requestKey */
        }
        try {
            // By always attempting the request first, we avoid needing to maintain any state about the validity
            // of the request (e.g. the expiration time for a credential). We just make the request, and if it
            // fails, this tells us we've made an invalid request. This does result in one additional request, but
            // it makes this much more flexible and avoids having to maintain state (which can be a source of bugs).
            return yield next(ensureClonedRequest(input), init);
        }
        catch (error) {
            // If the request fails because it was aborted, we assume this was done intentionally and we can stop.
            if (error instanceof Error && error.name === "AbortError")
                throw error;
            // Otherwise we don't actually care what error occurred – we know this will be an error thrown by
            // `fetch` itself (rather than some error encountered on the server, which wouldn't cause `next` to
            // throw), and we'll just assume it's a CORs error. If it's not, we'll perform a "no-cors" retry anyway,
            // which will presumably also fail, and that failure will be returned to the caller.
            noCorsRetryingFetchHandler_logRetry(error);
            const noCorsRequest = (_a = noCorsRequests.get(requestKey)) !== null && _a !== void 0 ? _a : next(ensureClonedRequest(input), Object.assign(Object.assign({}, init), { mode: "no-cors" }));
            noCorsRequests.set(requestKey, noCorsRequest);
            yield noCorsRequest;
            noCorsRequests.delete(requestKey);
            return next(ensureClonedRequest(input), init);
        }
    });
};
//# sourceMappingURL=noCorsRetryingFetchHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/timeoutHandler.js


const timeoutHandler_sleep = (millis) => new Promise((resolve) => setTimeout(resolve, millis));
const timeoutHandler_defaultOptions = {
    createError: (request) => {
        // The string and Request types are very common, so our default error creator special-cases those types to
        // provide better error messages.
        const destination = isString(request)
            ? `for ${request}`
            : request instanceof Request
                ? `for ${request.url}`
                : "";
        return new Error(`Request ${destination} timed out by client timeout handler.`);
    },
    timeout: 30 * 1000,
};
/**
 * Timeout requests after a given number of milliseconds, rejecting the Response promise with a custom error.
 *
 * @param options
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const createTimeoutHandler = (options = {}) => {
    const definedOptions = copyDefinedProperties(options);
    const { createError, timeout } = Object.assign(Object.assign({}, timeoutHandler_defaultOptions), definedOptions);
    // If the timeout Promise wins the race, the HandlerChainBuilder sets the abort signal for subsequent handlers. They
    // may look at the abort signal in order to terminate themselves early.
    return (next) => (req, meta) => Promise.race([next(req, meta), timeoutHandler_sleep(timeout).then(() => Promise.reject(createError(req, meta)))]);
};
//# sourceMappingURL=timeoutHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/defaultFetchHandler.js






/**
 * The default Fetch implementation, used to make a simple HTTP requests without any custom headers. This can be passed
 * to `HandlerChainBuilder` to form the basis for other Fetch implementations (e.g. with custom headers, which extract
 * the Response body, etc.)
 *
 * Has support for retries, client-side timeout, and navigating federated auth flows that may not support CORs requests.
 *
 * @internal
 */
const defaultFetchHandlerFactory = Injectable("defaultFetchHandler", () => {
    return (
    // Safety: We're re-typing fetch's second argument from `init?: RequestInit | undefined` to
    // `init: RequestInit | void` – this is semantically equivalent, but the void makes for nicer ergonomics
    // elsewhere (e.g. so that callers can omit the second argument instead of being forced to pass undefined).
    new HandlerChainBuilder(fetch)
        .map(createDebugHandler())
        .map(createNoCorsRetryingFetchHandler())
        .map(createRetryingHandler())
        // TODO: completely arbitrary timeout -- this should be configurable by consumers, and we should think
        // about a sane default timeout UX... it's probably less than 10 seconds.
        .map(createTimeoutHandler({ timeout: 10 * 1000 })).handler);
});
//# sourceMappingURL=defaultFetchHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/locale.js
const locale = navigator.language;
// Below adds qvalue to languages as per a backend issue:
// https://github.sc-corp.net/Snapchat/phantom/pull/196781
// More on qvalues: https://developer.mozilla.org/en-US/docs/Glossary/Quality_values
const fullLocale = navigator.languages
    .map((lang, index) => {
    const qvalue = Math.max(0, (10 - index) / 10);
    return `${lang};q=${qvalue.toFixed(1)}`;
})
    .join(", ");
//# sourceMappingURL=locale.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/cameraKitUserAgent.js



/**
 * Parse the platform (i.e. OS) version.
 *
 * From limited testing, this seems to often produce incorrect results – the userAgent string does not typically include
 * the actual OS version.
 *
 * Better results could be obtained from [NavigatorUAData.getHighEntropyValues]
 * (https://developer.mozilla.org/en-US/docs/Web/API/NavigatorUAData/getHighEntropyValues), but this presents two
 * problems: 1) it's currently only supported on Chrome and 2) browsers may prompt the user for permission to share
 * this information.
 *
 * So, at least for now, we'll be satisfied with the incorrect version number.
 */
function parsePlatformVersion(userAgent) {
    // possible platform version values inside of user agent string
    // " 11;"
    // " 10_15_7)"
    // " 13_5_1 "
    // " 10.0;"
    // " 15_1 "
    const versionMatch = userAgent.match(/\s([\d][\d_.]*[\d])(;|\)|\s)/);
    if (versionMatch != null) {
        return versionMatch[1].replace(/_/g, ".");
    }
    return "";
}
/**
 * In the future, we may invest in more robust device-detection (e.g. a UA string database), but for now this will give
 * us some sense of device usage.
 */
function parseDeviceModel(userAgent) {
    // from user agent like "(Linux; Android 11; Pixel 2)" extact "Pixel 2"
    const userAgentWithModel = userAgent.match(/;[^;]+?;([^\)]+?)\)/);
    if (userAgentWithModel) {
        return userAgentWithModel[1].trim();
    }
    // from user agent like "... (iPad; CPU OS 15_1 like Mac OS X) ..." extract "IPad"
    const userAgentWithModel2 = userAgent.match(/\(([^;]+);/);
    if (userAgentWithModel2) {
        return userAgentWithModel2[1].trim();
    }
    return "unknown";
}
/**
 * Some browsers (e.g. Safari) do not support the `Navigator.userAgentData` API. We'll attempt a sort of polyfill by
 * parsing the data found in [NavigatorUAData](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorUAData) from
 * the raw user agent string.
 */
function parseUserAgentData(userAgent) {
    let brand;
    // Parse UA string for Chromium-based browsers (e.g. Chrome, Edge)
    if (/Chrome/.test(userAgent)) {
        const versionMatch = userAgent.match(/Chrome\/([\d.]+)/);
        brand = {
            brand: "Chrome",
            version: versionMatch !== null ? versionMatch[1] : "unknown",
        };
    }
    // Parse UA string for Safari (very important for this to only be done if Chrome is not found – Chrome userAgent
    // strings will contain "Safari")
    else if (/Safari/.test(userAgent)) {
        let versionMatch = userAgent.match(/Version\/([\d.]+)/);
        if (versionMatch === null)
            versionMatch = userAgent.match(/Safari\/([\d.]+)/);
        brand = {
            brand: "Safari",
            version: versionMatch !== null ? versionMatch[1] : "unknown",
        };
    }
    // Parse UA for unknown browser.
    // TODO: will be changed, default value support should be added on a COF server side.
    else {
        brand = {
            brand: "Firefox",
            version: "0",
        };
    }
    // We're not using `mobile` for anything, and we have no consistent way to determine this from the UA string.
    // We'll set it to false, but this should not be used – instead, we'll need to rely on more sophisticated methods
    // (e.g. a userAgent database) to determine actual device.
    const mobile = false;
    const platform = parsePlaftformName(userAgent);
    return {
        brands: [brand],
        mobile,
        platform,
    };
}
function normalizeBrands(brands) {
    const knownBrands = new Map([
        ["Chrome", "Chrome"],
        ["Chromium", "Chrome"],
        ["Firefox", "Firefox"],
        ["Microsoft Edge", "Chrome"],
        ["Safari", "Safari"],
    ]);
    const normalizedBrands = brands
        .filter(({ brand }) => knownBrands.has(brand))
        .map((brand) => {
        return {
            // Safety: we've filtered out brands which do not appear as keys in `knownBrands`, so this cannot return
            // undefined.
            brand: knownBrands.get(brand.brand),
            version: brand.version,
        };
    });
    // TODO: default "unknown" value should be added on COF server side. For now we'll use Firefox.
    if (normalizedBrands.length === 0)
        return [{ brand: "Firefox", version: "0" }];
    return normalizedBrands;
}
/* eslint-disable max-len */
/**
 * We must ensure the data we get from `navigator.userAgentData` is normalized to match what our backend expects to
 * see in our custom CameraKitWeb userAgent string.
 *
 * This string is defined here:
 * https://github.sc-corp.net/Snapchat/useragent/blob/9333afe7cc6ac00503ad46cb234bcf94006dff98/java/useragent/src/main/java/snapchat/client/UserAgent.java#L124
 */
/* eslint-enable */
function normalizeUserAgentData(userAgentData) {
    return {
        brands: normalizeBrands(userAgentData.brands),
        mobile: userAgentData.mobile,
        platform: parsePlaftformName(userAgentData.platform),
    };
}
function parsePlaftformName(userAgent) {
    const knownPlatforms = new Map([
        ["android", "android"],
        ["linux", "linux"],
        ["iphone os", "ios"],
        ["ipad", "ipados"],
        ["mac os", "macos"],
        ["macos", "macos"],
        ["windows", "windows"],
    ]);
    const normalizedUserAgent = userAgent.toLowerCase();
    for (const [match, platform] of knownPlatforms.entries()) {
        if (normalizedUserAgent.includes(match))
            return platform;
    }
    return "unknown";
}
/**
 * We'll use the application's origin as an identifier – this isn't used for any kind of authentication, but it may be
 * useful metadata to have in the future.
 *
 * We also need to handle cases in which the SDK is used in a child browsing context (e.g. an iframe), which may not
 * have a hostname – in this case we'll check each ancestor context until we find a valid hostname.
 */
function parseApplicationOrigin() {
    var _a, _b, _c;
    let origin = location.hostname;
    // Firefox does not implement ancestorOrigins, so we need a fallback.
    // Context here: https://github.com/whatwg/html/issues/1918
    const ancestorOrigins = location.ancestorOrigins === undefined
        ? typeof window !== "undefined"
            ? [window.parent.origin, (_b = (_a = window.top) === null || _a === void 0 ? void 0 : _a.origin) !== null && _b !== void 0 ? _b : ""]
            : []
        : Array.from((_c = location.ancestorOrigins) !== null && _c !== void 0 ? _c : []);
    while (origin === "" && ancestorOrigins.length > 0) {
        // Safety: ancestorOrigins must contain at least one element, so shift() will always be defined.
        origin = new URL(ancestorOrigins.shift()).hostname;
    }
    return origin;
}
function getCameraKitUserAgent() {
    const userAgent = navigator.userAgent;
    // [NavigatorUAData](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorUAData) is currently only
    // available on Chromium-based browsers – it's nice because it gives us clear, well-documented information. But
    // we'll have to fallback to parsing the userAgent string when it's not available.
    const userAgentData = navigator.userAgentData !== undefined
        ? normalizeUserAgentData(navigator.userAgentData)
        : parseUserAgentData(userAgent);
    const platformVersion = parsePlatformVersion(userAgent);
    const deviceModel = parseDeviceModel(userAgent);
    // In cases where we've parsed the userAgent string to find the brand, there will only ever be a single brand –
    // in browsers which support NavigatorUAData there could be more than one (e.g. Chrome and Chromium), but they
    // should be equivalent for our purposes.
    const browser = userAgentData.brands[0];
    const origin = parseApplicationOrigin();
    const sdkLongVersion = environment_namespaceObject.l;
    // Remove any `-prerelease` or `+buildmetadata` portions from the semver string.
    const sdkShortVersion = sdkLongVersion.replace(/[-+]\S+$/, "");
    // Set this to `debug` manually while testing / root-causing.
    const flavor = "release";
    // This full string is defined here:
    // eslint-disable-next-line max-len
    // https://github.sc-corp.net/Snapchat/useragent/blob/9333afe7cc6ac00503ad46cb234bcf94006dff98/java/useragent/src/main/java/snapchat/client/UserAgent.java#L124
    const cameraKitUserAgent = `CameraKitWeb/${sdkShortVersion} ` +
        `${flavor === "release" ? "" : "DEBUG"}` +
        `(${deviceModel}; ${userAgentData.platform} ${platformVersion}) ` +
        `${browser.brand}/${browser.version} ` +
        `Core/${lensCoreWasmVersions_namespaceObject.i8} ` +
        // We overload appId, using the origin instead of the true appId parsed from the apiToken -- we do this because
        // origin is human-readable, and this is used to populate the appId dimension in operational metrics.
        `AppId/${origin}`;
    return {
        osType: userAgentData.platform,
        osVersion: platformVersion,
        locale: locale,
        sdkShortVersion,
        sdkLongVersion,
        flavor,
        lensCoreVersion: `${lensCoreWasmVersions_namespaceObject.i8}`,
        deviceModel,
        browser,
        origin,
        userAgent: cameraKitUserAgent,
    };
}
/** @internal */
const cameraKitUserAgent = getCameraKitUserAgent();
//# sourceMappingURL=cameraKitUserAgent.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens-core-module/loader/lensCoreFactory.js









const lensCoreFactory_logger = getLogger("lensCoreFactory");
const wasmAssets = ["LensCoreWebAssembly.js", "LensCoreWebAssembly.wasm"];
const findMatch = (regex, strings) => strings.find((s) => regex.test(s));
const PlatformFeatures = {
    Default: 0,
    Simd: 0b01,
    Exceptions: 0b10,
};
const platformFeaturesToFlavour = {
    [PlatformFeatures.Exceptions | PlatformFeatures.Simd]: "rel-simd-neh",
    [PlatformFeatures.Simd]: "release-simd",
    [PlatformFeatures.Exceptions]: "rel-neh",
    [PlatformFeatures.Default]: "release",
};
/**
 * Returns a list of URLs for resources which will be fetched during {@link bootstrapCameraKit}.
 *
 * When CameraKit is used on a website, these URLs much be reachable in order for CameraKit to be successfully
 * bootstrapped.
 *
 * @param endpointOverride Optional endpoint override to load the assets from.
 * @returns An array of asset URLs.
 *
 * @category Bootstrapping and Configuration
 */
function getRequiredBootstrapURLs(endpointOverride) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        // If we have an endpoint override, remove trailing `/` so we can construct a valid URL.
        const endpoint = endpointOverride === null || endpointOverride === void 0 ? void 0 : endpointOverride.replace(/[\/]+$/, "");
        let [simdFeature, exceptionsFeature] = yield Promise.all([
            simd().then((supported) => (supported ? PlatformFeatures.Simd : PlatformFeatures.Default)),
            exceptions().then((supported) => (supported ? PlatformFeatures.Exceptions : PlatformFeatures.Default)),
        ]);
        // Although Safari 16.4 reports SIMD support, LensCore encounters rendering bugs when using SIMD in Safari 16.4.
        // Therefore, we have made the decision to disable SIMD for now until Safari stabilizes the feature.
        const { brand } = cameraKitUserAgent.browser;
        if (brand === "Safari")
            simdFeature = PlatformFeatures.Default;
        const flavor = platformFeaturesToFlavour[simdFeature | exceptionsFeature];
        const version = lensCoreWasmVersions_namespaceObject.i8;
        const buildNumber = lensCoreWasmVersions_namespaceObject.c$;
        return wasmAssets.map((asset) => {
            if (endpoint)
                return `${endpoint}/${asset}`;
            const { origin, pathname, search } = new URL(lensCoreWasmVersions_namespaceObject.FH);
            return `${origin}${pathname}/${version}/${buildNumber}/${flavor}/${asset}${search}`;
        });
    });
}
/**
 * This component is responsible for:
 *   1) Loading LensCore WebAssembly (WASM) assets
 *   2) Using the WASM assets to initialize the LensCore WASM module
 *
 * By default, WASM assets will be loaded from the Bolt CDN – but if `endpoint` is provided, assets will be loaded
 * using it as a base URL.
 *
 * @internal
 */
const lensCoreFactory = Injectable("lensCore", [defaultFetchHandlerFactory.token, configurationToken], (handler, { lensCoreOverrideUrls, wasmEndpointOverride }) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    let lensCoreJS;
    let lensCoreWASM;
    if (lensCoreOverrideUrls) {
        lensCoreJS = lensCoreOverrideUrls.js;
        lensCoreWASM = lensCoreOverrideUrls.wasm;
    }
    else {
        const endpointOverride = wasmEndpointOverride !== null && wasmEndpointOverride !== void 0 ? wasmEndpointOverride : undefined;
        const assetURLs = yield getRequiredBootstrapURLs(endpointOverride);
        lensCoreJS = (_a = findMatch(/\.js/, assetURLs)) !== null && _a !== void 0 ? _a : "";
        lensCoreWASM = (_b = findMatch(/\.wasm/, assetURLs)) !== null && _b !== void 0 ? _b : "";
        if (!lensCoreJS || !lensCoreWASM) {
            throw new Error(`Cannot fetch required LensCore assets. Either the JS or WASM filename is missing from ` +
                `this list: ${assetURLs}`);
        }
        // Fetching here and creating an Object URL lets LensCore optimized loading itself in a WebWorker,
        // otherwise the glue script would need to be downloaded again.
        const glueScript = yield handler(lensCoreJS).then((r) => r.blob());
        lensCoreJS = URL.createObjectURL(glueScript);
    }
    yield loadScript(lensCoreJS);
    const lensCore = yield new Promise((resolve, reject) => {
        let initialModule;
        // will trigger WASM initialization and data loading,
        // after completion it will be safe to call imported WASM functions
        // More about emscripten initialization:
        // eslint-disable-next-line max-len
        // https://emscripten.org/docs/getting_started/FAQ.html?highlight=modularize#how-can-i-tell-when-the-page-is-fully-loaded-and-it-is-safe-to-call-compiled-functions
        const moduleInit = globalThis.createLensesModule((initialModule = {
            // url will be used for loading glue JS during Worker inialization
            mainScriptUrlOrBlob: lensCoreJS,
            // will be triggered by Emscripten during the initialization
            instantiateWasm: (importObject, receiveInstance) => {
                WebAssembly.instantiateStreaming(handler(lensCoreWASM), importObject)
                    .then(function ({ instance, module }) {
                    receiveInstance(instance, module);
                    // compiled module will be reused in Worker
                    initialModule.compiledModule = module;
                    resolve(moduleInit);
                })
                    .catch(reject);
            },
        }));
    });
    // print warning if loaded version differs from hardcoded one
    if (lensCoreWasmVersions_namespaceObject.i8 != `${lensCore.getCoreVersion()}`) {
        lensCoreFactory_logger.warn(`Loaded LensCore version (${lensCore.getCoreVersion()}) differs from expected one (${lensCoreWasmVersions_namespaceObject.i8})`);
    }
    return lensCore;
}));
//# sourceMappingURL=lensCoreFactory.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/namedErrors.js
// NOTE: All errors thrown in the CameraKit package have to be defined here.
// Error types are not infered from error factories for API doc purposes and consistency.
/**
 * Removes the top trace line from the stack.
 */
function cleanErrorStack(stack) {
    const [first, _, ...rest] = stack.split("\n");
    return [first, ...rest].join("\n");
}
/**
 * Creates error factory that ensures Error.prototype.name field value.
 *
 * NOTE: exported only for unit tests.
 *
 * @param name Error name.
 * @returns Error factory function.
 * @internal
 */
function namedError(name) {
    return (message, cause) => {
        const error = new Error(message, { cause });
        error.name = name;
        error.stack = error.stack && cleanErrorStack(error.stack);
        // Safety: we set name above and therefore sure the type of error is correct
        return error;
    };
}
/** @internal */
const legalError = namedError("LegalError");
/** @internal */
const lensContentValidationError = namedError("LensContentValidationError");
/** @internal */
const lensError = namedError("LensError");
/** @internal */
const cameraKitSourceError = namedError("CameraKitSourceError");
/** @internal */
const lensImagePickerError = namedError("LensImagePickerError");
/** @internal */
const cacheKeyNotFoundError = namedError("CacheKeyNotFoundError");
/** @internal */
const configurationError = namedError("ConfigurationError");
/** @internal */
const namedErrors_webGLError = namedError("WebGLError");
/** @internal */
const namedErrors_benchmarkError = namedError("BenchmarkError");
/** @internal */
const platformNotSupportedError = namedError("PlatformNotSupportedError");
/** @internal */
const lensExecutionError = namedError("LensExecutionError");
/** @internal */
const persistentStoreError = namedError("PersistentStoreError");
/** @internal */
const lensAssetError = namedError("LensAssetError");
/** @internal */
const bootstrapError = namedError("BootstrapError");
//# sourceMappingURL=namedErrors.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/benchmark/webglUtils.js

const webGLEntityCreationError = (name) => webGLError(`Could not create ${name}.`);
function webglUtils_createProgram(gl, vertexSource, fragmentSource) {
    const vertexShader = createShader(gl, vertexSource, gl.VERTEX_SHADER);
    const fragmentShader = createShader(gl, fragmentSource, gl.FRAGMENT_SHADER);
    const program = gl.createProgram();
    if (!program)
        throw webGLEntityCreationError("WebGLProgram");
    gl.attachShader(program, vertexShader);
    gl.deleteShader(vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.deleteShader(fragmentShader);
    gl.linkProgram(program);
    const success = gl.getProgramParameter(program, gl.LINK_STATUS);
    if (!success) {
        const message = gl.getProgramInfoLog(program);
        gl.deleteProgram(program);
        throw webGLError(`WebGLProgram linking failed with status: ${message}`);
    }
    return program;
}
function createShader(gl, source, type) {
    const shader = gl.createShader(type);
    if (!shader)
        throw webGLEntityCreationError(`WebGLShader (type ${type})`);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    if (!success) {
        const message = gl.getShaderInfoLog(shader);
        gl.deleteShader(shader);
        throw webGLError(`WebGLShader (type ${type}) compilation failed with status: ${message}`);
    }
    return shader;
}
function webglUtils_createTexture(gl, width, height) {
    const texture = gl.createTexture();
    if (!texture)
        throw webGLEntityCreationError("WebGLTexture");
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    return texture;
}
function webglUtils_createFramebuffer(gl, texture) {
    const framebuffer = gl.createFramebuffer();
    if (!framebuffer)
        throw webGLEntityCreationError("WebGLFramebuffer");
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
    return framebuffer;
}
function webglUtils_setUniform1i(gl, program, name, data) {
    gl.uniform1i(gl.getUniformLocation(program, name), data);
}
function webglUtils_setUniform4f(gl, program, name, data) {
    gl.uniform4f(gl.getUniformLocation(program, name), ...data);
}
function webglUtils_promiseSync(gl) {
    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
    if (!sync)
        throw webGLEntityCreationError("WebGLSync");
    gl.flush();
    return new Promise((resolve, reject) => {
        const waitForSync = () => {
            const glEnum = gl.clientWaitSync(sync, 0, 0);
            switch (glEnum) {
                case gl.TIMEOUT_EXPIRED:
                    setTimeout(waitForSync);
                    return;
                case gl.WAIT_FAILED:
                    gl.deleteSync(sync);
                    return reject();
                case gl.ALREADY_SIGNALED:
                case gl.CONDITION_SATISFIED:
                    gl.deleteSync(sync);
                    return resolve();
            }
        };
        waitForSync();
    });
}
//# sourceMappingURL=webglUtils.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/benchmark/benchmarkGflops.js


const vertexSource = (/* unused pure expression or super */ null && (`#version 300 es

precision mediump float;
precision mediump int;

in vec2 pos;

void main() {
    gl_Position = vec4(pos, 0.0, 1.0);
}
`));
const fragmentSource = (/* unused pure expression or super */ null && (`#version 300 es

precision mediump float;
precision mediump int;

uniform int LOOP_COUNT;
uniform vec4 v0;
uniform vec4 v1;
uniform vec4 v2;

out vec4 fragColor;

#define REPEAT_2(x) x; x
#define REPEAT_4(x) REPEAT_2(x); REPEAT_2(x)
#define REPEAT_8(x) REPEAT_4(x); REPEAT_4(x)
#define REPEAT_16(x) REPEAT_8(x); REPEAT_8(x)
#define REPEAT_32(x) REPEAT_16(x); REPEAT_16(x)

void main() {
    vec4 r = v2;
    for (int i = 0; i < LOOP_COUNT; i++) {
        REPEAT_32(r = r * v1 + v0);
    }
    fragColor = r;
}
`));
const width = 1024;
const height = 1024;
const budgetMs = 300;
const maxLoopCount = 1000;
function prepareBenchmark(gl) {
    const texture = createTexture(gl, width, height);
    const framebuffer = createFramebuffer(gl, texture);
    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    const buffer = gl.createBuffer();
    if (!buffer) {
        throw new Error("Failed to create WebGLBuffer.");
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, 1, -1, -1, 1, -1, 1, 1]), gl.STATIC_DRAW);
    gl.viewport(0, 0, width, height);
    gl.disable(gl.CULL_FACE);
    gl.disable(gl.DEPTH_TEST);
    const program = createProgram(gl, vertexSource, fragmentSource);
    gl.useProgram(program);
    const posLocation = gl.getAttribLocation(program, "pos");
    gl.enableVertexAttribArray(posLocation);
    gl.vertexAttribPointer(posLocation, 2, gl.FLOAT, false, 0, 0);
    setUniform4f(gl, program, "v0", [1.15, 1.23, 1.47, 1.84]);
    setUniform4f(gl, program, "v1", [1.65, 1.22, 1.69, 1.04]);
    setUniform4f(gl, program, "v2", [1.05, 1.3, 1.55, 1.23]);
    return {
        program,
        cleanupBenchmark: () => {
            gl.deleteProgram(program);
            gl.deleteBuffer(buffer);
            gl.deleteFramebuffer(framebuffer);
            gl.deleteTexture(texture);
        },
    };
}
function runBenchmark(gl, program) {
    return __awaiter(this, void 0, void 0, function* () {
        yield promiseSync(gl);
        const start = performance.now();
        const flops = [];
        let loopCount = 20;
        while (true) {
            setUniform1i(gl, program, "LOOP_COUNT", loopCount);
            const iterationStart = performance.now();
            gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);
            yield promiseSync(gl);
            const iterationEnd = performance.now();
            const duration = iterationEnd - iterationStart;
            flops.push(loopCount / duration);
            const remainingBudgetMs = budgetMs - (iterationEnd - start);
            if (remainingBudgetMs < 0)
                break;
            if (loopCount < maxLoopCount) {
                loopCount += remainingBudgetMs < duration ? 10 : (0.6 * loopCount * remainingBudgetMs) / duration;
            }
        }
        const maxFlops = Math.max(...flops) * (8 * 32) * width * height;
        return maxFlops / 1e6;
    });
}
/**
 * These are obtained from historical performance data gathered from end-user devices. Keys are gflops, values are the
 * corresponding performance rating.
 *
 * To compute the performance rating given a gflops value, find the nearest key in this map and look up the rating.
 */
const benchmarkGflops_gflopsClusterCenters = new Map([
    [34, 1],
    [134, 2],
    [385, 3],
    [783, 4],
    [1484, 5],
    [2313, 6],
]);
/**
 * This benchmark is the same that's run on non-web (e.g. native mobile) platforms, and produces results that can be
 * compared to those gathered on those platforms – this allows us to cluster results and determine a performance rating
 * based on historical data gathered elsewhere.
 *
 * @internal
 */
function benchmarkGflops_benchmarkGflops(gl) {
    return __awaiter(this, void 0, void 0, function* () {
        const { program, cleanupBenchmark } = prepareBenchmark(gl);
        const gflops = yield runBenchmark(gl, program);
        cleanupBenchmark();
        return { name: "gflops", value: gflops };
    });
}
//# sourceMappingURL=benchmarkGflops.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/benchmark/estimateLensPerformanceCluster.js



const findNearest = (n, arr) => arr.reduce((a, b) => (Math.abs(a - n) <= Math.abs(b - n) ? a : b));
const webglContextAttributes = {
    alpha: false,
    antialias: false,
    premultipliedAlpha: false,
    preserveDrawingBuffer: false,
    depth: false,
    stencil: false,
    failIfMajorPerformanceCaveat: false,
    powerPreference: "high-performance",
};
/**
 * Run benchmarks which attempt to predict expected lens performance, and assign a cluster (i.e. a performance rating)
 * which the CameraKit SDK can use to optimize certain lenses.
 *
 * @returns A rating from 1-6, indicating expected Lens performance.
 *
 * @category Bootstrapping and Configuration
 */
function estimateLensPerformance() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        // Prepare performance measurement.
        const canvas = document.createElement("canvas");
        const gl = canvas.getContext("webgl2", webglContextAttributes);
        if (!gl)
            throw benchmarkError("WebGL2 is required to compute performance, but it is not supported.");
        const debugInfo = gl.getExtension("WEBGL_debug_renderer_info");
        const webglRendererInfo = debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : "unknown";
        // Measure performance (just GFLOPS for now, but could add more benchmarks in the future).
        const gflops = yield benchmarkGflops(gl);
        // Combine performance results and compute a performance rating. Right now we just run a single benchmark, so this
        // is pretty trivial.
        const nearestGflopsClusterCenter = findNearest(gflops.value, Array.from(gflopsClusterCenters.keys()));
        // This should always find a value, but just in case something strange happens inside `findNearest`, we'll default
        // to zero (instead of asserting .get() will always be defined).
        const gflopsCluster = (_a = gflopsClusterCenters.get(nearestGflopsClusterCenter)) !== null && _a !== void 0 ? _a : 0;
        return {
            cluster: gflopsCluster,
            benchmarks: [gflops],
            webglRendererInfo,
        };
    });
}
//# sourceMappingURL=estimateLensPerformanceCluster.js.map
// EXTERNAL MODULE: ./node_modules/reflect-metadata/Reflect.js
var reflect_metadata_Reflect = __webpack_require__(660);
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/validate.js

const predicateMetadataKey = Symbol("validate");
// A map of primitive types accoring to
/* eslint-disable max-len */
// http://blog.wolksoftware.com/decorators-metadata-reflection-in-typescript-from-novice-to-expert-part-4#3-basic-type-serialization_1
const primitiveMap = {
    string: String,
    number: Number,
    boolean: Boolean,
};
const ordinalSuffixMap = {
    1: "st",
    2: "nd",
    3: "rd",
};
function getArgumentInfo(target, methodName, argumentIndex, arg) {
    var _a;
    let argString;
    try {
        argString = JSON.stringify(arg);
    }
    catch (_b) {
        argString = String(arg);
    }
    return {
        argPosition: `${argumentIndex + 1}${(_a = ordinalSuffixMap[argumentIndex + 1]) !== null && _a !== void 0 ? _a : "th"}`,
        methodPath: `${getTypeName(target)}.${String(methodName)}()`,
        argTypeName: getTypeName(arg),
        argString,
    };
}
function guard(predicate) {
    return (target, propertyKey, parameterIndex) => {
        let existingPredicates = Reflect.getOwnMetadata(predicateMetadataKey, target, propertyKey) || [];
        existingPredicates[parameterIndex] = predicate;
        Reflect.defineMetadata(predicateMetadataKey, existingPredicates, target, propertyKey);
    };
}
function validate_validate(target, key, descriptor) {
    const method = descriptor.value;
    const types = Reflect.getMetadata("design:paramtypes", target, key);
    const predicates = Reflect.getMetadata(predicateMetadataKey, target, key);
    descriptor.value = function (...args) {
        for (const [i, type] of types.entries()) {
            let arg = Array.isArray(args) && args[i];
            if (!!predicates && predicates[i] && !predicates[i](arg)) {
                const { methodPath, argPosition, argString } = getArgumentInfo(target, key, i, arg);
                throw new Error(`The ${argPosition} argument to ${methodPath} method has an invalid value: ${argString}.`);
            }
            if (arg === undefined || arg === null) {
                // TODO: is there a way to check for nullable parameter?
                break;
            }
            if (!isValueOfType(arg, type)) {
                const { methodPath, argPosition, argTypeName } = getArgumentInfo(target, key, i, arg);
                throw new Error(`The ${argPosition} argument to '${methodPath}' method is of type ` +
                    `'${argTypeName}', which is not assignable to parameter of type '${type.name}'.`);
            }
        }
        return method.apply(this, arguments);
    };
}
/**
 * Checks whether given value is assignable to provided type.
 */
function isValueOfType(value, type) {
    if (value instanceof type) {
        return true;
    }
    // test for primitive value
    const isPrimitive = value !== Object(value);
    return isPrimitive && primitiveMap[typeof value] === type;
}
/* eslint-disable max-len */
/**
 * Returns type string of a value. It mostly mimics the behavior of typeof, but for non-primitives
 * (i.e. objects and functions), it returns a more granular type name where possible. Source:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#custom_method_that_gets_a_more_specific_type
 */
function getTypeName(value) {
    if (value === null) {
        return "null";
    }
    const baseType = typeof value;
    // Primitive types
    if (!["object", "function"].includes(baseType)) {
        return baseType;
    }
    // Safety: at this point null and undefined values are already handled
    const nonNullValue = value;
    // Symbol.toStringTag often specifies the "display name" of the
    // object's class. It's used in Object.prototype.toString().
    // Safety: cast to an object with Symbol.toStringTag key in order to check for its existance.
    const tag = nonNullValue[Symbol.toStringTag];
    if (typeof tag === "string") {
        return tag;
    }
    // If it's a function whose source code starts with the "class" keyword
    if (baseType === "function" && Function.prototype.toString.call(nonNullValue).startsWith("class")) {
        return "class";
    }
    // The name of the constructor; for example `Array`, `GeneratorFunction`,
    // `Number`, `String`, `Boolean` or `MyCustomClass`
    const className = nonNullValue.constructor.name;
    if (typeof className === "string" && className !== "") {
        return className;
    }
    // At this point there's no robust way to get the type of value,
    // so we use the base implementation.
    return baseType;
}
//# sourceMappingURL=validate.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/headersModifyingFetchHandler.js
/**
 * Modify a Fetch Request's headers.
 *
 * @param modifyHeaders
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const createHeadersModifyingFetchHandler = (modifyHeaders) => (next) => (input, init) => {
    const headers = init && init.headers
        ? new Headers(init.headers)
        : typeof input === "string"
            ? new Headers()
            : input.headers;
    const modifiedHeaders = modifyHeaders(headers);
    // When `init` contains headers, `fetch` uses these *instead* of any headers found in the `input` Request.
    return next(input, Object.assign(Object.assign({}, init), { headers: modifiedHeaders }));
};
//# sourceMappingURL=headersModifyingFetchHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/cameraKitServiceFetchHandlerFactory.js






/**
 * A Fetch implementation which adds headers required to make authenticated calls to the CameraKit backend service.
 *
 * @internal
 */
const cameraKitServiceFetchHandlerFactory = Injectable("cameraKitServiceFetchHandler", [configurationToken, defaultFetchHandlerFactory.token], ({ apiToken }, defaultFetchHandler) => {
    return new HandlerChainBuilder(defaultFetchHandler).map(createHeadersModifyingFetchHandler((headers) => {
        headers.append("x-snap-client-user-agent", cameraKitUserAgent.userAgent);
        headers.append("authorization", `Bearer ${apiToken}`);
        return headers;
    })).handler;
});
//# sourceMappingURL=cameraKitServiceFetchHandlerFactory.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/extensions/LensSources.js



/**
 * A chain of {@link LensSource} objects to be registered in Camera Kit on bootstrap. Camera Kit evaluates all
 * registered {@link LensSource} objects for a group ownership during Lens retrieval ({@link CameraKit.lenses}).
 * And if a source claims the ownership, its {@link LensSource.getLens} or {@link LensSource.getLensGroup}
 * methods are called.
 */
class LensSources {
    /**
     * Creates an instance of Lens sources.
     * @param fallbackSources A fallback sources if given {@link LensSource} doesn't claim a group ownership.
     * @param source Lens source.
     */
    constructor(fallbackSources, source) {
        this.fallbackSources = fallbackSources;
        this.source = source;
    }
    /**
     * Returns empty LensSources instance.
     * @internal
     */
    static empty() {
        // NOTE: we want to keep LensSources constructor to require arguments
        // but internally we don't need them for the base case
        // @ts-expect-error
        return new LensSources();
    }
    /**
     * Returns envelopes of lens/groups taking into account group ownership.
     * @internal
     * @param groupId A group to test ownership and get lens envelopes of.
     * @param lensId An optional lens ID to narrow envelopes down to a single lens.
     * @returns Envelopes or undefined if not applicable.
     */
    retrieveLenses({ groupId, lensId }) {
        var _a, _b;
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            if ((_a = this.source) === null || _a === void 0 ? void 0 : _a.isGroupOwner(groupId)) {
                return isUndefined(lensId)
                    ? this.source.getLensGroup(groupId)
                    : this.source.getLens(lensId, groupId).then((envelope) => [envelope]);
            }
            return (_b = this.fallbackSources) === null || _b === void 0 ? void 0 : _b.retrieveLenses({ groupId, lensId });
        });
    }
}
const lensSourcesFactory = Injectable("lensSources", () => LensSources.empty());
//# sourceMappingURL=LensSources.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/errorHelpers.js
/**
 * Returns a stack trace for a given error, and also appends the stack trace of any nested error, if one exists.
 * @param error Error to stringify.
 * @returns Error stack trace.
 */
function stringifyError(error) {
    var _a;
    const outer = (_a = error.stack) !== null && _a !== void 0 ? _a : "";
    return error.cause ? `${outer}\nCaused By: ${stringifyError(errorHelpers_ensureError(error.cause))}` : outer;
}
/**
 * If given a value of type Error, return it – otherwise wrap the value in an Error.
 */
function errorHelpers_ensureError(error) {
    if (error instanceof Error)
        return error;
    try {
        return new Error(`Non-Error type exception thrown. Serialized error value: ${JSON.stringify(error)}`);
    }
    catch (_) {
        return new Error("Non-Error type exception thrown. Original error value could not be serialized.");
    }
}
//# sourceMappingURL=errorHelpers.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/time.js
const getTimeMs = () => performance.now();
//# sourceMappingURL=time.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/events/TypedCustomEvent.js
/**
 * This wrapper around CustomEvent provides more descriptive type information. By using this class, the `type` property
 * of the CustomEvent will be typed as a string literal – this allows [TypedEventTarget] to provide more useful type
 * checking of events.
 */
class TypedCustomEvent extends CustomEvent {
    constructor(type, detail, eventInitDict = {}) {
        super(type, Object.assign(Object.assign({}, eventInitDict), { detail }));
    }
}
//# sourceMappingURL=TypedCustomEvent.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/events/TypedEventTarget.js
/**
 * This wrapper around EventTarget provides more descriptive type information. By using this class, calls to EventTarget
 * methods are correctly type checked to ensure only allowed event types are used, and that events and their type
 * strings are correctly associated.
 *
 * For example, when calling TypedEventTarget::addEventListener, the event passed to the callback will have the correct
 * type corresponding to the type of event for which the listener has been added.
 */
class TypedEventTarget {
    constructor() {
        this.listeners = new Map();
        this.options = new Map();
    }
    addEventListener(type, callback, options) {
        var _a;
        // Safety: the type in the method signature ensures the callback handles events of type K, and we use that type
        // as the key when storing the callback – we only ever invoke callbacks obtained by mapping from that event
        // type to the callback, so even though we store the callback with a wider type, we only ever call it with the
        // specific event type specified by K.
        const listener = callback;
        const listeners = (_a = this.listeners.get(type)) !== null && _a !== void 0 ? _a : [];
        this.listeners.set(type, [...listeners, listener]);
        if (options)
            this.options.set(listener, options);
    }
    dispatchEvent(event) {
        const listeners = this.listeners.get(event.type);
        if (!listeners)
            return true;
        listeners.forEach((listener) => {
            var _a;
            const options = (_a = this.options.get(listener)) !== null && _a !== void 0 ? _a : {};
            try {
                listener(event);
            }
            catch (error) {
                // We'll do our best to immitate native behavior, where if a listener throws an error it is caught and
                // emitted as an error event on the window – this might be slightly different from native behavior since
                // we have to use a CustomEvent, but it's as close as we can get.
                if (window)
                    window.dispatchEvent(new CustomEvent("error", { detail: error }));
            }
            if (options.once)
                this.removeEventListener(event.type, listener);
        });
        return true;
    }
    removeEventListener(type, callback) {
        const listener = callback;
        const listeners = this.listeners.get(type);
        if (!listeners)
            return;
        this.listeners.set(type, listeners.filter((l) => l !== listener));
        this.options.delete(listener);
    }
}
//# sourceMappingURL=TypedEventTarget.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/requestStateEmittingHandler.js





let requestId = 0;
const safeParseInt = (str) => {
    if (str == null)
        return 0;
    const maybeInt = parseInt(str);
    return isNaN(maybeInt) ? 0 : maybeInt;
};
const requestStateEventTarget = new TypedEventTarget();
const dispatchRequestStarted = (data) => {
    const started = Object.assign(Object.assign({}, data), { requestId: requestId++, timeMs: getTimeMs() });
    requestStateEventTarget.dispatchEvent(new TypedCustomEvent("started", started));
    return started;
};
const dispatchRequestCompleted = (data) => {
    const completed = Object.assign(Object.assign({}, data), { timeMs: getTimeMs() });
    requestStateEventTarget.dispatchEvent(new TypedCustomEvent("completed", completed));
    return completed;
};
const dispatchRequestErrored = (data) => {
    const errored = Object.assign(Object.assign({}, data), { timeMs: getTimeMs() });
    requestStateEventTarget.dispatchEvent(new TypedCustomEvent("errored", errored));
    return errored;
};
const createRequestStateEmittingHandler = () => (next) => ([request, dimensions], metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    const { requestId } = dispatchRequestStarted({ dimensions });
    try {
        const response = yield next(request, metadata);
        const status = response.status;
        const sizeByte = safeParseInt(response.headers.get("content-length"));
        dispatchRequestCompleted({ requestId, dimensions, status, sizeByte });
        return response;
    }
    catch (error) {
        dispatchRequestErrored({ requestId, dimensions, error: errorHelpers_ensureError(error) });
        throw error;
    }
});
//# sourceMappingURL=requestStateEmittingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/arrayBufferParsingHandler.js

/**
 * Parse a Fetch Response body into an ArrayBuffer.
 *
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const createArrayBufferParsingHandler = () => (next) => (req, metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    const response = yield next(req, metadata);
    let buffer;
    try {
        buffer = yield response.arrayBuffer();
    }
    catch (_) {
        buffer = new ArrayBuffer(0);
    }
    return [buffer, response];
});
//# sourceMappingURL=arrayBufferParsingHandler.js.map
// EXTERNAL MODULE: ./node_modules/long/src/long.js
var src_long = __webpack_require__(720);
var long_default = /*#__PURE__*/__webpack_require__.n(src_long);
// EXTERNAL MODULE: ./node_modules/protobufjs/minimal.js
var minimal = __webpack_require__(100);
var minimal_default = /*#__PURE__*/__webpack_require__.n(minimal);
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/google/protobuf/any.js
/* eslint-disable */


const protobufPackage = "google.protobuf";
function createBaseAny() {
    return { typeUrl: "", value: new Uint8Array() };
}
const Any = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.typeUrl !== "") {
            writer.uint32(10).string(message.typeUrl);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAny();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.typeUrl = reader.string();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            typeUrl: isSet(object.typeUrl) ? String(object.typeUrl) : "",
            value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.typeUrl !== undefined && (obj.typeUrl = message.typeUrl);
        message.value !== undefined &&
            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAny();
        message.typeUrl = (_a = object.typeUrl) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
var any_globalThis = (() => {
    if (typeof any_globalThis !== "undefined")
        return any_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
const atob = any_globalThis.atob || ((b64) => any_globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = any_globalThis.btoa || ((bin) => any_globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(""));
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=any.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/lens.js
/* eslint-disable */



const lens_protobufPackage = "com.snap.camerakit.v3";
/** CameraFacing enum. */
var Lens_CameraFacing;
(function (Lens_CameraFacing) {
    /** CAMERA_FACING_UNSET - unspecified value. */
    Lens_CameraFacing["CAMERA_FACING_UNSET"] = "CAMERA_FACING_UNSET";
    /** CAMERA_FACING_FRONT - camera facing front */
    Lens_CameraFacing["CAMERA_FACING_FRONT"] = "CAMERA_FACING_FRONT";
    /** CAMERA_FACING_BACK - camera facing back */
    Lens_CameraFacing["CAMERA_FACING_BACK"] = "CAMERA_FACING_BACK";
    Lens_CameraFacing["UNRECOGNIZED"] = "UNRECOGNIZED";
})(Lens_CameraFacing || (Lens_CameraFacing = {}));
function lens_CameraFacingFromJSON(object) {
    switch (object) {
        case 0:
        case "CAMERA_FACING_UNSET":
            return Lens_CameraFacing.CAMERA_FACING_UNSET;
        case 1:
        case "CAMERA_FACING_FRONT":
            return Lens_CameraFacing.CAMERA_FACING_FRONT;
        case 2:
        case "CAMERA_FACING_BACK":
            return Lens_CameraFacing.CAMERA_FACING_BACK;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Lens_CameraFacing.UNRECOGNIZED;
    }
}
function lens_CameraFacingToJSON(object) {
    switch (object) {
        case Lens_CameraFacing.CAMERA_FACING_UNSET:
            return "CAMERA_FACING_UNSET";
        case Lens_CameraFacing.CAMERA_FACING_FRONT:
            return "CAMERA_FACING_FRONT";
        case Lens_CameraFacing.CAMERA_FACING_BACK:
            return "CAMERA_FACING_BACK";
        default:
            return "UNKNOWN";
    }
}
function lens_CameraFacingToNumber(object) {
    switch (object) {
        case Lens_CameraFacing.CAMERA_FACING_UNSET:
            return 0;
        case Lens_CameraFacing.CAMERA_FACING_FRONT:
            return 1;
        case Lens_CameraFacing.CAMERA_FACING_BACK:
            return 2;
        default:
            return 0;
    }
}
/** Manifest type */
var LensAssetManifestItem_Type;
(function (LensAssetManifestItem_Type) {
    /** DEVICE_DEPENDENT_ASSET_UNSET - Device dependent asset */
    LensAssetManifestItem_Type["DEVICE_DEPENDENT_ASSET_UNSET"] = "DEVICE_DEPENDENT_ASSET_UNSET";
    /** ASSET - Device independent asset */
    LensAssetManifestItem_Type["ASSET"] = "ASSET";
    LensAssetManifestItem_Type["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LensAssetManifestItem_Type || (LensAssetManifestItem_Type = {}));
function lensAssetManifestItem_TypeFromJSON(object) {
    switch (object) {
        case 0:
        case "DEVICE_DEPENDENT_ASSET_UNSET":
            return LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET;
        case 1:
        case "ASSET":
            return LensAssetManifestItem_Type.ASSET;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LensAssetManifestItem_Type.UNRECOGNIZED;
    }
}
function lensAssetManifestItem_TypeToJSON(object) {
    switch (object) {
        case LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET:
            return "DEVICE_DEPENDENT_ASSET_UNSET";
        case LensAssetManifestItem_Type.ASSET:
            return "ASSET";
        default:
            return "UNKNOWN";
    }
}
function lensAssetManifestItem_TypeToNumber(object) {
    switch (object) {
        case LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET:
            return 0;
        case LensAssetManifestItem_Type.ASSET:
            return 1;
        default:
            return 0;
    }
}
/** Manifest request timing */
var LensAssetManifestItem_RequestTiming;
(function (LensAssetManifestItem_RequestTiming) {
    /** PRELOAD_UNSET - Preload request timing */
    LensAssetManifestItem_RequestTiming["PRELOAD_UNSET"] = "PRELOAD_UNSET";
    /** ON_DEMAND - On demand request timing */
    LensAssetManifestItem_RequestTiming["ON_DEMAND"] = "ON_DEMAND";
    /** REQUIRED - Required request timing */
    LensAssetManifestItem_RequestTiming["REQUIRED"] = "REQUIRED";
    LensAssetManifestItem_RequestTiming["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LensAssetManifestItem_RequestTiming || (LensAssetManifestItem_RequestTiming = {}));
function lensAssetManifestItem_RequestTimingFromJSON(object) {
    switch (object) {
        case 0:
        case "PRELOAD_UNSET":
            return LensAssetManifestItem_RequestTiming.PRELOAD_UNSET;
        case 1:
        case "ON_DEMAND":
            return LensAssetManifestItem_RequestTiming.ON_DEMAND;
        case 2:
        case "REQUIRED":
            return LensAssetManifestItem_RequestTiming.REQUIRED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LensAssetManifestItem_RequestTiming.UNRECOGNIZED;
    }
}
function lensAssetManifestItem_RequestTimingToJSON(object) {
    switch (object) {
        case LensAssetManifestItem_RequestTiming.PRELOAD_UNSET:
            return "PRELOAD_UNSET";
        case LensAssetManifestItem_RequestTiming.ON_DEMAND:
            return "ON_DEMAND";
        case LensAssetManifestItem_RequestTiming.REQUIRED:
            return "REQUIRED";
        default:
            return "UNKNOWN";
    }
}
function lensAssetManifestItem_RequestTimingToNumber(object) {
    switch (object) {
        case LensAssetManifestItem_RequestTiming.PRELOAD_UNSET:
            return 0;
        case LensAssetManifestItem_RequestTiming.ON_DEMAND:
            return 1;
        case LensAssetManifestItem_RequestTiming.REQUIRED:
            return 2;
        default:
            return 0;
    }
}
function createBaseLens() {
    return {
        id: "",
        name: "",
        vendorData: {},
        content: undefined,
        isThirdParty: false,
        cameraFacingPreference: Lens_CameraFacing.CAMERA_FACING_UNSET,
        featureMetadata: [],
        lensCreator: undefined,
    };
}
const Lens = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    const entry3 = Lens_VendorDataEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.vendorData[entry3.key] = entry3.value;
                    }
                    break;
                case 4:
                    message.content = Content.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.isThirdParty = reader.bool();
                    break;
                case 6:
                    message.cameraFacingPreference = lens_CameraFacingFromJSON(reader.int32());
                    break;
                case 7:
                    message.featureMetadata.push(Any.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.lensCreator = LensCreator.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: lens_isSet(object.id) ? String(object.id) : "",
            name: lens_isSet(object.name) ? String(object.name) : "",
            vendorData: isObject(object.vendorData)
                ? Object.entries(object.vendorData).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            content: lens_isSet(object.content) ? Content.fromJSON(object.content) : undefined,
            isThirdParty: lens_isSet(object.isThirdParty) ? Boolean(object.isThirdParty) : false,
            cameraFacingPreference: lens_isSet(object.cameraFacingPreference)
                ? lens_CameraFacingFromJSON(object.cameraFacingPreference)
                : Lens_CameraFacing.CAMERA_FACING_UNSET,
            featureMetadata: Array.isArray(object === null || object === void 0 ? void 0 : object.featureMetadata)
                ? object.featureMetadata.map((e) => Any.fromJSON(e))
                : [],
            lensCreator: lens_isSet(object.lensCreator) ? LensCreator.fromJSON(object.lensCreator) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        obj.vendorData = {};
        if (message.vendorData) {
            Object.entries(message.vendorData).forEach(([k, v]) => {
                obj.vendorData[k] = v;
            });
        }
        message.content !== undefined && (obj.content = message.content ? Content.toJSON(message.content) : undefined);
        message.isThirdParty !== undefined && (obj.isThirdParty = message.isThirdParty);
        message.cameraFacingPreference !== undefined &&
            (obj.cameraFacingPreference = lens_CameraFacingToJSON(message.cameraFacingPreference));
        if (message.featureMetadata) {
            obj.featureMetadata = message.featureMetadata.map((e) => (e ? Any.toJSON(e) : undefined));
        }
        else {
            obj.featureMetadata = [];
        }
        message.lensCreator !== undefined &&
            (obj.lensCreator = message.lensCreator ? LensCreator.toJSON(message.lensCreator) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseLens();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.vendorData = Object.entries((_c = object.vendorData) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.content =
            object.content !== undefined && object.content !== null ? Content.fromPartial(object.content) : undefined;
        message.isThirdParty = (_d = object.isThirdParty) !== null && _d !== void 0 ? _d : false;
        message.cameraFacingPreference = (_e = object.cameraFacingPreference) !== null && _e !== void 0 ? _e : Lens_CameraFacing.CAMERA_FACING_UNSET;
        message.featureMetadata = ((_f = object.featureMetadata) === null || _f === void 0 ? void 0 : _f.map((e) => Any.fromPartial(e))) || [];
        message.lensCreator =
            object.lensCreator !== undefined && object.lensCreator !== null
                ? LensCreator.fromPartial(object.lensCreator)
                : undefined;
        return message;
    },
};
function createBaseLens_VendorDataEntry() {
    return { key: "", value: "" };
}
const Lens_VendorDataEntry = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLens_VendorDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: lens_isSet(object.key) ? String(object.key) : "",
            value: lens_isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseLens_VendorDataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseContent() {
    return {
        lnsUrl: "",
        lnsSha256: "",
        iconUrl: "",
        preview: undefined,
        assetManifest: [],
        defaultHintId: "",
        hintTranslations: {},
        lnsUrlBolt: "",
        iconUrlBolt: "",
    };
}
const Content = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lnsUrl = reader.string();
                    break;
                case 2:
                    message.lnsSha256 = reader.string();
                    break;
                case 3:
                    message.iconUrl = reader.string();
                    break;
                case 4:
                    message.preview = Preview.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.assetManifest.push(LensAssetManifestItem.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.defaultHintId = reader.string();
                    break;
                case 7:
                    const entry7 = Content_HintTranslationsEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.hintTranslations[entry7.key] = entry7.value;
                    }
                    break;
                case 8:
                    message.lnsUrlBolt = reader.string();
                    break;
                case 9:
                    message.iconUrlBolt = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            lnsUrl: lens_isSet(object.lnsUrl) ? String(object.lnsUrl) : "",
            lnsSha256: lens_isSet(object.lnsSha256) ? String(object.lnsSha256) : "",
            iconUrl: lens_isSet(object.iconUrl) ? String(object.iconUrl) : "",
            preview: lens_isSet(object.preview) ? Preview.fromJSON(object.preview) : undefined,
            assetManifest: Array.isArray(object === null || object === void 0 ? void 0 : object.assetManifest)
                ? object.assetManifest.map((e) => LensAssetManifestItem.fromJSON(e))
                : [],
            defaultHintId: lens_isSet(object.defaultHintId) ? String(object.defaultHintId) : "",
            hintTranslations: isObject(object.hintTranslations)
                ? Object.entries(object.hintTranslations).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            lnsUrlBolt: lens_isSet(object.lnsUrlBolt) ? String(object.lnsUrlBolt) : "",
            iconUrlBolt: lens_isSet(object.iconUrlBolt) ? String(object.iconUrlBolt) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.lnsUrl !== undefined && (obj.lnsUrl = message.lnsUrl);
        message.lnsSha256 !== undefined && (obj.lnsSha256 = message.lnsSha256);
        message.iconUrl !== undefined && (obj.iconUrl = message.iconUrl);
        message.preview !== undefined && (obj.preview = message.preview ? Preview.toJSON(message.preview) : undefined);
        if (message.assetManifest) {
            obj.assetManifest = message.assetManifest.map((e) => (e ? LensAssetManifestItem.toJSON(e) : undefined));
        }
        else {
            obj.assetManifest = [];
        }
        message.defaultHintId !== undefined && (obj.defaultHintId = message.defaultHintId);
        obj.hintTranslations = {};
        if (message.hintTranslations) {
            Object.entries(message.hintTranslations).forEach(([k, v]) => {
                obj.hintTranslations[k] = v;
            });
        }
        message.lnsUrlBolt !== undefined && (obj.lnsUrlBolt = message.lnsUrlBolt);
        message.iconUrlBolt !== undefined && (obj.iconUrlBolt = message.iconUrlBolt);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseContent();
        message.lnsUrl = (_a = object.lnsUrl) !== null && _a !== void 0 ? _a : "";
        message.lnsSha256 = (_b = object.lnsSha256) !== null && _b !== void 0 ? _b : "";
        message.iconUrl = (_c = object.iconUrl) !== null && _c !== void 0 ? _c : "";
        message.preview =
            object.preview !== undefined && object.preview !== null ? Preview.fromPartial(object.preview) : undefined;
        message.assetManifest = ((_d = object.assetManifest) === null || _d === void 0 ? void 0 : _d.map((e) => LensAssetManifestItem.fromPartial(e))) || [];
        message.defaultHintId = (_e = object.defaultHintId) !== null && _e !== void 0 ? _e : "";
        message.hintTranslations = Object.entries((_f = object.hintTranslations) !== null && _f !== void 0 ? _f : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.lnsUrlBolt = (_g = object.lnsUrlBolt) !== null && _g !== void 0 ? _g : "";
        message.iconUrlBolt = (_h = object.iconUrlBolt) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseContent_HintTranslationsEntry() {
    return { key: "", value: "" };
}
const Content_HintTranslationsEntry = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContent_HintTranslationsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: lens_isSet(object.key) ? String(object.key) : "",
            value: lens_isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseContent_HintTranslationsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseLensAssetManifestItem() {
    return {
        type: LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET,
        id: "",
        requestTiming: LensAssetManifestItem_RequestTiming.PRELOAD_UNSET,
        assetUrl: "",
        assetChecksum: "",
    };
}
const LensAssetManifestItem = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLensAssetManifestItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = lensAssetManifestItem_TypeFromJSON(reader.int32());
                    break;
                case 2:
                    message.id = reader.string();
                    break;
                case 3:
                    message.requestTiming = lensAssetManifestItem_RequestTimingFromJSON(reader.int32());
                    break;
                case 4:
                    message.assetUrl = reader.string();
                    break;
                case 5:
                    message.assetChecksum = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: lens_isSet(object.type)
                ? lensAssetManifestItem_TypeFromJSON(object.type)
                : LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET,
            id: lens_isSet(object.id) ? String(object.id) : "",
            requestTiming: lens_isSet(object.requestTiming)
                ? lensAssetManifestItem_RequestTimingFromJSON(object.requestTiming)
                : LensAssetManifestItem_RequestTiming.PRELOAD_UNSET,
            assetUrl: lens_isSet(object.assetUrl) ? String(object.assetUrl) : "",
            assetChecksum: lens_isSet(object.assetChecksum) ? String(object.assetChecksum) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = lensAssetManifestItem_TypeToJSON(message.type));
        message.id !== undefined && (obj.id = message.id);
        message.requestTiming !== undefined &&
            (obj.requestTiming = lensAssetManifestItem_RequestTimingToJSON(message.requestTiming));
        message.assetUrl !== undefined && (obj.assetUrl = message.assetUrl);
        message.assetChecksum !== undefined && (obj.assetChecksum = message.assetChecksum);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseLensAssetManifestItem();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET;
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.requestTiming = (_c = object.requestTiming) !== null && _c !== void 0 ? _c : LensAssetManifestItem_RequestTiming.PRELOAD_UNSET;
        message.assetUrl = (_d = object.assetUrl) !== null && _d !== void 0 ? _d : "";
        message.assetChecksum = (_e = object.assetChecksum) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBasePreview() {
    return { imageUrl: "" };
}
const Preview = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePreview();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.imageUrl = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            imageUrl: lens_isSet(object.imageUrl) ? String(object.imageUrl) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.imageUrl !== undefined && (obj.imageUrl = message.imageUrl);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePreview();
        message.imageUrl = (_a = object.imageUrl) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseLensCreator() {
    return { displayName: "" };
}
const LensCreator = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLensCreator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.displayName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            displayName: lens_isSet(object.displayName) ? String(object.displayName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.displayName !== undefined && (obj.displayName = message.displayName);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLensCreator();
        message.displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function lens_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=lens.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/logger/errorLoggingDecorator.js
/**
 * Creates a class member decorator that logs errors thrown during the member invocation.
 * If the member returns a Promise, promise rejections are handled.
 * Any caught errors are re-thrown.
 * @param logger The logger to report errors to.
 * @return A decorator function.
 */
function errorLoggingDecorator(logger) {
    const handleError = (error) => logger.error(error);
    return function (_target, _propertyKey, descriptor) {
        const methodName = descriptor.value ? "value" : "get";
        const originalMethod = descriptor[methodName];
        descriptor[methodName] = function (...args) {
            try {
                // "this" refers to original scope this function is called in
                const result = originalMethod.apply(this, args);
                if (result instanceof Promise) {
                    // in case of a promise we don't return our promise chain
                    // that logs an error because we want callers to handle the error as well
                    result.catch(handleError);
                }
                return result;
            }
            catch (error) {
                handleError(error);
                throw error;
            }
        };
        return descriptor;
    };
}
//# sourceMappingURL=errorLoggingDecorator.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/assertions.js
/**
 * Assert a particular code path is unreachable, e.g. to perform a compile-time exhaustiveness check.
 *
 * Ex:
 * ```ts
 * interface A { type: 'a' }
 * interface B { type: 'b' }
 * type TaggedUnion = A | B
 *
 * function exhaustiveSwitch(value: TaggedUnion) {
 *   switch (value.type) {
 *     case 'a': // do something with A
 *     case 'b': // do something with B
 *     // this will fail to compile if we add another type to TaggedUnion and forget to add a corresponding case
 *     // to the switch statement.
 *     default: assertUnreachable(value)
 *   }
 * }
 * ```
 */
function assertUnreachable(_) {
    throw new Error("Reached unreachable code at runtime.");
}
/**
 * Assert that a condition is true. Otherwise, throws an error.
 * @param condition Condition to test.
 * @param error Optional error message or error instance to throw.
 */
function assert(condition, error = "Assertion failed") {
    if (!condition) {
        if (error instanceof Error) {
            throw error;
        }
        else {
            throw new Error(error);
        }
    }
}
//# sourceMappingURL=assertions.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/Lens.js


function isLensArray(value) {
    return isArrayOfType(isLens, value);
}
function isLens(value) {
    return (isRecord(value) &&
        isString(value.id) &&
        isString(value.name) &&
        (isUndefined(value.iconUrl) || isString(value.iconUrl)) &&
        isRecord(value.vendorData) &&
        predicateRecordValues(isString)(value.vendorData) &&
        isString(value.cameraFacingPreference) &&
        (isUndefined(value.preview) || isPreview(value.preview)) &&
        (isUndefined(value.lensCreator) || isLensCreator(value.lensCreator)));
}
function isLensProto(value) {
    return (isRecord(value) &&
        isString(value.id) &&
        isString(value.name) &&
        isRecord(value.vendorData) &&
        predicateRecordValues(isString)(value.vendorData) &&
        (typeof value.content === "undefined" || isLensContent(value.content)));
}
function isPreview(value) {
    return isRecord(value) && isString(value.imageUrl);
}
function isLensCreator(value) {
    return isRecord(value) && isString(value.displayName);
}
function isLensContent(value) {
    return (isRecord(value) &&
        isString(value.iconUrlBolt) &&
        isString(value.lnsSha256) &&
        isString(value.lnsUrlBolt) &&
        isRecord(value.preview) &&
        isString(value.preview.imageUrl));
}
function isGetGroupResponse(value) {
    return isRecord(value) && isString(value.id) && Array.isArray(value.lenses) && value.lenses.every(isLensProto);
}
/**
 * Converts lens proto to a public lens object.
 * @param lens Lens proto
 * @returns Public lens object.
 *
 * @internal
 */
function toPublicLens({ id, name, content, vendorData, cameraFacingPreference, lensCreator }) {
    var _a;
    assert(isEmptyOrSafeUrl(content === null || content === void 0 ? void 0 : content.iconUrlBolt), "Unsafe icon URL");
    assert(isEmptyOrSafeUrl((_a = content === null || content === void 0 ? void 0 : content.preview) === null || _a === void 0 ? void 0 : _a.imageUrl), "Unsafe preview URL");
    return {
        id,
        name,
        iconUrl: content === null || content === void 0 ? void 0 : content.iconUrlBolt,
        preview: content === null || content === void 0 ? void 0 : content.preview,
        vendorData,
        cameraFacingPreference,
        lensCreator,
    };
}
//# sourceMappingURL=Lens.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/lensHttpUtil.js


const BASE_PATH = "https://api-kit.snapchat.com/com.snap.camerakit.v3.Lenses";
function getRequestId(res) {
    return res.headers.get("x-request-id");
}
function retrieveCameraKitLens(httpClient, lensId, groupId) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        const url = [BASE_PATH, "groups", groupId, "lenses", lensId].join("/");
        const response = yield httpClient(url, { credentials: "include" });
        const body = yield response.json();
        const lens = body.lens;
        if (!isLensProto(lens)) {
            throw new Error(`Expected request to ${url} to return a Lens. Got:\n\n${JSON.stringify(body)} with request-id of "${getRequestId(response)}"`);
        }
        return lens;
    });
}
function retrieveCameraKitLensGroup(httpClient, groupId) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        const url = [BASE_PATH, "groups", groupId].join("/");
        const response = yield httpClient(url, { credentials: "include" });
        const body = yield response.json();
        if (!isGetGroupResponse(body)) {
            throw new Error(`Expected request to ${url} to return a LensGroup. Got:\n\n${JSON.stringify(body)} with request-id of "${getRequestId(response)}"`);
        }
        return body.lenses;
    });
}
//# sourceMappingURL=lensHttpUtil.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/export.js
/* eslint-disable */



const export_protobufPackage = "com.snap.camerakit.v3";
/** Extension enum specifies list of supported extensions */
var ExportLensesByIdRequest_Context_Extension_Name;
(function (ExportLensesByIdRequest_Context_Extension_Name) {
    /** UNSET - UNSET value */
    ExportLensesByIdRequest_Context_Extension_Name["UNSET"] = "UNSET";
    /** SHOP_KIT - Shopkit */
    ExportLensesByIdRequest_Context_Extension_Name["SHOP_KIT"] = "SHOP_KIT";
    ExportLensesByIdRequest_Context_Extension_Name["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ExportLensesByIdRequest_Context_Extension_Name || (ExportLensesByIdRequest_Context_Extension_Name = {}));
function exportLensesByIdRequest_Context_Extension_NameFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return ExportLensesByIdRequest_Context_Extension_Name.UNSET;
        case 1:
        case "SHOP_KIT":
            return ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ExportLensesByIdRequest_Context_Extension_Name.UNRECOGNIZED;
    }
}
function exportLensesByIdRequest_Context_Extension_NameToNumber(object) {
    switch (object) {
        case ExportLensesByIdRequest_Context_Extension_Name.UNSET:
            return 0;
        case ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT:
            return 1;
        default:
            return 0;
    }
}
var ExportLensesByIdResponse_ExcludedLens_Code;
(function (ExportLensesByIdResponse_ExcludedLens_Code) {
    /** UNSET - for linter */
    ExportLensesByIdResponse_ExcludedLens_Code["UNSET"] = "UNSET";
    /** UNKNOWN - reason unknown */
    ExportLensesByIdResponse_ExcludedLens_Code["UNKNOWN"] = "UNKNOWN";
    /** NOT_FOUND - lens not found */
    ExportLensesByIdResponse_ExcludedLens_Code["NOT_FOUND"] = "NOT_FOUND";
    /** INCOMPATIBLE_LENS_CORE_VERSION - client has core version less than  core version of the lens */
    ExportLensesByIdResponse_ExcludedLens_Code["INCOMPATIBLE_LENS_CORE_VERSION"] = "INCOMPATIBLE_LENS_CORE_VERSION";
    /** ARCHIVED_OR_INVISIBLE - Lens archived or excluded due to visibility */
    ExportLensesByIdResponse_ExcludedLens_Code["ARCHIVED_OR_INVISIBLE"] = "ARCHIVED_OR_INVISIBLE";
    /** CONTAINS_MUSIC - lens contains music and cannot be provided by CameraKit */
    ExportLensesByIdResponse_ExcludedLens_Code["CONTAINS_MUSIC"] = "CONTAINS_MUSIC";
    ExportLensesByIdResponse_ExcludedLens_Code["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ExportLensesByIdResponse_ExcludedLens_Code || (ExportLensesByIdResponse_ExcludedLens_Code = {}));
function exportLensesByIdResponse_ExcludedLens_CodeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return ExportLensesByIdResponse_ExcludedLens_Code.UNSET;
        case 1:
        case "UNKNOWN":
            return ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN;
        case 2:
        case "NOT_FOUND":
            return ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND;
        case 3:
        case "INCOMPATIBLE_LENS_CORE_VERSION":
            return ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION;
        case 4:
        case "ARCHIVED_OR_INVISIBLE":
            return ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE;
        case 5:
        case "CONTAINS_MUSIC":
            return ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ExportLensesByIdResponse_ExcludedLens_Code.UNRECOGNIZED;
    }
}
function exportLensesByIdResponse_ExcludedLens_CodeToNumber(object) {
    switch (object) {
        case ExportLensesByIdResponse_ExcludedLens_Code.UNSET:
            return 0;
        case ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN:
            return 1;
        case ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND:
            return 2;
        case ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION:
            return 3;
        case ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE:
            return 4;
        case ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC:
            return 5;
        default:
            return 0;
    }
}
function createBaseExportLensesByIdRequest() {
    return { unlockableIds: [], context: undefined };
}
const ExportLensesByIdRequest = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.unlockableIds.push(longToNumber(reader.int64()));
                        }
                    }
                    else {
                        message.unlockableIds.push(longToNumber(reader.int64()));
                    }
                    break;
                case 2:
                    message.context = ExportLensesByIdRequest_Context.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExportLensesByIdRequest();
        message.unlockableIds = ((_a = object.unlockableIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.context =
            object.context !== undefined && object.context !== null
                ? ExportLensesByIdRequest_Context.fromPartial(object.context)
                : undefined;
        return message;
    },
};
function createBaseExportLensesByIdRequest_Context() {
    return {
        userAgent: "",
        locale: "",
        extention: undefined,
        extension: undefined,
        extensionRequestContext: new Uint8Array(),
    };
}
const ExportLensesByIdRequest_Context = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest_Context();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userAgent = reader.string();
                    break;
                case 2:
                    message.locale = reader.string();
                    break;
                case 3:
                    message.extention = ExportLensesByIdRequest_Context_Extension.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.extension = ExportLensesByIdRequest_Context_Extension.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.extensionRequestContext = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExportLensesByIdRequest_Context();
        message.userAgent = (_a = object.userAgent) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.extention =
            object.extention !== undefined && object.extention !== null
                ? ExportLensesByIdRequest_Context_Extension.fromPartial(object.extention)
                : undefined;
        message.extension =
            object.extension !== undefined && object.extension !== null
                ? ExportLensesByIdRequest_Context_Extension.fromPartial(object.extension)
                : undefined;
        message.extensionRequestContext = (_c = object.extensionRequestContext) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
function createBaseExportLensesByIdRequest_Context_Extension() {
    return { name: ExportLensesByIdRequest_Context_Extension_Name.UNSET, version: "" };
}
const ExportLensesByIdRequest_Context_Extension = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest_Context_Extension();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = exportLensesByIdRequest_Context_Extension_NameFromJSON(reader.int32());
                    break;
                case 2:
                    message.version = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExportLensesByIdRequest_Context_Extension();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : ExportLensesByIdRequest_Context_Extension_Name.UNSET;
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseExportLensesByIdResponse() {
    return { lenses: {}, excludedLenses: [] };
}
const ExportLensesByIdResponse = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = ExportLensesByIdResponse_LensesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.lenses[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    message.excludedLenses.push(ExportLensesByIdResponse_ExcludedLens.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExportLensesByIdResponse();
        message.lenses = Object.entries((_a = object.lenses) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[Number(key)] = value;
            }
            return acc;
        }, {});
        message.excludedLenses =
            ((_b = object.excludedLenses) === null || _b === void 0 ? void 0 : _b.map((e) => ExportLensesByIdResponse_ExcludedLens.fromPartial(e))) || [];
        return message;
    },
};
function createBaseExportLensesByIdResponse_LensesEntry() {
    return { key: 0, value: new Uint8Array() };
}
const ExportLensesByIdResponse_LensesEntry = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse_LensesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = longToNumber(reader.int64());
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExportLensesByIdResponse_LensesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBaseExportLensesByIdResponse_ExcludedLens() {
    return { lensId: 0, code: ExportLensesByIdResponse_ExcludedLens_Code.UNSET, reason: "" };
}
const ExportLensesByIdResponse_ExcludedLens = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse_ExcludedLens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lensId = longToNumber(reader.int64());
                    break;
                case 2:
                    message.code = exportLensesByIdResponse_ExcludedLens_CodeFromJSON(reader.int32());
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExportLensesByIdResponse_ExcludedLens();
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : 0;
        message.code = (_b = object.code) !== null && _b !== void 0 ? _b : ExportLensesByIdResponse_ExcludedLens_Code.UNSET;
        message.reason = (_c = object.reason) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseExtensionRequestContext() {
    return { userAgent: "", locale: "" };
}
const ExtensionRequestContext = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.userAgent !== "") {
            writer.uint32(10).string(message.userAgent);
        }
        if (message.locale !== "") {
            writer.uint32(18).string(message.locale);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtensionRequestContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userAgent = reader.string();
                    break;
                case 2:
                    message.locale = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExtensionRequestContext();
        message.userAgent = (_a = object.userAgent) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEnvelope() {
    return { lenses: [] };
}
const Envelope = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvelope();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lenses.push(Lens.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEnvelope();
        message.lenses = ((_a = object.lenses) === null || _a === void 0 ? void 0 : _a.map((e) => Lens.fromPartial(e))) || [];
        return message;
    },
};
var export_globalThis = (() => {
    if (typeof export_globalThis !== "undefined")
        return export_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new export_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=export.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/lensEnvelopeUtil.js

/**
 * @internal
 */
function decodeEnvelope(envelope) {
    try {
        return Envelope.decode(new Uint8Array(envelope)).lenses;
    }
    catch (_a) {
        throw new Error("Invalid lens envelope");
    }
}
/**
 * @internal
 */
function decodeEnvelopes(envelopes) {
    return envelopes.reduce((lenses, envelope) => [...lenses, ...decodeEnvelope(envelope)], []);
}
//# sourceMappingURL=lensEnvelopeUtil.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens-core-module/loader/index.js

//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens-core-module/index.js


//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/metricsEventTarget.js


/**
 * Any metrics that we wish to emit to applications should be dispatched on this event target.
 *
 * Our business events reporter also listens to this event target, and may report the emitted metrics to our backend.
 *
 * @internal
 */
const metricsEventTargetFactory = Injectable("metricsEventTarget", () => new TypedEventTarget());
//# sourceMappingURL=metricsEventTarget.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/EmptyError.js

var EmptyError = createErrorClass(function (_super) { return function EmptyErrorImpl() {
    _super(this);
    this.name = 'EmptyError';
    this.message = 'no elements in sequence';
}; });
//# sourceMappingURL=EmptyError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/firstValueFrom.js


function firstValueFrom(source, config) {
    var hasConfig = typeof config === 'object';
    return new Promise(function (resolve, reject) {
        var subscriber = new SafeSubscriber({
            next: function (value) {
                resolve(value);
                subscriber.unsubscribe();
            },
            error: reject,
            complete: function () {
                if (hasConfig) {
                    resolve(config.defaultValue);
                }
                else {
                    reject(new EmptyError());
                }
            },
        });
        source.subscribe(subscriber);
    });
}
//# sourceMappingURL=firstValueFrom.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isPromise.js

function isPromise(value) {
    return isFunction_isFunction(value === null || value === void 0 ? void 0 : value.then);
}
//# sourceMappingURL=isPromise.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js


function isInteropObservable(input) {
    return isFunction_isFunction(input[observable]);
}
//# sourceMappingURL=isInteropObservable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js

function isAsyncIterable(obj) {
    return Symbol.asyncIterator && isFunction_isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
//# sourceMappingURL=isAsyncIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
//# sourceMappingURL=throwUnobservableError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var iterator_iterator = getSymbolIterator();
//# sourceMappingURL=iterator.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isIterable.js


function isIterable(input) {
    return isFunction_isFunction(input === null || input === void 0 ? void 0 : input[iterator_iterator]);
}
//# sourceMappingURL=isIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js


function readableStreamLikeToAsyncGenerator(readableStream) {
    return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    reader = readableStream.getReader();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, , 9, 10]);
                    _b.label = 2;
                case 2:
                    if (false) {}
                    return [4, __await(reader.read())];
                case 3:
                    _a = _b.sent(), value = _a.value, done = _a.done;
                    if (!done) return [3, 5];
                    return [4, __await(void 0)];
                case 4: return [2, _b.sent()];
                case 5: return [4, __await(value)];
                case 6: return [4, _b.sent()];
                case 7:
                    _b.sent();
                    return [3, 2];
                case 8: return [3, 10];
                case 9:
                    reader.releaseLock();
                    return [7];
                case 10: return [2];
            }
        });
    });
}
function isReadableStreamLike(obj) {
    return isFunction_isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
//# sourceMappingURL=isReadableStreamLike.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js












function innerFrom_innerFrom(input) {
    if (input instanceof Observable_Observable) {
        return input;
    }
    if (input != null) {
        if (isInteropObservable(input)) {
            return fromInteropObservable(input);
        }
        if (isArrayLike(input)) {
            return fromArrayLike(input);
        }
        if (isPromise(input)) {
            return fromPromise(input);
        }
        if (isAsyncIterable(input)) {
            return fromAsyncIterable(input);
        }
        if (isIterable(input)) {
            return fromIterable(input);
        }
        if (isReadableStreamLike(input)) {
            return fromReadableStreamLike(input);
        }
    }
    throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
    return new Observable_Observable(function (subscriber) {
        var obs = obj[observable]();
        if (isFunction_isFunction(obs.subscribe)) {
            return obs.subscribe(subscriber);
        }
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    });
}
function fromArrayLike(array) {
    return new Observable_Observable(function (subscriber) {
        for (var i = 0; i < array.length && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    });
}
function fromPromise(promise) {
    return new Observable_Observable(function (subscriber) {
        promise
            .then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, reportUnhandledError);
    });
}
function fromIterable(iterable) {
    return new Observable_Observable(function (subscriber) {
        var e_1, _a;
        try {
            for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                var value = iterable_1_1.value;
                subscriber.next(value);
                if (subscriber.closed) {
                    return;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        subscriber.complete();
    });
}
function fromAsyncIterable(asyncIterable) {
    return new Observable_Observable(function (subscriber) {
        process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
    });
}
function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return tslib_es6_awaiter(this, void 0, void 0, function () {
        var value, e_2_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, 6, 11]);
                    asyncIterable_1 = __asyncValues(asyncIterable);
                    _b.label = 1;
                case 1: return [4, asyncIterable_1.next()];
                case 2:
                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                    value = asyncIterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return [2];
                    }
                    _b.label = 3;
                case 3: return [3, 1];
                case 4: return [3, 11];
                case 5:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3, 11];
                case 6:
                    _b.trys.push([6, , 9, 10]);
                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                    return [4, _a.call(asyncIterable_1)];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8: return [3, 10];
                case 9:
                    if (e_2) throw e_2.error;
                    return [7];
                case 10: return [7];
                case 11:
                    subscriber.complete();
                    return [2];
            }
        });
    });
}
//# sourceMappingURL=innerFrom.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js


function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = (function (_super) {
    __extends(OperatorSubscriber, _super);
    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext
            ? function (value) {
                try {
                    onNext(value);
                }
                catch (err) {
                    destination.error(err);
                }
            }
            : _super.prototype._next;
        _this._error = onError
            ? function (err) {
                try {
                    onError(err);
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._error;
        _this._complete = onComplete
            ? function () {
                try {
                    onComplete();
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._complete;
        return _this;
    }
    OperatorSubscriber.prototype.unsubscribe = function () {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
    };
    return OperatorSubscriber;
}(Subscriber));

//# sourceMappingURL=OperatorSubscriber.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/lift.js

function hasLift(source) {
    return isFunction_isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
    return function (source) {
        if (hasLift(source)) {
            return source.lift(function (liftedSource) {
                try {
                    return init(liftedSource, this);
                }
                catch (err) {
                    this.error(err);
                }
            });
        }
        throw new TypeError('Unable to lift unknown Observable type');
    };
}
//# sourceMappingURL=lift.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/catchError.js



function catchError(selector) {
    return operate(function (source, subscriber) {
        var innerSub = null;
        var syncUnsub = false;
        var handledResult;
        innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
            handledResult = innerFrom_innerFrom(selector(err, catchError(selector)(source)));
            if (innerSub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            }
            else {
                syncUnsub = true;
            }
        }));
        if (syncUnsub) {
            innerSub.unsubscribe();
            innerSub = null;
            handledResult.subscribe(subscriber);
        }
    });
}
//# sourceMappingURL=catchError.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/map.js


function map(project, thisArg) {
    return operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            subscriber.next(project.call(thisArg, value, index++));
        }));
    });
}
//# sourceMappingURL=map.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) { delay = 0; }
    if (repeat === void 0) { repeat = false; }
    var scheduleSubscription = scheduler.schedule(function () {
        work();
        if (repeat) {
            parentSubscription.add(this.schedule(null, delay));
        }
        else {
            this.unsubscribe();
        }
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
        return scheduleSubscription;
    }
}
//# sourceMappingURL=executeSchedule.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js



function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function () {
        if (isComplete && !buffer.length && !active) {
            subscriber.complete();
        }
    };
    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
    var doInnerSub = function (value) {
        expand && subscriber.next(value);
        active++;
        var innerComplete = false;
        innerFrom_innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {
            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
            if (expand) {
                outerNext(innerValue);
            }
            else {
                subscriber.next(innerValue);
            }
        }, function () {
            innerComplete = true;
        }, undefined, function () {
            if (innerComplete) {
                try {
                    active--;
                    var _loop_1 = function () {
                        var bufferedValue = buffer.shift();
                        if (innerSubScheduler) {
                            executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                        }
                        else {
                            doInnerSub(bufferedValue);
                        }
                    };
                    while (buffer.length && active < concurrent) {
                        _loop_1();
                    }
                    checkComplete();
                }
                catch (err) {
                    subscriber.error(err);
                }
            }
        }));
    };
    source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {
        isComplete = true;
        checkComplete();
    }));
    return function () {
        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
}
//# sourceMappingURL=mergeInternals.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js





function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    if (isFunction_isFunction(resultSelector)) {
        return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom_innerFrom(project(a, i))); }, concurrent);
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
}
//# sourceMappingURL=mergeMap.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/observeOn.js



function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return operate(function (source, subscriber) {
        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
    });
}
//# sourceMappingURL=observeOn.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js

function subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return operate(function (source, subscriber) {
        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
    });
}
//# sourceMappingURL=subscribeOn.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js



function scheduleObservable(input, scheduler) {
    return innerFrom_innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
//# sourceMappingURL=scheduleObservable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js



function schedulePromise(input, scheduler) {
    return innerFrom_innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}
//# sourceMappingURL=schedulePromise.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js

function scheduleArray(input, scheduler) {
    return new Observable_Observable(function (subscriber) {
        var i = 0;
        return scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
            }
            else {
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    this.schedule();
                }
            }
        });
    });
}
//# sourceMappingURL=scheduleArray.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js




function scheduleIterable(input, scheduler) {
    return new Observable_Observable(function (subscriber) {
        var iterator;
        executeSchedule(subscriber, scheduler, function () {
            iterator = input[iterator_iterator]();
            executeSchedule(subscriber, scheduler, function () {
                var _a;
                var value;
                var done;
                try {
                    (_a = iterator.next(), value = _a.value, done = _a.done);
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                }
            }, 0, true);
        });
        return function () { return isFunction_isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };
    });
}
//# sourceMappingURL=scheduleIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js


function scheduleAsyncIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new Observable_Observable(function (subscriber) {
        executeSchedule(subscriber, scheduler, function () {
            var iterator = input[Symbol.asyncIterator]();
            executeSchedule(subscriber, scheduler, function () {
                iterator.next().then(function (result) {
                    if (result.done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(result.value);
                    }
                });
            }, 0, true);
        });
    });
}
//# sourceMappingURL=scheduleAsyncIterable.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js


function scheduleReadableStreamLike(input, scheduler) {
    return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}
//# sourceMappingURL=scheduleReadableStreamLike.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js













function scheduled(input, scheduler) {
    if (input != null) {
        if (isInteropObservable(input)) {
            return scheduleObservable(input, scheduler);
        }
        if (isArrayLike(input)) {
            return scheduleArray(input, scheduler);
        }
        if (isPromise(input)) {
            return schedulePromise(input, scheduler);
        }
        if (isAsyncIterable(input)) {
            return scheduleAsyncIterable(input, scheduler);
        }
        if (isIterable(input)) {
            return scheduleIterable(input, scheduler);
        }
        if (isReadableStreamLike(input)) {
            return scheduleReadableStreamLike(input, scheduler);
        }
    }
    throw createInvalidObservableTypeError(input);
}
//# sourceMappingURL=scheduled.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/from.js


function from_from(input, scheduler) {
    return scheduler ? scheduled(input, scheduler) : innerFrom_innerFrom(input);
}
//# sourceMappingURL=from.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider = {
    now: function () {
        return (dateTimestampProvider.delegate || Date).now();
    },
    delegate: undefined,
};
//# sourceMappingURL=dateTimestampProvider.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js



var ReplaySubject = (function (_super) {
    __extends(ReplaySubject, _super);
    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) { _bufferSize = Infinity; }
        if (_windowTime === void 0) { _windowTime = Infinity; }
        if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
    }
    ReplaySubject.prototype.next = function (value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
            _buffer.push(value);
            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
            subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
    };
    ReplaySubject.prototype._trimBuffer = function () {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
            var now = _timestampProvider.now();
            var last = 0;
            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                last = i;
            }
            last && _buffer.splice(0, last + 1);
        }
    };
    return ReplaySubject;
}(Subject));

//# sourceMappingURL=ReplaySubject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/share.js





function share(options) {
    if (options === void 0) { options = {}; }
    var _a = options.connector, connector = _a === void 0 ? function () { return new Subject(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
    return function (wrapperSource) {
        var connection;
        var resetConnection;
        var subject;
        var refCount = 0;
        var hasCompleted = false;
        var hasErrored = false;
        var cancelReset = function () {
            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
            resetConnection = undefined;
        };
        var reset = function () {
            cancelReset();
            connection = subject = undefined;
            hasCompleted = hasErrored = false;
        };
        var resetAndUnsubscribe = function () {
            var conn = connection;
            reset();
            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
        };
        return operate(function (source, subscriber) {
            refCount++;
            if (!hasErrored && !hasCompleted) {
                cancelReset();
            }
            var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());
            subscriber.add(function () {
                refCount--;
                if (refCount === 0 && !hasErrored && !hasCompleted) {
                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
                }
            });
            dest.subscribe(subscriber);
            if (!connection &&
                refCount > 0) {
                connection = new SafeSubscriber({
                    next: function (value) { return dest.next(value); },
                    error: function (err) {
                        hasErrored = true;
                        cancelReset();
                        resetConnection = handleReset(reset, resetOnError, err);
                        dest.error(err);
                    },
                    complete: function () {
                        hasCompleted = true;
                        cancelReset();
                        resetConnection = handleReset(reset, resetOnComplete);
                        dest.complete();
                    },
                });
                innerFrom_innerFrom(source).subscribe(connection);
            }
        })(wrapperSource);
    };
}
function handleReset(reset, on) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (on === true) {
        reset();
        return;
    }
    if (on === false) {
        return;
    }
    var onSubscriber = new SafeSubscriber({
        next: function () {
            onSubscriber.unsubscribe();
            reset();
        },
    });
    return on.apply(void 0, __spreadArray([], __read(args))).subscribe(onSubscriber);
}
//# sourceMappingURL=share.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js


function shareReplay(configOrBufferSize, windowTime, scheduler) {
    var _a, _b, _c;
    var bufferSize;
    var refCount = false;
    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
        (_a = configOrBufferSize.bufferSize, bufferSize = _a === void 0 ? Infinity : _a, _b = configOrBufferSize.windowTime, windowTime = _b === void 0 ? Infinity : _b, _c = configOrBufferSize.refCount, refCount = _c === void 0 ? false : _c, scheduler = configOrBufferSize.scheduler);
    }
    else {
        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);
    }
    return share({
        connector: function () { return new ReplaySubject(bufferSize, windowTime, scheduler); },
        resetOnError: true,
        resetOnComplete: false,
        resetOnRefCountZero: refCount,
    });
}
//# sourceMappingURL=shareReplay.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/empty.js

var EMPTY = new Observable_Observable(function (subscriber) { return subscriber.complete(); });
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/take.js



function take(count) {
    return count <= 0
        ?
            function () { return EMPTY; }
        : operate(function (source, subscriber) {
            var seen = 0;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                if (++seen <= count) {
                    subscriber.next(value);
                    if (count <= seen) {
                        subscriber.complete();
                    }
                }
            }));
        });
}
//# sourceMappingURL=take.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/namespace.js
/* eslint-disable */


const namespace_protobufPackage = "snapchat.cdp.cof";
/** Namespace for grouping COF entities. */
var Namespace;
(function (Namespace) {
    Namespace[Namespace["DEFAULT"] = 0] = "DEFAULT";
    Namespace[Namespace["LENS_CORE"] = 64] = "LENS_CORE";
    Namespace[Namespace["CAMERA_KIT_CORE"] = 65] = "CAMERA_KIT_CORE";
    Namespace[Namespace["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Namespace || (Namespace = {}));
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=namespace.js.map
// EXTERNAL MODULE: ./node_modules/browser-headers/dist/browser-headers.umd.js
var browser_headers_umd = __webpack_require__(84);
// EXTERNAL MODULE: ./node_modules/@improbable-eng/grpc-web/dist/grpc-web-client.umd.js
var grpc_web_client_umd = __webpack_require__(37);
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/google/protobuf/timestamp.js
/* eslint-disable */


const timestamp_protobufPackage = "google.protobuf";
function createBaseTimestamp() {
    return { seconds: 0, nanos: 0 };
}
const Timestamp = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.seconds !== 0) {
            writer.uint32(8).int64(message.seconds);
        }
        if (message.nanos !== 0) {
            writer.uint32(16).int32(message.nanos);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimestamp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.seconds = timestamp_longToNumber(reader.int64());
                    break;
                case 2:
                    message.nanos = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            seconds: timestamp_isSet(object.seconds) ? Number(object.seconds) : 0,
            nanos: timestamp_isSet(object.nanos) ? Number(object.nanos) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.seconds !== undefined && (obj.seconds = Math.round(message.seconds));
        message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTimestamp();
        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : 0;
        message.nanos = (_b = object.nanos) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
var timestamp_globalThis = (() => {
    if (typeof timestamp_globalThis !== "undefined")
        return timestamp_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function timestamp_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new timestamp_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
function timestamp_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=timestamp.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/benchmark.js
/* eslint-disable */



const benchmark_protobufPackage = "snapchat.cdp.cof";
function createBaseBenchmarkValue() {
    return { intValue: undefined, longValue: undefined, boolValue: undefined, floatValue: undefined };
}
const BenchmarkValue = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.intValue !== undefined) {
            writer.uint32(8).int32(message.intValue);
        }
        if (message.longValue !== undefined) {
            writer.uint32(16).int64(message.longValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(24).bool(message.boolValue);
        }
        if (message.floatValue !== undefined) {
            writer.uint32(37).float(message.floatValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBenchmarkValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.intValue = reader.int32();
                    break;
                case 2:
                    message.longValue = benchmark_longToNumber(reader.int64());
                    break;
                case 3:
                    message.boolValue = reader.bool();
                    break;
                case 4:
                    message.floatValue = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseBenchmarkValue();
        message.intValue = (_a = object.intValue) !== null && _a !== void 0 ? _a : undefined;
        message.longValue = (_b = object.longValue) !== null && _b !== void 0 ? _b : undefined;
        message.boolValue = (_c = object.boolValue) !== null && _c !== void 0 ? _c : undefined;
        message.floatValue = (_d = object.floatValue) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBaseBenchmarkRequest() {
    return { benchmarkNames: [], expirationTimestamp: undefined };
}
const BenchmarkRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.benchmarkNames) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.expirationTimestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.expirationTimestamp), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBenchmarkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.benchmarkNames.push(reader.int32());
                        }
                    }
                    else {
                        message.benchmarkNames.push(reader.int32());
                    }
                    break;
                case 2:
                    message.expirationTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBenchmarkRequest();
        message.benchmarkNames = ((_a = object.benchmarkNames) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.expirationTimestamp = (_b = object.expirationTimestamp) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseBenchmarkResult() {
    return { name: 0, value: undefined };
}
const BenchmarkResult = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.name !== 0) {
            writer.uint32(8).int32(message.name);
        }
        if (message.value !== undefined) {
            BenchmarkValue.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBenchmarkResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.int32();
                    break;
                case 2:
                    message.value = BenchmarkValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBenchmarkResult();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : 0;
        message.value =
            object.value !== undefined && object.value !== null ? BenchmarkValue.fromPartial(object.value) : undefined;
        return message;
    },
};
var benchmark_globalThis = (() => {
    if (typeof benchmark_globalThis !== "undefined")
        return benchmark_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function benchmark_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new benchmark_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=benchmark.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/common/ruid.js
/* eslint-disable */


const ruid_protobufPackage = "snapchat.common";
/** Randomization units supported for allocation */
var Ruid_Type;
(function (Ruid_Type) {
    /** UNSET - Unknown type */
    Ruid_Type[Ruid_Type["UNSET"] = 0] = "UNSET";
    /** USER - Snapchat user ID */
    Ruid_Type[Ruid_Type["USER"] = 1] = "USER";
    /** DEVICE - Config device ID */
    Ruid_Type[Ruid_Type["DEVICE"] = 2] = "DEVICE";
    /** WEB_CLIENT - Web client ID */
    Ruid_Type[Ruid_Type["WEB_CLIENT"] = 3] = "WEB_CLIENT";
    /** AD_ACCOUNT - Ad account ID */
    Ruid_Type[Ruid_Type["AD_ACCOUNT"] = 4] = "AD_ACCOUNT";
    /** USERNAME - Snapchat username (legacy only) */
    Ruid_Type[Ruid_Type["USERNAME"] = 5] = "USERNAME";
    /** AD_MODERATION_AD - Ad Id used by Ad Moderation backend. */
    Ruid_Type[Ruid_Type["AD_MODERATION_AD"] = 6] = "AD_MODERATION_AD";
    /** WEB_SNAPCHAT_USER - Snapchat user id used on web. */
    Ruid_Type[Ruid_Type["WEB_SNAPCHAT_USER"] = 7] = "WEB_SNAPCHAT_USER";
    /** INTERNAL - Internal test RUID, internal use only and no analysis. */
    Ruid_Type[Ruid_Type["INTERNAL"] = 8] = "INTERNAL";
    /** AM_ORGANIZATION - Ads Manager organization ID */
    Ruid_Type[Ruid_Type["AM_ORGANIZATION"] = 9] = "AM_ORGANIZATION";
    /** AM_MEMBER - Ads Manager member ID */
    Ruid_Type[Ruid_Type["AM_MEMBER"] = 10] = "AM_MEMBER";
    /** AM_SESSION - Ads Manager session ID */
    Ruid_Type[Ruid_Type["AM_SESSION"] = 11] = "AM_SESSION";
    /** AM_PROFILE - Ads Manager profile ID */
    Ruid_Type[Ruid_Type["AM_PROFILE"] = 12] = "AM_PROFILE";
    /** AM_SNAPCHAT_USER - Snapchat user ID on Ads Manager */
    Ruid_Type[Ruid_Type["AM_SNAPCHAT_USER"] = 13] = "AM_SNAPCHAT_USER";
    /** SNAPCHAT_ADVERTISING - Snapchat Advertising ID for Budget A/B */
    Ruid_Type[Ruid_Type["SNAPCHAT_ADVERTISING"] = 14] = "SNAPCHAT_ADVERTISING";
    /** AM_CLIENT - Ads Manager client ID */
    Ruid_Type[Ruid_Type["AM_CLIENT"] = 15] = "AM_CLIENT";
    /** MISCHIEF - Mischief id for group chat */
    Ruid_Type[Ruid_Type["MISCHIEF"] = 16] = "MISCHIEF";
    Ruid_Type[Ruid_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Ruid_Type || (Ruid_Type = {}));
function createBaseRuid() {
    return { type: 0, stringValue: "", loggingIdValue: "" };
}
const Ruid = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.stringValue !== "") {
            writer.uint32(18).string(message.stringValue);
        }
        if (message.loggingIdValue !== "") {
            writer.uint32(26).string(message.loggingIdValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRuid();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.stringValue = reader.string();
                    break;
                case 3:
                    message.loggingIdValue = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseRuid();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.stringValue = (_b = object.stringValue) !== null && _b !== void 0 ? _b : "";
        message.loggingIdValue = (_c = object.loggingIdValue) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=ruid.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/google/protobuf/wrappers.js
/* eslint-disable */


const wrappers_protobufPackage = "google.protobuf";
function createBaseDoubleValue() {
    return { value: 0 };
}
const DoubleValue = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(9).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDoubleValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDoubleValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseFloatValue() {
    return { value: 0 };
}
const FloatValue = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(13).float(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFloatValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseFloatValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseInt64Value() {
    return { value: 0 };
}
const Int64Value = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(8).int64(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInt64Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = wrappers_longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseInt64Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseUInt64Value() {
    return { value: 0 };
}
const UInt64Value = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(8).uint64(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUInt64Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = wrappers_longToNumber(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUInt64Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseInt32Value() {
    return { value: 0 };
}
const Int32Value = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(8).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInt32Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseInt32Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseUInt32Value() {
    return { value: 0 };
}
const UInt32Value = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(8).uint32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUInt32Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUInt32Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseBoolValue() {
    return { value: false };
}
const BoolValue = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.value === true) {
            writer.uint32(8).bool(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBoolValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBoolValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseStringValue() {
    return { value: "" };
}
const StringValue = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStringValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStringValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseBytesValue() {
    return { value: new Uint8Array() };
}
const BytesValue = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.value.length !== 0) {
            writer.uint32(10).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBytesValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBytesValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
var wrappers_globalThis = (() => {
    if (typeof wrappers_globalThis !== "undefined")
        return wrappers_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function wrappers_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new wrappers_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=wrappers.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/config_request.js
/* eslint-disable */





const config_request_protobufPackage = "snapchat.cdp.cof";
/** Indicates what was the state of the app when the config sync was triggered */
var ConfigTargetingTriggerEventType;
(function (ConfigTargetingTriggerEventType) {
    /** UNKNOWN_EVENT_TYPE - Unknown */
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["UNKNOWN_EVENT_TYPE"] = 0] = "UNKNOWN_EVENT_TYPE";
    /** COLD_START - Deprecated because of simplification to FG/BG */
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["COLD_START"] = 1] = "COLD_START";
    /** WARM_START - Deprecated because of simplification to FG/BG */
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["WARM_START"] = 2] = "WARM_START";
    /** FOREGROUND_TRIGGER - Triggered when application is in the foreground */
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["FOREGROUND_TRIGGER"] = 3] = "FOREGROUND_TRIGGER";
    /** BACKGROUND_TRIGGER - Triggered when application is backgrounded */
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["BACKGROUND_TRIGGER"] = 4] = "BACKGROUND_TRIGGER";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigTargetingTriggerEventType || (ConfigTargetingTriggerEventType = {}));
/**
 * Indicates what was the state of the app when the config sync happens
 * The enum is also used as a dynamic client property to populate feature signals
 */
var ConfigTargetingAppState;
(function (ConfigTargetingAppState) {
    /** UNKNOWN_APP_STATE - Unknown */
    ConfigTargetingAppState[ConfigTargetingAppState["UNKNOWN_APP_STATE"] = 0] = "UNKNOWN_APP_STATE";
    /** FOREGROUND - Foreground */
    ConfigTargetingAppState[ConfigTargetingAppState["FOREGROUND"] = 1] = "FOREGROUND";
    /** BACKGROUND - Background */
    ConfigTargetingAppState[ConfigTargetingAppState["BACKGROUND"] = 2] = "BACKGROUND";
    ConfigTargetingAppState[ConfigTargetingAppState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigTargetingAppState || (ConfigTargetingAppState = {}));
/**
 * We expect this enum to be updated whenever there is a new sync instrumentation: This will help us isolate new changes on
 * server side to avoid post mortems like https://snapchat.quip.com/xGnVAcsBrOeC
 */
var ConfigTargetingInstrumentation;
(function (ConfigTargetingInstrumentation) {
    /** DEFAULT_INSTRUMENTATION - Default */
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["DEFAULT_INSTRUMENTATION"] = 0] = "DEFAULT_INSTRUMENTATION";
    /** USER_AUTHENTICATION - User logged in */
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["USER_AUTHENTICATION"] = 1] = "USER_AUTHENTICATION";
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigTargetingInstrumentation || (ConfigTargetingInstrumentation = {}));
/** NetworkType */
var Connectivity_NetworkType;
(function (Connectivity_NetworkType) {
    /** UNKNOWN_NETWORK_TYPE - Unknown */
    Connectivity_NetworkType[Connectivity_NetworkType["UNKNOWN_NETWORK_TYPE"] = 0] = "UNKNOWN_NETWORK_TYPE";
    /** CELLULAR - Cellular */
    Connectivity_NetworkType[Connectivity_NetworkType["CELLULAR"] = 1] = "CELLULAR";
    /** WIFI - Wifi */
    Connectivity_NetworkType[Connectivity_NetworkType["WIFI"] = 2] = "WIFI";
    Connectivity_NetworkType[Connectivity_NetworkType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Connectivity_NetworkType || (Connectivity_NetworkType = {}));
function createBaseConfigTargetingRequest() {
    return {
        configResultsEtag: "",
        namespaces: [],
        ghostId: "",
        countryCode: "",
        screenWidth: 0,
        screenHeight: 0,
        connectivity: undefined,
        maxVideoWidthPx: 0,
        maxVideoHeightPx: 0,
        benchmarkResults: [],
        deltaSync: false,
        userAgent: "",
        triggerEventType: 0,
        appState: 0,
        locale: "",
        deviceId: "",
        userId: "",
        clientIp: "",
        isUnAuthorized: false,
        appLocale: "",
        instrumentation: 0,
        lastSuccessfulSync: 0,
        isLogout: false,
        packageInstaller: "",
        syncTriggerBlizzardSessionId: "",
        syncExecutionBlizzardSessionId: "",
        cofSyncTriggerDelayFromStartupMs: 0,
        cofSyncExecutionDelayFromStartupMs: 0,
        syncTriggerTime: 0,
        decoderEncoderAvailability: undefined,
        snapkitAppId: "",
        lenscoreVersion: 0,
        ruid: undefined,
        configNames: [],
        includeTestUserTreatments: false,
        disableExposureLogging: false,
        lensClusterOrig4: 0,
        clientId: "",
    };
}
const ConfigTargetingRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.configResultsEtag !== "") {
            writer.uint32(10).string(message.configResultsEtag);
        }
        writer.uint32(18).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.ghostId !== "") {
            writer.uint32(26).string(message.ghostId);
        }
        if (message.countryCode !== "") {
            writer.uint32(34).string(message.countryCode);
        }
        if (message.screenWidth !== 0) {
            writer.uint32(40).int32(message.screenWidth);
        }
        if (message.screenHeight !== 0) {
            writer.uint32(48).int32(message.screenHeight);
        }
        if (message.connectivity !== undefined) {
            Connectivity.encode(message.connectivity, writer.uint32(58).fork()).ldelim();
        }
        if (message.maxVideoWidthPx !== 0) {
            writer.uint32(64).int32(message.maxVideoWidthPx);
        }
        if (message.maxVideoHeightPx !== 0) {
            writer.uint32(72).int32(message.maxVideoHeightPx);
        }
        for (const v of message.benchmarkResults) {
            BenchmarkResult.encode(v, writer.uint32(82).fork()).ldelim();
        }
        if (message.deltaSync === true) {
            writer.uint32(88).bool(message.deltaSync);
        }
        if (message.userAgent !== "") {
            writer.uint32(98).string(message.userAgent);
        }
        if (message.triggerEventType !== 0) {
            writer.uint32(104).int32(message.triggerEventType);
        }
        if (message.appState !== 0) {
            writer.uint32(112).int32(message.appState);
        }
        if (message.locale !== "") {
            writer.uint32(122).string(message.locale);
        }
        if (message.deviceId !== "") {
            writer.uint32(130).string(message.deviceId);
        }
        if (message.userId !== "") {
            writer.uint32(138).string(message.userId);
        }
        if (message.clientIp !== "") {
            writer.uint32(146).string(message.clientIp);
        }
        if (message.isUnAuthorized === true) {
            writer.uint32(152).bool(message.isUnAuthorized);
        }
        if (message.appLocale !== "") {
            writer.uint32(162).string(message.appLocale);
        }
        if (message.instrumentation !== 0) {
            writer.uint32(168).int32(message.instrumentation);
        }
        if (message.lastSuccessfulSync !== 0) {
            writer.uint32(176).int64(message.lastSuccessfulSync);
        }
        if (message.isLogout === true) {
            writer.uint32(184).bool(message.isLogout);
        }
        if (message.packageInstaller !== "") {
            writer.uint32(194).string(message.packageInstaller);
        }
        if (message.syncTriggerBlizzardSessionId !== "") {
            writer.uint32(202).string(message.syncTriggerBlizzardSessionId);
        }
        if (message.syncExecutionBlizzardSessionId !== "") {
            writer.uint32(210).string(message.syncExecutionBlizzardSessionId);
        }
        if (message.cofSyncTriggerDelayFromStartupMs !== 0) {
            writer.uint32(216).int32(message.cofSyncTriggerDelayFromStartupMs);
        }
        if (message.cofSyncExecutionDelayFromStartupMs !== 0) {
            writer.uint32(224).int32(message.cofSyncExecutionDelayFromStartupMs);
        }
        if (message.syncTriggerTime !== 0) {
            writer.uint32(232).int64(message.syncTriggerTime);
        }
        if (message.decoderEncoderAvailability !== undefined) {
            DecoderEncoderAvailablity.encode(message.decoderEncoderAvailability, writer.uint32(242).fork()).ldelim();
        }
        if (message.snapkitAppId !== "") {
            writer.uint32(250).string(message.snapkitAppId);
        }
        if (message.lenscoreVersion !== 0) {
            writer.uint32(256).int32(message.lenscoreVersion);
        }
        if (message.ruid !== undefined) {
            Ruid.encode(message.ruid, writer.uint32(266).fork()).ldelim();
        }
        for (const v of message.configNames) {
            writer.uint32(274).string(v);
        }
        if (message.includeTestUserTreatments === true) {
            writer.uint32(288).bool(message.includeTestUserTreatments);
        }
        if (message.disableExposureLogging === true) {
            writer.uint32(296).bool(message.disableExposureLogging);
        }
        if (message.lensClusterOrig4 !== 0) {
            writer.uint32(304).int32(message.lensClusterOrig4);
        }
        if (message.clientId !== "") {
            writer.uint32(314).string(message.clientId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResultsEtag = reader.string();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                    }
                    else {
                        message.namespaces.push(reader.int32());
                    }
                    break;
                case 3:
                    message.ghostId = reader.string();
                    break;
                case 4:
                    message.countryCode = reader.string();
                    break;
                case 5:
                    message.screenWidth = reader.int32();
                    break;
                case 6:
                    message.screenHeight = reader.int32();
                    break;
                case 7:
                    message.connectivity = Connectivity.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.maxVideoWidthPx = reader.int32();
                    break;
                case 9:
                    message.maxVideoHeightPx = reader.int32();
                    break;
                case 10:
                    message.benchmarkResults.push(BenchmarkResult.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.deltaSync = reader.bool();
                    break;
                case 12:
                    message.userAgent = reader.string();
                    break;
                case 13:
                    message.triggerEventType = reader.int32();
                    break;
                case 14:
                    message.appState = reader.int32();
                    break;
                case 15:
                    message.locale = reader.string();
                    break;
                case 16:
                    message.deviceId = reader.string();
                    break;
                case 17:
                    message.userId = reader.string();
                    break;
                case 18:
                    message.clientIp = reader.string();
                    break;
                case 19:
                    message.isUnAuthorized = reader.bool();
                    break;
                case 20:
                    message.appLocale = reader.string();
                    break;
                case 21:
                    message.instrumentation = reader.int32();
                    break;
                case 22:
                    message.lastSuccessfulSync = config_request_longToNumber(reader.int64());
                    break;
                case 23:
                    message.isLogout = reader.bool();
                    break;
                case 24:
                    message.packageInstaller = reader.string();
                    break;
                case 25:
                    message.syncTriggerBlizzardSessionId = reader.string();
                    break;
                case 26:
                    message.syncExecutionBlizzardSessionId = reader.string();
                    break;
                case 27:
                    message.cofSyncTriggerDelayFromStartupMs = reader.int32();
                    break;
                case 28:
                    message.cofSyncExecutionDelayFromStartupMs = reader.int32();
                    break;
                case 29:
                    message.syncTriggerTime = config_request_longToNumber(reader.int64());
                    break;
                case 30:
                    message.decoderEncoderAvailability = DecoderEncoderAvailablity.decode(reader, reader.uint32());
                    break;
                case 31:
                    message.snapkitAppId = reader.string();
                    break;
                case 32:
                    message.lenscoreVersion = reader.int32();
                    break;
                case 33:
                    message.ruid = Ruid.decode(reader, reader.uint32());
                    break;
                case 34:
                    message.configNames.push(reader.string());
                    break;
                case 36:
                    message.includeTestUserTreatments = reader.bool();
                    break;
                case 37:
                    message.disableExposureLogging = reader.bool();
                    break;
                case 38:
                    message.lensClusterOrig4 = reader.int32();
                    break;
                case 39:
                    message.clientId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;
        const message = createBaseConfigTargetingRequest();
        message.configResultsEtag = (_a = object.configResultsEtag) !== null && _a !== void 0 ? _a : "";
        message.namespaces = ((_b = object.namespaces) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.ghostId = (_c = object.ghostId) !== null && _c !== void 0 ? _c : "";
        message.countryCode = (_d = object.countryCode) !== null && _d !== void 0 ? _d : "";
        message.screenWidth = (_e = object.screenWidth) !== null && _e !== void 0 ? _e : 0;
        message.screenHeight = (_f = object.screenHeight) !== null && _f !== void 0 ? _f : 0;
        message.connectivity =
            object.connectivity !== undefined && object.connectivity !== null
                ? Connectivity.fromPartial(object.connectivity)
                : undefined;
        message.maxVideoWidthPx = (_g = object.maxVideoWidthPx) !== null && _g !== void 0 ? _g : 0;
        message.maxVideoHeightPx = (_h = object.maxVideoHeightPx) !== null && _h !== void 0 ? _h : 0;
        message.benchmarkResults = ((_j = object.benchmarkResults) === null || _j === void 0 ? void 0 : _j.map((e) => BenchmarkResult.fromPartial(e))) || [];
        message.deltaSync = (_k = object.deltaSync) !== null && _k !== void 0 ? _k : false;
        message.userAgent = (_l = object.userAgent) !== null && _l !== void 0 ? _l : "";
        message.triggerEventType = (_m = object.triggerEventType) !== null && _m !== void 0 ? _m : 0;
        message.appState = (_o = object.appState) !== null && _o !== void 0 ? _o : 0;
        message.locale = (_p = object.locale) !== null && _p !== void 0 ? _p : "";
        message.deviceId = (_q = object.deviceId) !== null && _q !== void 0 ? _q : "";
        message.userId = (_r = object.userId) !== null && _r !== void 0 ? _r : "";
        message.clientIp = (_s = object.clientIp) !== null && _s !== void 0 ? _s : "";
        message.isUnAuthorized = (_t = object.isUnAuthorized) !== null && _t !== void 0 ? _t : false;
        message.appLocale = (_u = object.appLocale) !== null && _u !== void 0 ? _u : "";
        message.instrumentation = (_v = object.instrumentation) !== null && _v !== void 0 ? _v : 0;
        message.lastSuccessfulSync = (_w = object.lastSuccessfulSync) !== null && _w !== void 0 ? _w : 0;
        message.isLogout = (_x = object.isLogout) !== null && _x !== void 0 ? _x : false;
        message.packageInstaller = (_y = object.packageInstaller) !== null && _y !== void 0 ? _y : "";
        message.syncTriggerBlizzardSessionId = (_z = object.syncTriggerBlizzardSessionId) !== null && _z !== void 0 ? _z : "";
        message.syncExecutionBlizzardSessionId = (_0 = object.syncExecutionBlizzardSessionId) !== null && _0 !== void 0 ? _0 : "";
        message.cofSyncTriggerDelayFromStartupMs = (_1 = object.cofSyncTriggerDelayFromStartupMs) !== null && _1 !== void 0 ? _1 : 0;
        message.cofSyncExecutionDelayFromStartupMs = (_2 = object.cofSyncExecutionDelayFromStartupMs) !== null && _2 !== void 0 ? _2 : 0;
        message.syncTriggerTime = (_3 = object.syncTriggerTime) !== null && _3 !== void 0 ? _3 : 0;
        message.decoderEncoderAvailability =
            object.decoderEncoderAvailability !== undefined && object.decoderEncoderAvailability !== null
                ? DecoderEncoderAvailablity.fromPartial(object.decoderEncoderAvailability)
                : undefined;
        message.snapkitAppId = (_4 = object.snapkitAppId) !== null && _4 !== void 0 ? _4 : "";
        message.lenscoreVersion = (_5 = object.lenscoreVersion) !== null && _5 !== void 0 ? _5 : 0;
        message.ruid = object.ruid !== undefined && object.ruid !== null ? Ruid.fromPartial(object.ruid) : undefined;
        message.configNames = ((_6 = object.configNames) === null || _6 === void 0 ? void 0 : _6.map((e) => e)) || [];
        message.includeTestUserTreatments = (_7 = object.includeTestUserTreatments) !== null && _7 !== void 0 ? _7 : false;
        message.disableExposureLogging = (_8 = object.disableExposureLogging) !== null && _8 !== void 0 ? _8 : false;
        message.lensClusterOrig4 = (_9 = object.lensClusterOrig4) !== null && _9 !== void 0 ? _9 : 0;
        message.clientId = (_10 = object.clientId) !== null && _10 !== void 0 ? _10 : "";
        return message;
    },
};
function createBaseConnectivity() {
    return { networkType: 0, isMetered: undefined, isRoaming: undefined, carrier: "" };
}
const Connectivity = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.networkType !== 0) {
            writer.uint32(8).int32(message.networkType);
        }
        if (message.isMetered !== undefined) {
            BoolValue.encode({ value: message.isMetered }, writer.uint32(18).fork()).ldelim();
        }
        if (message.isRoaming !== undefined) {
            BoolValue.encode({ value: message.isRoaming }, writer.uint32(26).fork()).ldelim();
        }
        if (message.carrier !== "") {
            writer.uint32(34).string(message.carrier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConnectivity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.networkType = reader.int32();
                    break;
                case 2:
                    message.isMetered = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 3:
                    message.isRoaming = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 4:
                    message.carrier = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseConnectivity();
        message.networkType = (_a = object.networkType) !== null && _a !== void 0 ? _a : 0;
        message.isMetered = (_b = object.isMetered) !== null && _b !== void 0 ? _b : undefined;
        message.isRoaming = (_c = object.isRoaming) !== null && _c !== void 0 ? _c : undefined;
        message.carrier = (_d = object.carrier) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseDecoderEncoderAvailablity() {
    return { isSnapVp9DecoderAvailable: false, isSnapAv1DecoderAvailable: false };
}
const DecoderEncoderAvailablity = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.isSnapVp9DecoderAvailable === true) {
            writer.uint32(8).bool(message.isSnapVp9DecoderAvailable);
        }
        if (message.isSnapAv1DecoderAvailable === true) {
            writer.uint32(16).bool(message.isSnapAv1DecoderAvailable);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecoderEncoderAvailablity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.isSnapVp9DecoderAvailable = reader.bool();
                    break;
                case 2:
                    message.isSnapAv1DecoderAvailable = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDecoderEncoderAvailablity();
        message.isSnapVp9DecoderAvailable = (_a = object.isSnapVp9DecoderAvailable) !== null && _a !== void 0 ? _a : false;
        message.isSnapAv1DecoderAvailable = (_b = object.isSnapAv1DecoderAvailable) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
var config_request_globalThis = (() => {
    if (typeof config_request_globalThis !== "undefined")
        return config_request_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function config_request_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new config_request_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=config_request.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/common/value.js
/* eslint-disable */



const value_protobufPackage = "snapchat.common";
function createBaseMapRecord() {
    return { key: "", value: "" };
}
const MapRecord = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMapRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMapRecord();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMapRecords() {
    return { records: [] };
}
const MapRecords = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.records) {
            MapRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMapRecords();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.records.push(MapRecord.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMapRecords();
        message.records = ((_a = object.records) === null || _a === void 0 ? void 0 : _a.map((e) => MapRecord.fromPartial(e))) || [];
        return message;
    },
};
function createBaseValue() {
    return {
        intValue: undefined,
        longValue: undefined,
        floatValue: undefined,
        doubleValue: undefined,
        boolValue: undefined,
        stringValue: undefined,
        anyValue: undefined,
        mapValue: undefined,
        intPairValue: undefined,
    };
}
const Value = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.intValue !== undefined) {
            writer.uint32(8).int32(message.intValue);
        }
        if (message.longValue !== undefined) {
            writer.uint32(16).int64(message.longValue);
        }
        if (message.floatValue !== undefined) {
            writer.uint32(29).float(message.floatValue);
        }
        if (message.doubleValue !== undefined) {
            writer.uint32(73).double(message.doubleValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(32).bool(message.boolValue);
        }
        if (message.stringValue !== undefined) {
            writer.uint32(42).string(message.stringValue);
        }
        if (message.anyValue !== undefined) {
            Any.encode(message.anyValue, writer.uint32(50).fork()).ldelim();
        }
        if (message.mapValue !== undefined) {
            MapRecords.encode(message.mapValue, writer.uint32(58).fork()).ldelim();
        }
        if (message.intPairValue !== undefined) {
            writer.uint32(65).fixed64(message.intPairValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.intValue = reader.int32();
                    break;
                case 2:
                    message.longValue = value_longToNumber(reader.int64());
                    break;
                case 3:
                    message.floatValue = reader.float();
                    break;
                case 9:
                    message.doubleValue = reader.double();
                    break;
                case 4:
                    message.boolValue = reader.bool();
                    break;
                case 5:
                    message.stringValue = reader.string();
                    break;
                case 6:
                    message.anyValue = Any.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.mapValue = MapRecords.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.intPairValue = value_longToNumber(reader.fixed64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseValue();
        message.intValue = (_a = object.intValue) !== null && _a !== void 0 ? _a : undefined;
        message.longValue = (_b = object.longValue) !== null && _b !== void 0 ? _b : undefined;
        message.floatValue = (_c = object.floatValue) !== null && _c !== void 0 ? _c : undefined;
        message.doubleValue = (_d = object.doubleValue) !== null && _d !== void 0 ? _d : undefined;
        message.boolValue = (_e = object.boolValue) !== null && _e !== void 0 ? _e : undefined;
        message.stringValue = (_f = object.stringValue) !== null && _f !== void 0 ? _f : undefined;
        message.anyValue =
            object.anyValue !== undefined && object.anyValue !== null ? Any.fromPartial(object.anyValue) : undefined;
        message.mapValue =
            object.mapValue !== undefined && object.mapValue !== null ? MapRecords.fromPartial(object.mapValue) : undefined;
        message.intPairValue = (_g = object.intPairValue) !== null && _g !== void 0 ? _g : undefined;
        return message;
    },
};
var value_globalThis = (() => {
    if (typeof value_globalThis !== "undefined")
        return value_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function value_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new value_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=value.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/config_result.js
/* eslint-disable */



const config_result_protobufPackage = "snapchat.cdp.cof";
/** The suffix of "_PLATFORM" is appended, due to C++ declared enums with global scope, which causes issues in Snapchat/client */
var ConfigResult_ServePlatform;
(function (ConfigResult_ServePlatform) {
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["UNKNOWN_CONTEXT_PLATFORM"] = 0] = "UNKNOWN_CONTEXT_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["IOS_PLATFORM"] = 1] = "IOS_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["ANDROID_PLATFORM"] = 2] = "ANDROID_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["SERVER_PLATFORM"] = 3] = "SERVER_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigResult_ServePlatform || (ConfigResult_ServePlatform = {}));
var ClientTargetingExpression_Operator;
(function (ClientTargetingExpression_Operator) {
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["UNKNOWN_OPERATOR"] = 0] = "UNKNOWN_OPERATOR";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["AND"] = 1] = "AND";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["OR"] = 2] = "OR";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_Operator || (ClientTargetingExpression_Operator = {}));
var ClientTargetingExpression_PredicateOperator;
(function (ClientTargetingExpression_PredicateOperator) {
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["UNKNOWN_PREDICATE_OPERATOR"] = 0] = "UNKNOWN_PREDICATE_OPERATOR";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["EQUAL"] = 1] = "EQUAL";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["NOT_EQUAL"] = 2] = "NOT_EQUAL";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["GREATER_THAN_OR_EQUAL_TO"] = 3] = "GREATER_THAN_OR_EQUAL_TO";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["LESS_THAN_OR_EQUAL_TO"] = 4] = "LESS_THAN_OR_EQUAL_TO";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_PredicateOperator || (ClientTargetingExpression_PredicateOperator = {}));
var ClientTargetingExpression_Property;
(function (ClientTargetingExpression_Property) {
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UNKNOWN_PROPERTY"] = 0] = "UNKNOWN_PROPERTY";
    /**
     * BATTERY_LEVEL - A enum ordinal indicating the battery level is LOW/MID/HIGH.
     * The ordinals are defined in snapchat.cdp.cof.battery_level.proto
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BATTERY_LEVEL"] = 1] = "BATTERY_LEVEL";
    /** IS_OFFLINE - A boolean indicating whether the device is offline. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_OFFLINE"] = 2] = "IS_OFFLINE";
    /** IS_CHARGING - A boolean indicating whether the device is charging. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_CHARGING"] = 3] = "IS_CHARGING";
    /** BANDWIDTH - An integer representing the download bandwidth in bps. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BANDWIDTH"] = 4] = "BANDWIDTH";
    /** DISK_SIZE - Disk size in mb */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DISK_SIZE"] = 5] = "DISK_SIZE";
    /** DISK_AVAILABLE - Disk space available in mb */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DISK_AVAILABLE"] = 6] = "DISK_AVAILABLE";
    /**
     * MEDIA_TYPE_DEPRECATED - An enum ordinal indicating the type of media being processed.
     * The ordinals are defined in snapchat.snapdoc.MediaMetadata.MediaType.
     *
     * @deprecated
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_TYPE_DEPRECATED"] = 7] = "MEDIA_TYPE_DEPRECATED";
    /** IS_PUBLIC_STORY - A boolean indicating whether the story is shared publicly. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_PUBLIC_STORY"] = 8] = "IS_PUBLIC_STORY";
    /** IS_OFFICIAL_STORY - A boolean indicating whether the story is posted from offcial account and is public. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_OFFICIAL_STORY"] = 9] = "IS_OFFICIAL_STORY";
    /** CAMERA_DIRECTION - An enum for camera direction */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_DIRECTION"] = 10] = "CAMERA_DIRECTION";
    /** CAMERA_CONTEXT - An enum for camera context */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_CONTEXT"] = 11] = "CAMERA_CONTEXT";
    /** CAMERA_API - An enum for camera API */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_API"] = 12] = "CAMERA_API";
    /** CAMERA_FLASH_STATE - An enum for camera flash state */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_FLASH_STATE"] = 13] = "CAMERA_FLASH_STATE";
    /** SNAP_SOURCE - An enum for where the snap orginates */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_SOURCE"] = 14] = "SNAP_SOURCE";
    /** LEGACY_MUSHROOM_CONTENT_TYPE - An enum for what content type is being used */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LEGACY_MUSHROOM_CONTENT_TYPE"] = 15] = "LEGACY_MUSHROOM_CONTENT_TYPE";
    /** UPLOAD_BANDWIDTH - An integer representing the upload bandwidth in bps. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UPLOAD_BANDWIDTH"] = 16] = "UPLOAD_BANDWIDTH";
    /** CAMERA2_LEVEL - An enum for camera2 hardware support level. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_LEVEL"] = 17] = "CAMERA2_LEVEL";
    /** CAMERA_NIGHT_MODE_STATE - An enum for Camera night model state. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_NIGHT_MODE_STATE"] = 18] = "CAMERA_NIGHT_MODE_STATE";
    /** USER_LANGUAGE - The language user chooses the app to display */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_LANGUAGE"] = 19] = "USER_LANGUAGE";
    /** VIDEO_DURATION - The video duration in ms. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["VIDEO_DURATION"] = 20] = "VIDEO_DURATION";
    /** REALTIME_MOBILE_NETWORK_GENERATION - Mobile network generation(3G, 4G, etc) defined in snapchat.cdp.cof.mobile_network_generation.proto */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_MOBILE_NETWORK_GENERATION"] = 21] = "REALTIME_MOBILE_NETWORK_GENERATION";
    /** REALTIME_NETWORK_TYPE - Mobile networktype defined via Connectivity.NetworkType in snapchat.cdp.cof.circumstance_engine.proto */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_TYPE"] = 22] = "REALTIME_NETWORK_TYPE";
    /** REALTIME_NETWORK_IS_METERED - A boolean for if the current network is metered. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_IS_METERED"] = 23] = "REALTIME_NETWORK_IS_METERED";
    /** REALTIME_NETWORK_IS_ROAMING - A boolean for if the current network is roaming. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_IS_ROAMING"] = 24] = "REALTIME_NETWORK_IS_ROAMING";
    /** CAMERA_IS_FIRST_CAPTURE - A boolean indicating whether this is the first capture after app cold start */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_IS_FIRST_CAPTURE"] = 25] = "CAMERA_IS_FIRST_CAPTURE";
    /** PICTURE_MODE - A enum indicating which type of image capture this was [GPU or JPEG] */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PICTURE_MODE"] = 26] = "PICTURE_MODE";
    /** BOLT_USE_CASE - An integer representing what BOLT usecase the caller is using. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_USE_CASE"] = 27] = "BOLT_USE_CASE";
    /** BOLT_CDN_EXPERIMENTATION_ID - An integer representing what BOLT cdn should be experimented with */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_CDN_EXPERIMENTATION_ID"] = 28] = "BOLT_CDN_EXPERIMENTATION_ID";
    /** MINS_SINCE_LAST_LENS_ACTIVATION - Num of mins since a user last activates the Lens. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINS_SINCE_LAST_LENS_ACTIVATION"] = 29] = "MINS_SINCE_LAST_LENS_ACTIVATION";
    /** MINS_SINCE_LAST_SNAPPABLE_LENS_ACTIVATION - Num of mins since user activated snappable lens for the last time. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINS_SINCE_LAST_SNAPPABLE_LENS_ACTIVATION"] = 30] = "MINS_SINCE_LAST_SNAPPABLE_LENS_ACTIVATION";
    /** DAYS_SINCE_LAST_LOGIN_OR_OPEN - Integer between 0 .. N which is the number of days since the user logged in or opened the app */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_LOGIN_OR_OPEN"] = 31] = "DAYS_SINCE_LAST_LOGIN_OR_OPEN";
    /** SPECTACLES_VERSION - An enum for Spectacles version */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPECTACLES_VERSION"] = 32] = "SPECTACLES_VERSION";
    /** STICKY_MAX_CONNECTION_TYPE - A client side property for evaluating the highest tier connection a client has recently used. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STICKY_MAX_CONNECTION_TYPE"] = 33] = "STICKY_MAX_CONNECTION_TYPE";
    /** WITH_ANIMATED_OVERLAY - A boolean indicating whether there is animated overlay with video snap. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WITH_ANIMATED_OVERLAY"] = 34] = "WITH_ANIMATED_OVERLAY";
    /** ESTIMATED_DURATION_FOR_EVENT_MS - Estimated duration for a config-specific event */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ESTIMATED_DURATION_FOR_EVENT_MS"] = 35] = "ESTIMATED_DURATION_FOR_EVENT_MS";
    /** URL - A URL */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["URL"] = 36] = "URL";
    /** MEDIA_SOURCE - content’s origin prior to being injected into the MDP stack */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_SOURCE"] = 37] = "MEDIA_SOURCE";
    /** ASSET_TYPE - how to compose an individual asset into one larger logical asset */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ASSET_TYPE"] = 38] = "ASSET_TYPE";
    /** BOLT_IS_CONTENT_POPULAR - A boolean representing whether the content being resolved is popular or not. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_IS_CONTENT_POPULAR"] = 39] = "BOLT_IS_CONTENT_POPULAR";
    /** CAPTURE_MODE - A enum indicating which mode of capture this was [Timeline or Unknown] */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAPTURE_MODE"] = 40] = "CAPTURE_MODE";
    /** VP9_SOFTWARE_DECODING_SUPPORTED - A boolean representing if VP9 software decoding is supported */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["VP9_SOFTWARE_DECODING_SUPPORTED"] = 41] = "VP9_SOFTWARE_DECODING_SUPPORTED";
    /** AV1_SOFTWARE_DECODING_SUPPORTED - A boolean representing if AV1 software decoding is supported */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AV1_SOFTWARE_DECODING_SUPPORTED"] = 42] = "AV1_SOFTWARE_DECODING_SUPPORTED";
    /** WITH_MUSIC - A boolean to indicate whether there is music edits (e.g. music sticker). */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WITH_MUSIC"] = 43] = "WITH_MUSIC";
    /**
     * FEATURE_PROVIDED_SIZE - A client provided integer representing size. The units is decided by the caller.
     * This will be evaluated using FeatureProvidedSignals.size
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FEATURE_PROVIDED_SIZE"] = 44] = "FEATURE_PROVIDED_SIZE";
    /**
     * MEDIA_TYPE - An enum ordinal indicating the type of media being processed.
     * The ordinals are defined in snapchat.cdp.cof.media_provided_signals.proto
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_TYPE"] = 45] = "MEDIA_TYPE";
    /** SCANNED_CATEGORY_IDS - The ids of the categories that are currently being scanned for (e.g. Amazon, Photomath, etc) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCANNED_CATEGORY_IDS"] = 46] = "SCANNED_CATEGORY_IDS";
    /**
     * CONTENT_VIEW_SOURCE - Numerical value of ContentViewSource (Blizzard enum) which identified Opera session
     * On the client the value is provided via FeatureProvidedSignals.OperaSignals
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTENT_VIEW_SOURCE"] = 47] = "CONTENT_VIEW_SOURCE";
    /** RECIPIENTS_SUPPORT_HEVC - A boolean indicating whether a group of recipients support High Efficiency Video Encoding (HEVC) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RECIPIENTS_SUPPORT_HEVC"] = 48] = "RECIPIENTS_SUPPORT_HEVC";
    /** COGNAC_APP_ID - A Cognac game/mini id that a user is playing */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COGNAC_APP_ID"] = 49] = "COGNAC_APP_ID";
    /** EMAIL_VERIFIED - Whether user's email has verified */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["EMAIL_VERIFIED"] = 50] = "EMAIL_VERIFIED";
    /** PHONE_VERIFIED - Whether user's phone number has verified */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PHONE_VERIFIED"] = 51] = "PHONE_VERIFIED";
    /** NOTIFICATION_PERM_GRANTED - Whether notification permission has granted */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NOTIFICATION_PERM_GRANTED"] = 52] = "NOTIFICATION_PERM_GRANTED";
    /** CONTACT_PERM_GRANTED - Whether contact permission has granted */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTACT_PERM_GRANTED"] = 53] = "CONTACT_PERM_GRANTED";
    /** MUTUAL_FRIENDS_COUNT - Mutual friends count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MUTUAL_FRIENDS_COUNT"] = 54] = "MUTUAL_FRIENDS_COUNT";
    /** GROUPS_COUNT - Groups count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GROUPS_COUNT"] = 55] = "GROUPS_COUNT";
    /** HAS_NON_TEAM_SNAPCHAT_CONVERSATIONS - Whether user has non-team snapchat conversations */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_NON_TEAM_SNAPCHAT_CONVERSATIONS"] = 56] = "HAS_NON_TEAM_SNAPCHAT_CONVERSATIONS";
    /**
     * PLAYBACK_ITEM_TYPE - Numerical value of PlaybackItemType (Blizzard enum) which identifies an Opera playback item type
     * On the client the value is provided via PlaybackItemType
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PLAYBACK_ITEM_TYPE"] = 57] = "PLAYBACK_ITEM_TYPE";
    /**
     * SUP_BOOLEAN_PROPERTY - To get the corresponding SUP property values, check on property_metadata.sup_item_id.item_id
     * Sup boolean property
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_BOOLEAN_PROPERTY"] = 58] = "SUP_BOOLEAN_PROPERTY";
    /** SUP_INTEGER_PROPERTY - Sup integer property */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_INTEGER_PROPERTY"] = 59] = "SUP_INTEGER_PROPERTY";
    /** SUP_LONG_PROPERTY - Sup long property */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_LONG_PROPERTY"] = 60] = "SUP_LONG_PROPERTY";
    /** SUP_STRING_PROPERTY - Sup string property */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_STRING_PROPERTY"] = 61] = "SUP_STRING_PROPERTY";
    /** SUP_DOUBLE_PROPERTY - Sup double property */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_DOUBLE_PROPERTY"] = 62] = "SUP_DOUBLE_PROPERTY";
    /** SUP_MILLIS_PROPERTY_TO_NOW - Sup long property as timestamp in millis to get time elapsed */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_MILLIS_PROPERTY_TO_NOW"] = 63] = "SUP_MILLIS_PROPERTY_TO_NOW";
    /** HAS_USED_SPECTACLES - Whether the user has used Spectacles (incl. Cheerios) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_USED_SPECTACLES"] = 64] = "HAS_USED_SPECTACLES";
    /**
     * SUP_SECS_PROPERTY_TO_NOW - To get the corresponding SUP property values, check on property_metadata.sup_item_id.item_id
     * Sup long property as timestamp in seconds to get time elapsed
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_SECS_PROPERTY_TO_NOW"] = 65] = "SUP_SECS_PROPERTY_TO_NOW";
    /** BOLT_CLIENT_APP_STATE - Enum indicating client App State (Used by BOLT to create targeted network rules) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_CLIENT_APP_STATE"] = 66] = "BOLT_CLIENT_APP_STATE";
    /** EMAIL_SET - Whether user's email has been set (might or might not be verified) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["EMAIL_SET"] = 67] = "EMAIL_SET";
    /** BITMOJI_SET - Whether user's bitmoji has been set */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BITMOJI_SET"] = 68] = "BITMOJI_SET";
    /** QUICK_TAP_CAMERA_SUPPORTED_ENABLED - Quick tap on camera is supported and enabled */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["QUICK_TAP_CAMERA_SUPPORTED_ENABLED"] = 69] = "QUICK_TAP_CAMERA_SUPPORTED_ENABLED";
    /** HAS_ADD_FRIENDS_REQUEST - Whether user has add friends request */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ADD_FRIENDS_REQUEST"] = 70] = "HAS_ADD_FRIENDS_REQUEST";
    /** APP_LAUNCH_FROM_PUSH - App launched from push notification */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LAUNCH_FROM_PUSH"] = 71] = "APP_LAUNCH_FROM_PUSH";
    /** APP_LAUNCH_TYPE - App launch type: cold start, warm start, registration and login */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LAUNCH_TYPE"] = 72] = "APP_LAUNCH_TYPE";
    /** BILLBOARD_CAMPAIGN_LOCAL_IMPRESSION_COUNT - Billboard locally tracked impression count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_IMPRESSION_COUNT"] = 73] = "BILLBOARD_CAMPAIGN_LOCAL_IMPRESSION_COUNT";
    /** BILLBOARD_CAMPAIGN_LOCAL_LAST_IMPRESSION_TIME_SECS_TO_NOW - Billboard locally tracked last impression time in secs to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_IMPRESSION_TIME_SECS_TO_NOW"] = 74] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_IMPRESSION_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_CONTINUOUS_DISMISS_COUNT - Billboard locally tracked continuous dismiss count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_CONTINUOUS_DISMISS_COUNT"] = 75] = "BILLBOARD_CAMPAIGN_LOCAL_CONTINUOUS_DISMISS_COUNT";
    /** FST_NUM_IN_APP_WARNINGS - FST number of in app warnings to show */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_NUM_IN_APP_WARNINGS"] = 76] = "FST_NUM_IN_APP_WARNINGS";
    /** FST_SHOULD_CHANGE_PASSWORD - FST user should change password */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_SHOULD_CHANGE_PASSWORD"] = 77] = "FST_SHOULD_CHANGE_PASSWORD";
    /** FST_IS_BACKGROUND_CHECK - Whether it's a background check or foreground check. Android specific */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_IS_BACKGROUND_CHECK"] = 78] = "FST_IS_BACKGROUND_CHECK";
    /** AUDIO_RECORD_PERM_GRANTED - Whether audio record permission has granted */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AUDIO_RECORD_PERM_GRANTED"] = 79] = "AUDIO_RECORD_PERM_GRANTED";
    /** MUTUAL_FRIENDS_WITH_BIRTHDAY_COUNT - Mutual Friends with birthday count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MUTUAL_FRIENDS_WITH_BIRTHDAY_COUNT"] = 80] = "MUTUAL_FRIENDS_WITH_BIRTHDAY_COUNT";
    /** BILLBOARD_CAMPAIGN_LOCAL_DISMISS_COUNT - Billboard locally tracked dismiss count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_DISMISS_COUNT"] = 81] = "BILLBOARD_CAMPAIGN_LOCAL_DISMISS_COUNT";
    /** USE_VERTICAL_NAVIGATION - A boolean to indicate whether Opera uses vertical navigation or not. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USE_VERTICAL_NAVIGATION"] = 82] = "USE_VERTICAL_NAVIGATION";
    /**
     * FREEABLE_DISK_AVAILABLE - Freeable disk space available in mb. This included Content Manager freeable
     * bytes + DISK_AVAILABLE
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FREEABLE_DISK_AVAILABLE"] = 83] = "FREEABLE_DISK_AVAILABLE";
    /** MEMORIES_COUNT - Num of memories snaps user has */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEMORIES_COUNT"] = 84] = "MEMORIES_COUNT";
    /** DEVICE_MODEL - DEVICE_MODEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_MODEL"] = 85] = "DEVICE_MODEL";
    /** COUNTRY - COUNTRY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COUNTRY"] = 86] = "COUNTRY";
    /** OS - OS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["OS"] = 87] = "OS";
    /** OS_VERSION - OS_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["OS_VERSION"] = 88] = "OS_VERSION";
    /** APP_VERSION - APP_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_VERSION"] = 89] = "APP_VERSION";
    /** BUILD_FLAVOR - BUILD_FLAVOR (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_FLAVOR"] = 90] = "BUILD_FLAVOR";
    /** USER_ID - USER_ID (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_ID"] = 91] = "USER_ID";
    /** LOCALE - LOCALE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LOCALE"] = 92] = "LOCALE";
    /** DEVICE_CLUSTER - DEVICE_CLUSTER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_CLUSTER"] = 93] = "DEVICE_CLUSTER";
    /** DEVICE_BRAND - DEVICE_BRAND (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_BRAND"] = 94] = "DEVICE_BRAND";
    /** IS_EMPLOYEE - IS_EMPLOYEE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_EMPLOYEE"] = 95] = "IS_EMPLOYEE";
    /** USERNAME - USERNAME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USERNAME"] = 96] = "USERNAME";
    /** IS_TEST_USER - IS_TEST_USER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_TEST_USER"] = 97] = "IS_TEST_USER";
    /** USER_PROFILE - USER_PROFILE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PROFILE"] = 98] = "USER_PROFILE";
    /** SCREEN_WIDTH - SCREEN_WIDTH (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_WIDTH"] = 99] = "SCREEN_WIDTH";
    /** SCREEN_HEIGHT - SCREEN_HEIGHT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_HEIGHT"] = 100] = "SCREEN_HEIGHT";
    /** HEVC_SUPPORT - HEVC_SUPPORT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_SUPPORT"] = 101] = "HEVC_SUPPORT";
    /** NETWORK_TYPE - NETWORK_TYPE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NETWORK_TYPE"] = 102] = "NETWORK_TYPE";
    /** MAX_VIDEO_WIDTH - MAX_VIDEO_WIDTH (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MAX_VIDEO_WIDTH"] = 103] = "MAX_VIDEO_WIDTH";
    /** MAX_VIDEO_HEIGHT - MAX_VIDEO_HEIGHT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MAX_VIDEO_HEIGHT"] = 104] = "MAX_VIDEO_HEIGHT";
    /** IS_NETWORK_METERED - IS_NETWORK_METERED (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_NETWORK_METERED"] = 105] = "IS_NETWORK_METERED";
    /** IS_ROAMING - IS_ROAMING (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ROAMING"] = 106] = "IS_ROAMING";
    /** APP_ENGAGEMENT_LEVEL - APP_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_ENGAGEMENT_LEVEL"] = 107] = "APP_ENGAGEMENT_LEVEL";
    /** COMMUNICATION_ENGAGEMENT_LEVEL - COMMUNICATION_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNICATION_ENGAGEMENT_LEVEL"] = 108] = "COMMUNICATION_ENGAGEMENT_LEVEL";
    /** FRIEND_STORY_ENGAGEMENT_LEVEL - FRIEND_STORY_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FRIEND_STORY_ENGAGEMENT_LEVEL"] = 109] = "FRIEND_STORY_ENGAGEMENT_LEVEL";
    /** PUBLIC_USER_STORY_ENGAGEMENT_LEVEL - PUBLIC_USER_STORY_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PUBLIC_USER_STORY_ENGAGEMENT_LEVEL"] = 110] = "PUBLIC_USER_STORY_ENGAGEMENT_LEVEL";
    /** PUBLISHER_STORY_ENGAGEMENT_LEVEL - PUBLISHER_STORY_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PUBLISHER_STORY_ENGAGEMENT_LEVEL"] = 111] = "PUBLISHER_STORY_ENGAGEMENT_LEVEL";
    /** LENS_ENGAGEMENT_LEVEL - LENS_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_ENGAGEMENT_LEVEL"] = 112] = "LENS_ENGAGEMENT_LEVEL";
    /** NON_FRIEND_STORY_ENGAGEMENT_LEVEL - NON_FRIEND_STORY_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NON_FRIEND_STORY_ENGAGEMENT_LEVEL"] = 113] = "NON_FRIEND_STORY_ENGAGEMENT_LEVEL";
    /** FOLLOWER_SIZE_LEVEL - FOLLOWER_SIZE_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FOLLOWER_SIZE_LEVEL"] = 114] = "FOLLOWER_SIZE_LEVEL";
    /** DAYS_SINCE_CREATION - DAYS_SINCE_CREATION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_CREATION"] = 115] = "DAYS_SINCE_CREATION";
    /** USER_PERSONA - USER_PERSONA (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PERSONA"] = 116] = "USER_PERSONA";
    /** USER_CREATION_TIME - USER_CREATION_TIME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_CREATION_TIME"] = 117] = "USER_CREATION_TIME";
    /** MOBILE_NETWORK_TYPE - MOBILE_NETWORK_TYPE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MOBILE_NETWORK_TYPE"] = 118] = "MOBILE_NETWORK_TYPE";
    /** AGGREGATED_USER_BANDWIDTH - AGGREGATED_USER_BANDWIDTH (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AGGREGATED_USER_BANDWIDTH"] = 119] = "AGGREGATED_USER_BANDWIDTH";
    /** LENS_CLUSTER_BIASED - LENS_CLUSTER_BIASED (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_BIASED"] = 120] = "LENS_CLUSTER_BIASED";
    /** LENS_CLUSTER_LOG - LENS_CLUSTER_LOG (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_LOG"] = 121] = "LENS_CLUSTER_LOG";
    /** LENS_CLUSTER_ORIG - LENS_CLUSTER_ORIG (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_ORIG"] = 122] = "LENS_CLUSTER_ORIG";
    /** LENS_CLUSTER_ORIG_4 - LENS_CLUSTER_ORIG_4 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_ORIG_4"] = 123] = "LENS_CLUSTER_ORIG_4";
    /** LENS_CLUSTER_BIASED_LOG - LENS_CLUSTER_BIASED_LOG (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_BIASED_LOG"] = 124] = "LENS_CLUSTER_BIASED_LOG";
    /** APP_LOCALE - APP_LOCALE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LOCALE"] = 125] = "APP_LOCALE";
    /** DEVICE_COMMON_NAME - DEVICE_COMMON_NAME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_COMMON_NAME"] = 126] = "DEVICE_COMMON_NAME";
    /** USER_FRIEND_COUNT - USER_FRIEND_COUNT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_FRIEND_COUNT"] = 127] = "USER_FRIEND_COUNT";
    /** L90_COUNTRY - L90_COUNTRY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["L90_COUNTRY"] = 128] = "L90_COUNTRY";
    /** STUB - STUB (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STUB"] = 129] = "STUB";
    /** IS_TRUE - IS_TRUE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_TRUE"] = 130] = "IS_TRUE";
    /** STORY_POST_RATIO - STORY_POST_RATIO (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_RATIO"] = 131] = "STORY_POST_RATIO";
    /** GENDER - GENDER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GENDER"] = 132] = "GENDER";
    /** INFERRED_AGE_BUCKET - INFERRED_AGE_BUCKET (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["INFERRED_AGE_BUCKET"] = 133] = "INFERRED_AGE_BUCKET";
    /** STORIES - STORIES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORIES"] = 134] = "STORIES";
    /** SENDS - SENDS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SENDS"] = 135] = "SENDS";
    /** SNAP_CREATE_L7 - SNAP_CREATE_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_CREATE_L7"] = 136] = "SNAP_CREATE_L7";
    /** STORY_POST_L7 - STORY_POST_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_L7"] = 137] = "STORY_POST_L7";
    /** COMMUNICATION_L7 - COMMUNICATION_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNICATION_L7"] = 138] = "COMMUNICATION_L7";
    /** DF_L7 - DF_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DF_L7"] = 139] = "DF_L7";
    /** APP_L7 - APP_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_L7"] = 140] = "APP_L7";
    /** DAYS_SINCE_CREATION_BUCKET - DAYS_SINCE_CREATION_BUCKET (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_CREATION_BUCKET"] = 141] = "DAYS_SINCE_CREATION_BUCKET";
    /** BIDIRECTIONAL_FRIEND_STATUS - BIDIRECTIONAL_FRIEND_STATUS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BIDIRECTIONAL_FRIEND_STATUS"] = 142] = "BIDIRECTIONAL_FRIEND_STATUS";
    /** STORY_POST_PREDICTION - STORY_POST_PREDICTION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_PREDICTION"] = 143] = "STORY_POST_PREDICTION";
    /** APP_OPENS - APP_OPENS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPENS"] = 144] = "APP_OPENS";
    /** LENS_SWIPES - LENS_SWIPES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SWIPES"] = 145] = "LENS_SWIPES";
    /** LENS_SNAPS - LENS_SNAPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SNAPS"] = 146] = "LENS_SNAPS";
    /** LENS_OPS - LENS_OPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_OPS"] = 147] = "LENS_OPS";
    /** W1_APP_OPENS - W1_APP_OPENS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_APP_OPENS"] = 148] = "W1_APP_OPENS";
    /** W1_LENS_SWIPES - W1_LENS_SWIPES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_SWIPES"] = 149] = "W1_LENS_SWIPES";
    /** W1_LENS_SNAPS - W1_LENS_SNAPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_SNAPS"] = 150] = "W1_LENS_SNAPS";
    /** W1_LENS_OPS - W1_LENS_OPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_OPS"] = 151] = "W1_LENS_OPS";
    /** W2_APP_OPENS - W2_APP_OPENS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_APP_OPENS"] = 152] = "W2_APP_OPENS";
    /** W2_LENS_SWIPES - W2_LENS_SWIPES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_SWIPES"] = 153] = "W2_LENS_SWIPES";
    /** W2_LENS_SNAPS - W2_LENS_SNAPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_SNAPS"] = 154] = "W2_LENS_SNAPS";
    /** W2_LENS_OPS - W2_LENS_OPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_OPS"] = 155] = "W2_LENS_OPS";
    /** W34_APP_OPENS - W34_APP_OPENS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_APP_OPENS"] = 156] = "W34_APP_OPENS";
    /** W34_LENS_SWIPES - W34_LENS_SWIPES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_SWIPES"] = 157] = "W34_LENS_SWIPES";
    /** W34_LENS_SNAPS - W34_LENS_SNAPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_SNAPS"] = 158] = "W34_LENS_SNAPS";
    /** W34_LENS_OPS - W34_LENS_OPS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_OPS"] = 159] = "W34_LENS_OPS";
    /** LENS_SWIPES_PREDICTION - LENS_SWIPES_PREDICTION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SWIPES_PREDICTION"] = 160] = "LENS_SWIPES_PREDICTION";
    /** REGISTRATION_COUNTRY - REGISTRATION_COUNTRY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REGISTRATION_COUNTRY"] = 161] = "REGISTRATION_COUNTRY";
    /** IP_ASN - IP_ASN (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_ASN"] = 162] = "IP_ASN";
    /** IP_REGION - IP_REGION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_REGION"] = 163] = "IP_REGION";
    /** IP_CITY - IP_CITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_CITY"] = 164] = "IP_CITY";
    /** HAS_USER_ID - HAS_USER_ID (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_USER_ID"] = 165] = "HAS_USER_ID";
    /** HAS_BITMOJI - HAS_BITMOJI (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_BITMOJI"] = 166] = "HAS_BITMOJI";
    /** NUM_APP_OPENS_LAST_8_DAYS - NUM_APP_OPENS_LAST_8_DAYS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_APP_OPENS_LAST_8_DAYS"] = 167] = "NUM_APP_OPENS_LAST_8_DAYS";
    /** NUM_FEATURE_STORY_VIEW_DAYS_L7 - NUM_FEATURE_STORY_VIEW_DAYS_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_FEATURE_STORY_VIEW_DAYS_L7"] = 168] = "NUM_FEATURE_STORY_VIEW_DAYS_L7";
    /** NUM_FEATURE_STORY_SYNC_DAYS_L7 - NUM_FEATURE_STORY_SYNC_DAYS_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_FEATURE_STORY_SYNC_DAYS_L7"] = 169] = "NUM_FEATURE_STORY_SYNC_DAYS_L7";
    /** HEXAGON_NN_SUPPORTED_VERSION - HEXAGON_NN_SUPPORTED_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEXAGON_NN_SUPPORTED_VERSION"] = 170] = "HEXAGON_NN_SUPPORTED_VERSION";
    /** NETWORK_QUALITY - NETWORK_QUALITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NETWORK_QUALITY"] = 171] = "NETWORK_QUALITY";
    /** DEVICE_MEMORY_MB - DEVICE_MEMORY_MB (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_MEMORY_MB"] = 172] = "DEVICE_MEMORY_MB";
    /** DEVICE_GL_VERSION - DEVICE_GL_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_GL_VERSION"] = 173] = "DEVICE_GL_VERSION";
    /** SNAP_PRO_STATUS - SNAP_PRO_STATUS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PRO_STATUS"] = 174] = "SNAP_PRO_STATUS";
    /** DEVICE_VP9_DECODING_SUPPORT - DEVICE_VP9_DECODING_SUPPORT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_VP9_DECODING_SUPPORT"] = 175] = "DEVICE_VP9_DECODING_SUPPORT";
    /** AVG_FRIEND_STORY_VIEW_COUNT_L7 - AVG_FRIEND_STORY_VIEW_COUNT_L7 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AVG_FRIEND_STORY_VIEW_COUNT_L7"] = 176] = "AVG_FRIEND_STORY_VIEW_COUNT_L7";
    /** GAME_JOIN_TIME - GAME_JOIN_TIME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GAME_JOIN_TIME"] = 177] = "GAME_JOIN_TIME";
    /** GAME_LAST_ACTIVE_TIME - GAME_LAST_ACTIVE_TIME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GAME_LAST_ACTIVE_TIME"] = 178] = "GAME_LAST_ACTIVE_TIME";
    /** DAYS_SINCE_FIRST_GAME_ACTIVITY - DAYS_SINCE_FIRST_GAME_ACTIVITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_GAME_ACTIVITY"] = 179] = "DAYS_SINCE_FIRST_GAME_ACTIVITY";
    /** DAYS_SINCE_LAST_GAME_ACTIVITY - DAYS_SINCE_LAST_GAME_ACTIVITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_GAME_ACTIVITY"] = 180] = "DAYS_SINCE_LAST_GAME_ACTIVITY";
    /** PF_PAGE_SESSIONS_WITH_LONG_IMP - PF_PAGE_SESSIONS_WITH_LONG_IMP (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PF_PAGE_SESSIONS_WITH_LONG_IMP"] = 181] = "PF_PAGE_SESSIONS_WITH_LONG_IMP";
    /** WIRELESS_CARRIER - WIRELESS_CARRIER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WIRELESS_CARRIER"] = 182] = "WIRELESS_CARRIER";
    /** MINIS_JOIN_TIME - MINIS_JOIN_TIME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINIS_JOIN_TIME"] = 183] = "MINIS_JOIN_TIME";
    /** MINIS_LAST_ACTIVE_TIME - MINIS_LAST_ACTIVE_TIME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINIS_LAST_ACTIVE_TIME"] = 184] = "MINIS_LAST_ACTIVE_TIME";
    /** DAYS_SINCE_FIRST_MINIS_ACTIVITY - DAYS_SINCE_FIRST_MINIS_ACTIVITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_MINIS_ACTIVITY"] = 185] = "DAYS_SINCE_FIRST_MINIS_ACTIVITY";
    /** DAYS_SINCE_LAST_MINIS_ACTIVITY - DAYS_SINCE_LAST_MINIS_ACTIVITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_MINIS_ACTIVITY"] = 186] = "DAYS_SINCE_LAST_MINIS_ACTIVITY";
    /** DEVICE_AV1_DECODING_SUPPORT - DEVICE_AV1_DECODING_SUPPORT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_AV1_DECODING_SUPPORT"] = 187] = "DEVICE_AV1_DECODING_SUPPORT";
    /** APP_PACKAGE_INSTALLER - APP_PACKAGE_INSTALLER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_PACKAGE_INSTALLER"] = 188] = "APP_PACKAGE_INSTALLER";
    /** STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL - STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL"] = 189] = "STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL";
    /** REPORTED_AGE - REPORTED_AGE (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REPORTED_AGE"] = 190] = "REPORTED_AGE";
    /** ANDROID_MOBILE_SERVICES_PROVIDER - ANDROID_MOBILE_SERVICES_PROVIDER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ANDROID_MOBILE_SERVICES_PROVIDER"] = 191] = "ANDROID_MOBILE_SERVICES_PROVIDER";
    /** IS_ACQUIRED_USER - IS_ACQUIRED_USER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ACQUIRED_USER"] = 192] = "IS_ACQUIRED_USER";
    /** YDPI - YDPI (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["YDPI"] = 193] = "YDPI";
    /** BIDIRECTIONAL_FRIEND_STATUS_VELLUM - BIDIRECTIONAL_FRIEND_STATUS_VELLUM (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BIDIRECTIONAL_FRIEND_STATUS_VELLUM"] = 194] = "BIDIRECTIONAL_FRIEND_STATUS_VELLUM";
    /** ORIGIN - ORIGIN (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORIGIN"] = 195] = "ORIGIN";
    /** LENSCORE_VERSION - LENSCORE_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENSCORE_VERSION"] = 196] = "LENSCORE_VERSION";
    /** SNAPKIT_APP_ID - SNAPKIT_APP_ID (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPKIT_APP_ID"] = 197] = "SNAPKIT_APP_ID";
    /** GPU - GPU (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GPU"] = 198] = "GPU";
    /** CHIPSET_NAME - CHIPSET_NAME (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHIPSET_NAME"] = 199] = "CHIPSET_NAME";
    /** CHIPSET_VERSION - CHIPSET_VERSION (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHIPSET_VERSION"] = 200] = "CHIPSET_VERSION";
    /** HAS_ZERO_IDFA - HAS_ZERO_IDFA (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ZERO_IDFA"] = 201] = "HAS_ZERO_IDFA";
    /** LIMIT_AD_TRACKING - LIMIT_AD_TRACKING (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LIMIT_AD_TRACKING"] = 202] = "LIMIT_AD_TRACKING";
    /** ATT_AUTH_STATUS - ATT_AUTH_STATUS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ATT_AUTH_STATUS"] = 203] = "ATT_AUTH_STATUS";
    /** CAMERA2_FRONT_SS_GAIN_OVER_TPA - CAMERA2_FRONT_SS_GAIN_OVER_TPA (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_FRONT_SS_GAIN_OVER_TPA"] = 204] = "CAMERA2_FRONT_SS_GAIN_OVER_TPA";
    /** ATTACHMENT_TOOL_V2 - ATTACHMENT_TOOL_V2 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ATTACHMENT_TOOL_V2"] = 205] = "ATTACHMENT_TOOL_V2";
    /** USER_PERSONA_V3 - USER_PERSONA_V3 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PERSONA_V3"] = 206] = "USER_PERSONA_V3";
    /** SNAPS_SEND_WITH_HEVC - SNAPS_SEND_WITH_HEVC (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPS_SEND_WITH_HEVC"] = 207] = "SNAPS_SEND_WITH_HEVC";
    /** SNAPS_SEND_WITHOUT_HEVC - SNAPS_SEND_WITHOUT_HEVC (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPS_SEND_WITHOUT_HEVC"] = 208] = "SNAPS_SEND_WITHOUT_HEVC";
    /** CAMERA2_NATIVE_CRASH_OVER_CAMERA1 - CAMERA2_NATIVE_CRASH_OVER_CAMERA1 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_NATIVE_CRASH_OVER_CAMERA1"] = 209] = "CAMERA2_NATIVE_CRASH_OVER_CAMERA1";
    /** CAMERA2_G2S_LATENCY_OVER_CAMERA1 - CAMERA2_G2S_LATENCY_OVER_CAMERA1 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_G2S_LATENCY_OVER_CAMERA1"] = 210] = "CAMERA2_G2S_LATENCY_OVER_CAMERA1";
    /** IS_INTERNAL - IS_INTERNAL (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_INTERNAL"] = 211] = "IS_INTERNAL";
    /** IS_WEB - IS_WEB (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_WEB"] = 212] = "IS_WEB";
    /** APP_OPEN_TO_MAP - APP_OPEN_TO_MAP (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_MAP"] = 213] = "APP_OPEN_TO_MAP";
    /** APP_OPEN_TO_FRIENDSFEED - APP_OPEN_TO_FRIENDSFEED (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_FRIENDSFEED"] = 214] = "APP_OPEN_TO_FRIENDSFEED";
    /** APP_OPEN_TO_LENSES - APP_OPEN_TO_LENSES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_LENSES"] = 215] = "APP_OPEN_TO_LENSES";
    /** APP_OPEN_TO_MEMORIES - APP_OPEN_TO_MEMORIES (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_MEMORIES"] = 216] = "APP_OPEN_TO_MEMORIES";
    /** APP_OPEN_TO_COMMUNITY - APP_OPEN_TO_COMMUNITY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_COMMUNITY"] = 217] = "APP_OPEN_TO_COMMUNITY";
    /** APP_OPEN_TO_SPOTLIGHT - APP_OPEN_TO_SPOTLIGHT (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_SPOTLIGHT"] = 218] = "APP_OPEN_TO_SPOTLIGHT";
    /** IS_IMPACTED_BY_PINC_893 - IS_IMPACTED_BY_PINC_893 (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_IMPACTED_BY_PINC_893"] = 219] = "IS_IMPACTED_BY_PINC_893";
    /** DAYS_BEFORE_BIRTHDAY - DAYS_BEFORE_BIRTHDAY (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_BEFORE_BIRTHDAY"] = 220] = "DAYS_BEFORE_BIRTHDAY";
    /** HAS_BIPA - HAS_BIPA (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_BIPA"] = 221] = "HAS_BIPA";
    /** SPOTLIGHT_STORY_ENGAGEMENT_STATUS - SPOTLIGHT_STORY_ENGAGEMENT_STATUS (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPOTLIGHT_STORY_ENGAGEMENT_STATUS"] = 222] = "SPOTLIGHT_STORY_ENGAGEMENT_STATUS";
    /** INCLUSION_PANEL_MEMBER - INCLUSION_PANEL_MEMBER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["INCLUSION_PANEL_MEMBER"] = 223] = "INCLUSION_PANEL_MEMBER";
    /** HEVC_HW_DECODER - HEVC_HW_DECODER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_HW_DECODER"] = 224] = "HEVC_HW_DECODER";
    /** HEVC_SW_DECODER - HEVC_SW_DECODER (variant copied from TargetingProperty.Property) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_SW_DECODER"] = 225] = "HEVC_SW_DECODER";
    /**
     * HASH_MURMUR3_128_MOD_100 - Value of a Murmur3 hash of one of the hash_signals fields modulo 100
     * PropertyMetadata.signal_to_hash determines which field should be hashed
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HASH_MURMUR3_128_MOD_100"] = 226] = "HASH_MURMUR3_128_MOD_100";
    /** HAS_ACTIVE_SNAPCHAT_PLUS - Whether user has active Snapchat+ subscription in Atlas's UserData plus_subscription_info property */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ACTIVE_SNAPCHAT_PLUS"] = 227] = "HAS_ACTIVE_SNAPCHAT_PLUS";
    /** SNAP_KIT_OAUTH_ID - OAuth Client ID identifying the source third party application for Snap Kit content */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_KIT_OAUTH_ID"] = 228] = "SNAP_KIT_OAUTH_ID";
    /** ORGANIZATION_TYPE - Organization type of advertiser purchasing ads */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORGANIZATION_TYPE"] = 229] = "ORGANIZATION_TYPE";
    /**
     * CHUNK_UPLOAD_SUPPORT_REQUIRED - Client provided boolean that represent whether the config
     * needs to support uploading in a chunked/streaming manner
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHUNK_UPLOAD_SUPPORT_REQUIRED"] = 230] = "CHUNK_UPLOAD_SUPPORT_REQUIRED";
    /** CLOUDFRONT_POP - The last known CloudFront Point of Presence used */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CLOUDFRONT_POP"] = 231] = "CLOUDFRONT_POP";
    /** BILLBOARD_CAMPAIGN_LOCAL_FIRST_IMPRESSION_TIME_SECS_TO_NOW - Billboard locally tracked first impresstion time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_IMPRESSION_TIME_SECS_TO_NOW"] = 232] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_IMPRESSION_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_CLICK_COUNT - Billboard locally tracked click count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_CLICK_COUNT"] = 233] = "BILLBOARD_CAMPAIGN_LOCAL_CLICK_COUNT";
    /** BILLBOARD_CAMPAIGN_LOCAL_INTERACTION_COUNT - Billboard locally tracked interaction count */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_INTERACTION_COUNT"] = 234] = "BILLBOARD_CAMPAIGN_LOCAL_INTERACTION_COUNT";
    /** BILLBOARD_CAMPAIGN_LOCAL_LAST_INTERACTION_TIME_SECS_TO_NOW - Billboard locally tracked last interaction time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_INTERACTION_TIME_SECS_TO_NOW"] = 235] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_INTERACTION_TIME_SECS_TO_NOW";
    /** FST_LOCK_SCREEN_WIDGET_BILLBOARD_LAUNCHED_FROM_PUSH - Lock screen widgets billboard - app open via push notification */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_LOCK_SCREEN_WIDGET_BILLBOARD_LAUNCHED_FROM_PUSH"] = 236] = "FST_LOCK_SCREEN_WIDGET_BILLBOARD_LAUNCHED_FROM_PUSH";
    /** WEB_SCREEN_WIDTH - Web browser screen width in CSS pixels */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEB_SCREEN_WIDTH"] = 237] = "WEB_SCREEN_WIDTH";
    /** WEB_SCREEN_HEIGHT - Web browser screen height in CSS pixels */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEB_SCREEN_HEIGHT"] = 238] = "WEB_SCREEN_HEIGHT";
    /** SUP_IOS_LOCK_SCREEN_WIDGET_ENABLED - iOS 16 lock screen widgets enabled */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_IOS_LOCK_SCREEN_WIDGET_ENABLED"] = 239] = "SUP_IOS_LOCK_SCREEN_WIDGET_ENABLED";
    /** SNAP_PRIVACY - Atlas enum property that indicates a user's snap privacy settings (Friends vs. Everyone) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PRIVACY"] = 240] = "SNAP_PRIVACY";
    /** ADS_INTERFACES_IS_NEW_ORGANIZATION - Is a new organization in ads interfaces UI */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ADS_INTERFACES_IS_NEW_ORGANIZATION"] = 241] = "ADS_INTERFACES_IS_NEW_ORGANIZATION";
    /** SERVER_ONLY - if true only server callers can get the config */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SERVER_ONLY"] = 242] = "SERVER_ONLY";
    /** GHE_ORGANIZATION - The Github Enterprise organization */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_ORGANIZATION"] = 243] = "GHE_ORGANIZATION";
    /** GHE_REPOSITORY - The Github Enterprise Repository, which is contained by a GHE organization */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_REPOSITORY"] = 244] = "GHE_REPOSITORY";
    /** GHE_USER_EMAIL - In the context of Machamp, the user identifier (email) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_USER_EMAIL"] = 245] = "GHE_USER_EMAIL";
    /** BUILD_DEFINITION_ID - In the context of Machamp, the build definition identifier is a UUID hash of the GHE organization and and repository. */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_DEFINITION_ID"] = 246] = "BUILD_DEFINITION_ID";
    /** BUILD_DEFINITION_NAME - In the context of Machamp, the build definition name is name of the build from the build.yaml */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_DEFINITION_NAME"] = 247] = "BUILD_DEFINITION_NAME";
    /** LCA_PRINCIPAL - LCA Principal of the service calling Circumstance Engine */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LCA_PRINCIPAL"] = 248] = "LCA_PRINCIPAL";
    /**
     * MEDIA_PERFORMANCE_CLASS - A performance class defines a set of device capabilities by Android
     * e.g. 30, 31, See https://android-developers.googleblog.com/2022/03/using-performance-class-to-optimize.html
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_PERFORMANCE_CLASS"] = 249] = "MEDIA_PERFORMANCE_CLASS";
    /** COMMUNITY_COUNT - Number of Communities user is in */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNITY_COUNT"] = 250] = "COMMUNITY_COUNT";
    /** RECIPIENTS_SUPPORT_FMP4 - A boolean indicating whether a group of recipients support fMP4 playback */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RECIPIENTS_SUPPORT_FMP4"] = 251] = "RECIPIENTS_SUPPORT_FMP4";
    /** SCREEN_ASPECT_RATIO - The screen aspect ratio. It's the result of SCREEN_WIDTH / SCREEN_HEIGHT */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_ASPECT_RATIO"] = 252] = "SCREEN_ASPECT_RATIO";
    /**
     * USER_GROUP - USER GROUP. This property is not expected to ever be supported on any
     * of the clients, but is rather needed to signal to the client that a given
     * config depends on an unsupported property, so that the client can emit a metric
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_GROUP"] = 253] = "USER_GROUP";
    /**
     * USER_HAS_DENIED_CAMERA_PERM - A boolean value indicating whether the user has denied camera permission. And the property
     * value would remain TRUE for users who have ever denied camera permission since first time
     * of reading the property value
     * New users are by default denied camera permission.
     *
     * @deprecated
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_HAS_DENIED_CAMERA_PERM"] = 254] = "USER_HAS_DENIED_CAMERA_PERM";
    /**
     * CAMEOS_ENGAGEMENT_LEVEL - Cameos engagement level based on number of Cameos views in the last 7 days.
     * e.g. IDLE, CASUAL, REGULAR, POWER
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMEOS_ENGAGEMENT_LEVEL"] = 255] = "CAMEOS_ENGAGEMENT_LEVEL";
    /**
     * HAS_CAMEOS - Whether the user has Cameos.
     * e.g. TRUE, FALSE
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_CAMEOS"] = 256] = "HAS_CAMEOS";
    /**
     * IS_ACTIVE_LENS_VIDEO_CHAT_USER - Whether the user has interacted with lenses in video chat in the last 7 days.
     * e.g. TRUE, FALSE
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ACTIVE_LENS_VIDEO_CHAT_USER"] = 257] = "IS_ACTIVE_LENS_VIDEO_CHAT_USER";
    /**
     * NUM_SPOTLIGHT_POSTS_L7 - The number of Spotlight posts a user has made in the last 7 days.
     * e.g. 0, 100, 1000
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_SPOTLIGHT_POSTS_L7"] = 258] = "NUM_SPOTLIGHT_POSTS_L7";
    /**
     * NUM_MAP_POSTS_L7 - The number of Map posts a user has made in the last 7 days.
     * e.g. 0, 100, 1000
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_MAP_POSTS_L7"] = 259] = "NUM_MAP_POSTS_L7";
    /**
     * HAS_CREATED_PUBLIC_PROFILE - Whether a user has created a public profile.
     * e.g. TRUE, FALSE
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_CREATED_PUBLIC_PROFILE"] = 260] = "HAS_CREATED_PUBLIC_PROFILE";
    /**
     * HAS_PUBLIC_PROFILE_ACCESS_VIA_ROLE - Whether a user has access to a public profile via a role.
     * e.g. TRUE, FALSE
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_PUBLIC_PROFILE_ACCESS_VIA_ROLE"] = 261] = "HAS_PUBLIC_PROFILE_ACCESS_VIA_ROLE";
    /**
     * DAYS_SINCE_LAST_CAMERA_PERM_DENY - Integer value represents the number of days since last time the user denied camera permission.
     * Default value is -1 if user has no record of denying camera permission (the user has granted camera permission permanently).
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_CAMERA_PERM_DENY"] = 262] = "DAYS_SINCE_LAST_CAMERA_PERM_DENY";
    /** DAYS_SINCE_AD_ORG_JOIN - The days since the user last joined an ads manager organization */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_AD_ORG_JOIN"] = 263] = "DAYS_SINCE_AD_ORG_JOIN";
    /** DAYS_SINCE_FIRST_AD_CREATE - The days since the user created an ad within ads manager via their ad organization */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_AD_CREATE"] = 264] = "DAYS_SINCE_FIRST_AD_CREATE";
    /** ORGANIZATION_COUNTRY - Organization country */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORGANIZATION_COUNTRY"] = 265] = "ORGANIZATION_COUNTRY";
    /** DAYS_SINCE_FIRST_DWEB_VISIT - The days since the user first visited dWeb (Web Chat) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_DWEB_VISIT"] = 266] = "DAYS_SINCE_FIRST_DWEB_VISIT";
    /** DAYS_SINCE_LAST_DWEB_VISIT - The days since the user has last visited dWeb (Web Chat) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_DWEB_VISIT"] = 267] = "DAYS_SINCE_LAST_DWEB_VISIT";
    /** WEEKS_SINCE_USING_DWEB - The weeks group in which the user has been absent from dWeb (Web Chat) */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEEKS_SINCE_USING_DWEB"] = 268] = "WEEKS_SINCE_USING_DWEB";
    /** HAS_LENS - Whether a capture session has lens */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_LENS"] = 269] = "HAS_LENS";
    /**
     * BILLBOARD_SERVER_IMPRESSION_COUNT - Billboard Cooldown and Cap Unit will support these properties
     * Basic Counter for impression / click / dismiss
     */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_IMPRESSION_COUNT"] = 270] = "BILLBOARD_SERVER_IMPRESSION_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_CLICK_COUNT"] = 271] = "BILLBOARD_SERVER_CLICK_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_DISMISS_COUNT"] = 272] = "BILLBOARD_SERVER_DISMISS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_INTERACTION_COUNT"] = 273] = "BILLBOARD_SERVER_INTERACTION_COUNT";
    /** BILLBOARD_SERVER_FIRST_IMPRESSION_TIME_SECS_TO_NOW - Time to now signals in Seconds */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_IMPRESSION_TIME_SECS_TO_NOW"] = 274] = "BILLBOARD_SERVER_FIRST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_IMPRESSION_TIME_SECS_TO_NOW"] = 275] = "BILLBOARD_SERVER_LAST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_CLICK_TIME_SECS_TO_NOW"] = 276] = "BILLBOARD_SERVER_FIRST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_CLICK_TIME_SECS_TO_NOW"] = 277] = "BILLBOARD_SERVER_LAST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_DISMISS_TIME_SECS_TO_NOW"] = 278] = "BILLBOARD_SERVER_FIRST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_DISMISS_TIME_SECS_TO_NOW"] = 279] = "BILLBOARD_SERVER_LAST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_INTERACTION_TIME_SECS_TO_NOW"] = 280] = "BILLBOARD_SERVER_FIRST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_INTERACTION_TIME_SECS_TO_NOW"] = 281] = "BILLBOARD_SERVER_LAST_INTERACTION_TIME_SECS_TO_NOW";
    /** BILLBOARD_SERVER_CONTINUOUS_DISMISS_COUNT - Continuous Counter */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_CONTINUOUS_DISMISS_COUNT"] = 282] = "BILLBOARD_SERVER_CONTINUOUS_DISMISS_COUNT";
    /** BILLBOARD_CAMPAIGN_LOCAL_FIRST_CLICK_TIME_SECS_TO_NOW - Billboard first click time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_CLICK_TIME_SECS_TO_NOW"] = 283] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_CLICK_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_LAST_CLICK_TIME_SECS_TO_NOW - Billboard last click time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_CLICK_TIME_SECS_TO_NOW"] = 284] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_CLICK_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_FIRST_DISMISS_TIME_SECS_TO_NOW - Billboard first dismiss time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_DISMISS_TIME_SECS_TO_NOW"] = 285] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_DISMISS_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_LAST_DISMISS_TIME_SECS_TO_NOW - Billboard last dismiss time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_DISMISS_TIME_SECS_TO_NOW"] = 286] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_DISMISS_TIME_SECS_TO_NOW";
    /** BILLBOARD_CAMPAIGN_LOCAL_FIRST_INTERACTION_TIME_SECS_TO_NOW - Billboard locally tracked first interaction time to now */
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_INTERACTION_TIME_SECS_TO_NOW"] = 287] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_Property || (ClientTargetingExpression_Property = {}));
/**
 * Which field of feature_provided_signals.hash_signals to hash
 * To be used by the HASH_MURMUR3_128_MOD_100 property only
 */
var ClientTargetingExpression_PropertyMetadata_SignalToHash;
(function (ClientTargetingExpression_PropertyMetadata_SignalToHash) {
    /** UNKNOWN_SIGNAL_TO_HASH - Unset variant */
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["UNKNOWN_SIGNAL_TO_HASH"] = 0] = "UNKNOWN_SIGNAL_TO_HASH";
    /**
     * HASH_SEED_AND_USER_ID - Indicates that seed+user_id string should be hashed
     * (namespace is supplied by the server, user_id - by the client)
     */
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["HASH_SEED_AND_USER_ID"] = 1] = "HASH_SEED_AND_USER_ID";
    /**
     * HASH_USER_ID_AND_NAMESPACE - Indicates that used_id+namespace string should be hashed
     * (seed is supplied by the server, user_id - by the client)
     */
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["HASH_USER_ID_AND_NAMESPACE"] = 2] = "HASH_USER_ID_AND_NAMESPACE";
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ClientTargetingExpression_PropertyMetadata_SignalToHash || (ClientTargetingExpression_PropertyMetadata_SignalToHash = {}));
function createBaseConfigResult() {
    return {
        configId: "",
        value: undefined,
        targetingExpression: undefined,
        ttlSeconds: 0,
        configRuleUuidBytes: new Uint8Array(),
        priority: 0,
        namespace: 0,
        studyName: "",
        experimentId: 0,
        delete: false,
        servePlatforms: [],
        sequenceId: 0,
        ruidType: 0,
        segmentOrdinal: 0,
        generatedFromAbAllowlists: false,
    };
}
const ConfigResult = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.configId !== "") {
            writer.uint32(10).string(message.configId);
        }
        if (message.value !== undefined) {
            Value.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        if (message.targetingExpression !== undefined) {
            ClientTargetingExpression.encode(message.targetingExpression, writer.uint32(26).fork()).ldelim();
        }
        if (message.ttlSeconds !== 0) {
            writer.uint32(32).int64(message.ttlSeconds);
        }
        if (message.configRuleUuidBytes.length !== 0) {
            writer.uint32(42).bytes(message.configRuleUuidBytes);
        }
        if (message.priority !== 0) {
            writer.uint32(48).int32(message.priority);
        }
        if (message.namespace !== 0) {
            writer.uint32(56).int32(message.namespace);
        }
        if (message.studyName !== "") {
            writer.uint32(66).string(message.studyName);
        }
        if (message.experimentId !== 0) {
            writer.uint32(72).int32(message.experimentId);
        }
        if (message.delete === true) {
            writer.uint32(80).bool(message.delete);
        }
        writer.uint32(90).fork();
        for (const v of message.servePlatforms) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.sequenceId !== 0) {
            writer.uint32(96).int32(message.sequenceId);
        }
        if (message.ruidType !== 0) {
            writer.uint32(104).int32(message.ruidType);
        }
        if (message.segmentOrdinal !== 0) {
            writer.uint32(112).int32(message.segmentOrdinal);
        }
        if (message.generatedFromAbAllowlists === true) {
            writer.uint32(120).bool(message.generatedFromAbAllowlists);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configId = reader.string();
                    break;
                case 2:
                    message.value = Value.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.targetingExpression = ClientTargetingExpression.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ttlSeconds = config_result_longToNumber(reader.int64());
                    break;
                case 5:
                    message.configRuleUuidBytes = reader.bytes();
                    break;
                case 6:
                    message.priority = reader.int32();
                    break;
                case 7:
                    message.namespace = reader.int32();
                    break;
                case 8:
                    message.studyName = reader.string();
                    break;
                case 9:
                    message.experimentId = reader.int32();
                    break;
                case 10:
                    message.delete = reader.bool();
                    break;
                case 11:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.servePlatforms.push(reader.int32());
                        }
                    }
                    else {
                        message.servePlatforms.push(reader.int32());
                    }
                    break;
                case 12:
                    message.sequenceId = reader.int32();
                    break;
                case 13:
                    message.ruidType = reader.int32();
                    break;
                case 14:
                    message.segmentOrdinal = reader.int32();
                    break;
                case 15:
                    message.generatedFromAbAllowlists = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseConfigResult();
        message.configId = (_a = object.configId) !== null && _a !== void 0 ? _a : "";
        message.value = object.value !== undefined && object.value !== null ? Value.fromPartial(object.value) : undefined;
        message.targetingExpression =
            object.targetingExpression !== undefined && object.targetingExpression !== null
                ? ClientTargetingExpression.fromPartial(object.targetingExpression)
                : undefined;
        message.ttlSeconds = (_b = object.ttlSeconds) !== null && _b !== void 0 ? _b : 0;
        message.configRuleUuidBytes = (_c = object.configRuleUuidBytes) !== null && _c !== void 0 ? _c : new Uint8Array();
        message.priority = (_d = object.priority) !== null && _d !== void 0 ? _d : 0;
        message.namespace = (_e = object.namespace) !== null && _e !== void 0 ? _e : 0;
        message.studyName = (_f = object.studyName) !== null && _f !== void 0 ? _f : "";
        message.experimentId = (_g = object.experimentId) !== null && _g !== void 0 ? _g : 0;
        message.delete = (_h = object.delete) !== null && _h !== void 0 ? _h : false;
        message.servePlatforms = ((_j = object.servePlatforms) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.sequenceId = (_k = object.sequenceId) !== null && _k !== void 0 ? _k : 0;
        message.ruidType = (_l = object.ruidType) !== null && _l !== void 0 ? _l : 0;
        message.segmentOrdinal = (_m = object.segmentOrdinal) !== null && _m !== void 0 ? _m : 0;
        message.generatedFromAbAllowlists = (_o = object.generatedFromAbAllowlists) !== null && _o !== void 0 ? _o : false;
        return message;
    },
};
function createBaseConfigResultBundle() {
    return { etag: "", configResults: [] };
}
const ConfigResultBundle = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.etag !== "") {
            writer.uint32(10).string(message.etag);
        }
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigResultBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.etag = reader.string();
                    break;
                case 2:
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseConfigResultBundle();
        message.etag = (_a = object.etag) !== null && _a !== void 0 ? _a : "";
        message.configResults = ((_b = object.configResults) === null || _b === void 0 ? void 0 : _b.map((e) => ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function createBaseClientTargetingExpression() {
    return {
        operator: 0,
        children: [],
        property: 0,
        predicateOperator: 0,
        value: undefined,
        propertyMetadata: undefined,
    };
}
const ClientTargetingExpression = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.operator !== 0) {
            writer.uint32(8).int32(message.operator);
        }
        for (const v of message.children) {
            ClientTargetingExpression.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.property !== 0) {
            writer.uint32(24).int32(message.property);
        }
        if (message.predicateOperator !== 0) {
            writer.uint32(32).int32(message.predicateOperator);
        }
        if (message.value !== undefined) {
            Value.encode(message.value, writer.uint32(42).fork()).ldelim();
        }
        if (message.propertyMetadata !== undefined) {
            ClientTargetingExpression_PropertyMetadata.encode(message.propertyMetadata, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientTargetingExpression();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.int32();
                    break;
                case 2:
                    message.children.push(ClientTargetingExpression.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.property = reader.int32();
                    break;
                case 4:
                    message.predicateOperator = reader.int32();
                    break;
                case 5:
                    message.value = Value.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.propertyMetadata = ClientTargetingExpression_PropertyMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseClientTargetingExpression();
        message.operator = (_a = object.operator) !== null && _a !== void 0 ? _a : 0;
        message.children = ((_b = object.children) === null || _b === void 0 ? void 0 : _b.map((e) => ClientTargetingExpression.fromPartial(e))) || [];
        message.property = (_c = object.property) !== null && _c !== void 0 ? _c : 0;
        message.predicateOperator = (_d = object.predicateOperator) !== null && _d !== void 0 ? _d : 0;
        message.value = object.value !== undefined && object.value !== null ? Value.fromPartial(object.value) : undefined;
        message.propertyMetadata =
            object.propertyMetadata !== undefined && object.propertyMetadata !== null
                ? ClientTargetingExpression_PropertyMetadata.fromPartial(object.propertyMetadata)
                : undefined;
        return message;
    },
};
function createBaseClientTargetingExpression_PropertyMetadata() {
    return { itemId: 0, signalToHash: 0, abNamespaceForHashing: "", abSeedForHashing: "" };
}
const ClientTargetingExpression_PropertyMetadata = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.itemId !== 0) {
            writer.uint32(8).int32(message.itemId);
        }
        if (message.signalToHash !== 0) {
            writer.uint32(16).int32(message.signalToHash);
        }
        if (message.abNamespaceForHashing !== "") {
            writer.uint32(26).string(message.abNamespaceForHashing);
        }
        if (message.abSeedForHashing !== "") {
            writer.uint32(34).string(message.abSeedForHashing);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClientTargetingExpression_PropertyMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.itemId = reader.int32();
                    break;
                case 2:
                    message.signalToHash = reader.int32();
                    break;
                case 3:
                    message.abNamespaceForHashing = reader.string();
                    break;
                case 4:
                    message.abSeedForHashing = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseClientTargetingExpression_PropertyMetadata();
        message.itemId = (_a = object.itemId) !== null && _a !== void 0 ? _a : 0;
        message.signalToHash = (_b = object.signalToHash) !== null && _b !== void 0 ? _b : 0;
        message.abNamespaceForHashing = (_c = object.abNamespaceForHashing) !== null && _c !== void 0 ? _c : "";
        message.abSeedForHashing = (_d = object.abSeedForHashing) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
var config_result_globalThis = (() => {
    if (typeof config_result_globalThis !== "undefined")
        return config_result_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function config_result_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new config_result_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=config_result.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/config_response.js
/* eslint-disable */




const config_response_protobufPackage = "snapchat.cdp.cof";
function createBaseConfigTargetingResponseDebugData() {
    return { abResultChecksumInput: "" };
}
const ConfigTargetingResponseDebugData = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.abResultChecksumInput !== "") {
            writer.uint32(10).string(message.abResultChecksumInput);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingResponseDebugData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.abResultChecksumInput = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseConfigTargetingResponseDebugData();
        message.abResultChecksumInput = (_a = object.abResultChecksumInput) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseConfigTargetingResponse() {
    return {
        configResults: [],
        configResultsEtag: "",
        benchmarkRequest: undefined,
        fullResults: false,
        abResultChecksum: 0,
        iso3166Alpha2CountryCodeFromRequestIp: "",
        debugData: undefined,
    };
}
const ConfigTargetingResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.configResultsEtag !== "") {
            writer.uint32(18).string(message.configResultsEtag);
        }
        if (message.benchmarkRequest !== undefined) {
            BenchmarkRequest.encode(message.benchmarkRequest, writer.uint32(26).fork()).ldelim();
        }
        if (message.fullResults === true) {
            writer.uint32(32).bool(message.fullResults);
        }
        if (message.abResultChecksum !== 0) {
            writer.uint32(40).int32(message.abResultChecksum);
        }
        if (message.iso3166Alpha2CountryCodeFromRequestIp !== "") {
            writer.uint32(50).string(message.iso3166Alpha2CountryCodeFromRequestIp);
        }
        if (message.debugData !== undefined) {
            ConfigTargetingResponseDebugData.encode(message.debugData, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.configResultsEtag = reader.string();
                    break;
                case 3:
                    message.benchmarkRequest = BenchmarkRequest.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.fullResults = reader.bool();
                    break;
                case 5:
                    message.abResultChecksum = reader.int32();
                    break;
                case 6:
                    message.iso3166Alpha2CountryCodeFromRequestIp = reader.string();
                    break;
                case 7:
                    message.debugData = ConfigTargetingResponseDebugData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseConfigTargetingResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        message.configResultsEtag = (_b = object.configResultsEtag) !== null && _b !== void 0 ? _b : "";
        message.benchmarkRequest =
            object.benchmarkRequest !== undefined && object.benchmarkRequest !== null
                ? BenchmarkRequest.fromPartial(object.benchmarkRequest)
                : undefined;
        message.fullResults = (_c = object.fullResults) !== null && _c !== void 0 ? _c : false;
        message.abResultChecksum = (_d = object.abResultChecksum) !== null && _d !== void 0 ? _d : 0;
        message.iso3166Alpha2CountryCodeFromRequestIp = (_e = object.iso3166Alpha2CountryCodeFromRequestIp) !== null && _e !== void 0 ? _e : "";
        message.debugData =
            object.debugData !== undefined && object.debugData !== null
                ? ConfigTargetingResponseDebugData.fromPartial(object.debugData)
                : undefined;
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=config_response.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/debug_info.js
/* eslint-disable */


const debug_info_protobufPackage = "snapchat.cdp.cof";
/** Steps for AB process. */
var AbStep;
(function (AbStep) {
    AbStep[AbStep["USER_WHITELISTED"] = 0] = "USER_WHITELISTED";
    AbStep[AbStep["USER_GROUP_WHITELISTED"] = 1] = "USER_GROUP_WHITELISTED";
    AbStep[AbStep["FILTER_CONDITIONS"] = 2] = "FILTER_CONDITIONS";
    AbStep[AbStep["SLICE_RANGE"] = 3] = "SLICE_RANGE";
    AbStep[AbStep["TRAFFIC_ALLOCATED"] = 4] = "TRAFFIC_ALLOCATED";
    AbStep[AbStep["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AbStep || (AbStep = {}));
/** Steps for COF process. */
var CofStep;
(function (CofStep) {
    CofStep[CofStep["VALIDATE_REQUEST"] = 0] = "VALIDATE_REQUEST";
    CofStep[CofStep["REQUEST_ATLAS"] = 1] = "REQUEST_ATLAS";
    CofStep[CofStep["BUILD_TARGETING_INFO"] = 2] = "BUILD_TARGETING_INFO";
    CofStep[CofStep["QUERY_INDEX"] = 3] = "QUERY_INDEX";
    CofStep[CofStep["REQUEST_AB"] = 4] = "REQUEST_AB";
    CofStep[CofStep["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CofStep || (CofStep = {}));
function createBaseAbStepInfo() {
    return { abStep: 0, info: "" };
}
const AbStepInfo = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.abStep !== 0) {
            writer.uint32(8).int32(message.abStep);
        }
        if (message.info !== "") {
            writer.uint32(18).string(message.info);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAbStepInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.abStep = reader.int32();
                    break;
                case 2:
                    message.info = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAbStepInfo();
        message.abStep = (_a = object.abStep) !== null && _a !== void 0 ? _a : 0;
        message.info = (_b = object.info) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseCofStepInfo() {
    return { cofStep: 0, info: "" };
}
const CofStepInfo = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.cofStep !== 0) {
            writer.uint32(8).int32(message.cofStep);
        }
        if (message.info !== "") {
            writer.uint32(18).string(message.info);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCofStepInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.cofStep = reader.int32();
                    break;
                case 2:
                    message.info = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCofStepInfo();
        message.cofStep = (_a = object.cofStep) !== null && _a !== void 0 ? _a : 0;
        message.info = (_b = object.info) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseDebugTrace() {
    return { lastCofStep: undefined, lastAbStep: undefined, budgetGroupId: 0 };
}
const DebugTrace = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.lastCofStep !== undefined) {
            CofStepInfo.encode(message.lastCofStep, writer.uint32(10).fork()).ldelim();
        }
        if (message.lastAbStep !== undefined) {
            AbStepInfo.encode(message.lastAbStep, writer.uint32(18).fork()).ldelim();
        }
        if (message.budgetGroupId !== 0) {
            writer.uint32(24).uint32(message.budgetGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDebugTrace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lastCofStep = CofStepInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.lastAbStep = AbStepInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.budgetGroupId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDebugTrace();
        message.lastCofStep =
            object.lastCofStep !== undefined && object.lastCofStep !== null
                ? CofStepInfo.fromPartial(object.lastCofStep)
                : undefined;
        message.lastAbStep =
            object.lastAbStep !== undefined && object.lastAbStep !== null
                ? AbStepInfo.fromPartial(object.lastAbStep)
                : undefined;
        message.budgetGroupId = (_a = object.budgetGroupId) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=debug_info.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/circumstance_service.js
/* eslint-disable */








const circumstance_service_protobufPackage = "snapchat.cdp.cof";
function createBaseGetAbConfigValuesRequest() {
    return {
        configNames: [],
        namespaces: [],
        cofConfigNames: [],
        includeAllConfigs: false,
        disableExposureLogging: false,
        enableDebug: false,
    };
}
const GetAbConfigValuesRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.configNames) {
            writer.uint32(10).string(v);
        }
        writer.uint32(18).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.cofConfigNames) {
            writer.uint32(26).string(v);
        }
        if (message.includeAllConfigs === true) {
            writer.uint32(32).bool(message.includeAllConfigs);
        }
        if (message.disableExposureLogging === true) {
            writer.uint32(40).bool(message.disableExposureLogging);
        }
        if (message.enableDebug === true) {
            writer.uint32(104).bool(message.enableDebug);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAbConfigValuesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configNames.push(reader.string());
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                    }
                    else {
                        message.namespaces.push(reader.int32());
                    }
                    break;
                case 3:
                    message.cofConfigNames.push(reader.string());
                    break;
                case 4:
                    message.includeAllConfigs = reader.bool();
                    break;
                case 5:
                    message.disableExposureLogging = reader.bool();
                    break;
                case 13:
                    message.enableDebug = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseGetAbConfigValuesRequest();
        message.configNames = ((_a = object.configNames) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.namespaces = ((_b = object.namespaces) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.cofConfigNames = ((_c = object.cofConfigNames) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.includeAllConfigs = (_d = object.includeAllConfigs) !== null && _d !== void 0 ? _d : false;
        message.disableExposureLogging = (_e = object.disableExposureLogging) !== null && _e !== void 0 ? _e : false;
        message.enableDebug = (_f = object.enableDebug) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function createBaseGetAbConfigValuesResponse() {
    return { configResults: [], debugTrace: undefined };
}
const GetAbConfigValuesResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.debugTrace !== undefined) {
            DebugTrace.encode(message.debugTrace, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAbConfigValuesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.debugTrace = DebugTrace.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetAbConfigValuesResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        message.debugTrace =
            object.debugTrace !== undefined && object.debugTrace !== null
                ? DebugTrace.fromPartial(object.debugTrace)
                : undefined;
        return message;
    },
};
function createBaseConfigSetGenerationRequest() {
    return { targetingParameters: undefined, overrides: [] };
}
const ConfigSetGenerationRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.targetingParameters !== undefined) {
            ConfigTargetingRequest.encode(message.targetingParameters, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.overrides) {
            ConfigResult.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigSetGenerationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetingParameters = ConfigTargetingRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.overrides.push(ConfigResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseConfigSetGenerationRequest();
        message.targetingParameters =
            object.targetingParameters !== undefined && object.targetingParameters !== null
                ? ConfigTargetingRequest.fromPartial(object.targetingParameters)
                : undefined;
        message.overrides = ((_a = object.overrides) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function createBaseConfigSetGenerationResponse() {
    return { targetingResponse: undefined };
}
const ConfigSetGenerationResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.targetingResponse !== undefined) {
            ConfigTargetingResponse.encode(message.targetingResponse, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigSetGenerationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetingResponse = ConfigTargetingResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseConfigSetGenerationResponse();
        message.targetingResponse =
            object.targetingResponse !== undefined && object.targetingResponse !== null
                ? ConfigTargetingResponse.fromPartial(object.targetingResponse)
                : undefined;
        return message;
    },
};
function createBasePinConfigRequest() {
    return { configSetToken: "", userId: "", ttlSeconds: 0 };
}
const PinConfigRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.configSetToken !== "") {
            writer.uint32(10).string(message.configSetToken);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.ttlSeconds !== 0) {
            writer.uint32(24).int32(message.ttlSeconds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePinConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configSetToken = reader.string();
                    break;
                case 2:
                    message.userId = reader.string();
                    break;
                case 3:
                    message.ttlSeconds = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePinConfigRequest();
        message.configSetToken = (_a = object.configSetToken) !== null && _a !== void 0 ? _a : "";
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        message.ttlSeconds = (_c = object.ttlSeconds) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBasePinConfigResponse() {
    return { debug: "" };
}
const PinConfigResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.debug !== "") {
            writer.uint32(10).string(message.debug);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePinConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.debug = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePinConfigResponse();
        message.debug = (_a = object.debug) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUnpinConfigRequest() {
    return { configSetToken: "", userId: "" };
}
const UnpinConfigRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.configSetToken !== "") {
            writer.uint32(10).string(message.configSetToken);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnpinConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configSetToken = reader.string();
                    break;
                case 2:
                    message.userId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUnpinConfigRequest();
        message.configSetToken = (_a = object.configSetToken) !== null && _a !== void 0 ? _a : "";
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUnpinConfigResponse() {
    return { debug: "" };
}
const UnpinConfigResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.debug !== "") {
            writer.uint32(10).string(message.debug);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnpinConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.debug = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUnpinConfigResponse();
        message.debug = (_a = object.debug) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseConfigWithNamespace() {
    return { configName: "", namespace: 0 };
}
const ConfigWithNamespace = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.configName !== "") {
            writer.uint32(10).string(message.configName);
        }
        if (message.namespace !== 0) {
            writer.uint32(16).int32(message.namespace);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigWithNamespace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configName = reader.string();
                    break;
                case 2:
                    message.namespace = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseConfigWithNamespace();
        message.configName = (_a = object.configName) !== null && _a !== void 0 ? _a : "";
        message.namespace = (_b = object.namespace) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseGetConfigValuesByTokenRequest() {
    return { token: "", configNames: [], namespaces: [], disableExposureLogging: false, getAllConfigs: false };
}
const GetConfigValuesByTokenRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        for (const v of message.configNames) {
            ConfigWithNamespace.encode(v, writer.uint32(18).fork()).ldelim();
        }
        writer.uint32(26).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.disableExposureLogging === true) {
            writer.uint32(32).bool(message.disableExposureLogging);
        }
        if (message.getAllConfigs === true) {
            writer.uint32(40).bool(message.getAllConfigs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConfigValuesByTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = reader.string();
                    break;
                case 2:
                    message.configNames.push(ConfigWithNamespace.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                    }
                    else {
                        message.namespaces.push(reader.int32());
                    }
                    break;
                case 4:
                    message.disableExposureLogging = reader.bool();
                    break;
                case 5:
                    message.getAllConfigs = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseGetConfigValuesByTokenRequest();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.configNames = ((_b = object.configNames) === null || _b === void 0 ? void 0 : _b.map((e) => ConfigWithNamespace.fromPartial(e))) || [];
        message.namespaces = ((_c = object.namespaces) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.disableExposureLogging = (_d = object.disableExposureLogging) !== null && _d !== void 0 ? _d : false;
        message.getAllConfigs = (_e = object.getAllConfigs) !== null && _e !== void 0 ? _e : false;
        return message;
    },
};
function createBaseGetConfigValuesByTokenResponse() {
    return { configResults: [] };
}
const GetConfigValuesByTokenResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConfigValuesByTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetConfigValuesByTokenResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetCachedConfigResultSequenceIdsRequest() {
    return {};
}
const GetCachedConfigResultSequenceIdsRequest = {
    encode(_, writer = minimal_default().Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCachedConfigResultSequenceIdsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseGetCachedConfigResultSequenceIdsRequest();
        return message;
    },
};
function createBaseGetCachedConfigResultSequenceIdsResponse() {
    return { serializedBitmap: new Uint8Array() };
}
const GetCachedConfigResultSequenceIdsResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.serializedBitmap.length !== 0) {
            writer.uint32(10).bytes(message.serializedBitmap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCachedConfigResultSequenceIdsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.serializedBitmap = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCachedConfigResultSequenceIdsResponse();
        message.serializedBitmap = (_a = object.serializedBitmap) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
function createBaseGetConfigResultsBySequenceIdsRequest() {
    return { sequenceIds: [] };
}
const GetConfigResultsBySequenceIdsRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.sequenceIds) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConfigResultsBySequenceIdsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.sequenceIds.push(reader.int32());
                        }
                    }
                    else {
                        message.sequenceIds.push(reader.int32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetConfigResultsBySequenceIdsRequest();
        message.sequenceIds = ((_a = object.sequenceIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseConfigResultWithSequenceId() {
    return { sequenceId: 0, configResult: undefined };
}
const ConfigResultWithSequenceId = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.sequenceId !== 0) {
            writer.uint32(8).int32(message.sequenceId);
        }
        if (message.configResult !== undefined) {
            ConfigResult.encode(message.configResult, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigResultWithSequenceId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sequenceId = reader.int32();
                    break;
                case 2:
                    message.configResult = ConfigResult.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseConfigResultWithSequenceId();
        message.sequenceId = (_a = object.sequenceId) !== null && _a !== void 0 ? _a : 0;
        message.configResult =
            object.configResult !== undefined && object.configResult !== null
                ? ConfigResult.fromPartial(object.configResult)
                : undefined;
        return message;
    },
};
function createBaseGetConfigResultsBySequenceIdsResponse() {
    return { configResultWithSequenceIds: [] };
}
const GetConfigResultsBySequenceIdsResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.configResultWithSequenceIds) {
            ConfigResultWithSequenceId.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConfigResultsBySequenceIdsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResultWithSequenceIds.push(ConfigResultWithSequenceId.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetConfigResultsBySequenceIdsResponse();
        message.configResultWithSequenceIds =
            ((_a = object.configResultWithSequenceIds) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResultWithSequenceId.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetBitmapByTokenRequest() {
    return { token: "" };
}
const GetBitmapByTokenRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetBitmapByTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetBitmapByTokenRequest();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetBitmapByTokenResponse() {
    return { idBitmap: new Uint8Array() };
}
const GetBitmapByTokenResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.idBitmap.length !== 0) {
            writer.uint32(10).bytes(message.idBitmap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetBitmapByTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.idBitmap = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetBitmapByTokenResponse();
        message.idBitmap = (_a = object.idBitmap) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
function createBaseGetConfigValuesRegionalRequest() {
    return {
        token: "",
        userId: "",
        userCacheTtlInSeconds: 0,
        userAgent: "",
        clientIp: "",
        deviceLocale: "",
        configNames: [],
        namespaces: [],
        disableExposureLogging: false,
    };
}
const GetConfigValuesRegionalRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.userCacheTtlInSeconds !== 0) {
            writer.uint32(24).int32(message.userCacheTtlInSeconds);
        }
        if (message.userAgent !== "") {
            writer.uint32(34).string(message.userAgent);
        }
        if (message.clientIp !== "") {
            writer.uint32(42).string(message.clientIp);
        }
        if (message.deviceLocale !== "") {
            writer.uint32(50).string(message.deviceLocale);
        }
        for (const v of message.configNames) {
            ConfigWithNamespace.encode(v, writer.uint32(58).fork()).ldelim();
        }
        writer.uint32(66).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.disableExposureLogging === true) {
            writer.uint32(72).bool(message.disableExposureLogging);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConfigValuesRegionalRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = reader.string();
                    break;
                case 2:
                    message.userId = reader.string();
                    break;
                case 3:
                    message.userCacheTtlInSeconds = reader.int32();
                    break;
                case 4:
                    message.userAgent = reader.string();
                    break;
                case 5:
                    message.clientIp = reader.string();
                    break;
                case 6:
                    message.deviceLocale = reader.string();
                    break;
                case 7:
                    message.configNames.push(ConfigWithNamespace.decode(reader, reader.uint32()));
                    break;
                case 8:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                    }
                    else {
                        message.namespaces.push(reader.int32());
                    }
                    break;
                case 9:
                    message.disableExposureLogging = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseGetConfigValuesRegionalRequest();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        message.userCacheTtlInSeconds = (_c = object.userCacheTtlInSeconds) !== null && _c !== void 0 ? _c : 0;
        message.userAgent = (_d = object.userAgent) !== null && _d !== void 0 ? _d : "";
        message.clientIp = (_e = object.clientIp) !== null && _e !== void 0 ? _e : "";
        message.deviceLocale = (_f = object.deviceLocale) !== null && _f !== void 0 ? _f : "";
        message.configNames = ((_g = object.configNames) === null || _g === void 0 ? void 0 : _g.map((e) => ConfigWithNamespace.fromPartial(e))) || [];
        message.namespaces = ((_h = object.namespaces) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.disableExposureLogging = (_j = object.disableExposureLogging) !== null && _j !== void 0 ? _j : false;
        return message;
    },
};
function createBaseGetConfigValuesRegionalResponse() {
    return { configResults: [] };
}
const GetConfigValuesRegionalResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetConfigValuesRegionalResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetConfigValuesRegionalResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetUnevaluatedConfigResultsWithAbTargetingRequest() {
    return { namespaces: [], edgeConfigClientVersion: "" };
}
const GetUnevaluatedConfigResultsWithAbTargetingRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.edgeConfigClientVersion !== "") {
            writer.uint32(18).string(message.edgeConfigClientVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUnevaluatedConfigResultsWithAbTargetingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                    }
                    else {
                        message.namespaces.push(reader.int32());
                    }
                    break;
                case 2:
                    message.edgeConfigClientVersion = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetUnevaluatedConfigResultsWithAbTargetingRequest();
        message.namespaces = ((_a = object.namespaces) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.edgeConfigClientVersion = (_b = object.edgeConfigClientVersion) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetUnevaluatedConfigResultsWithAbTargetingResponse() {
    return { configResults: [] };
}
const GetUnevaluatedConfigResultsWithAbTargetingResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUnevaluatedConfigResultsWithAbTargetingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetUnevaluatedConfigResultsWithAbTargetingResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
class CircumstancesServiceClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.targetingQuery = this.targetingQuery.bind(this);
        this.getAbConfigValues = this.getAbConfigValues.bind(this);
        this.getConfigValuesByToken = this.getConfigValuesByToken.bind(this);
        this.getConfigResultsBySequenceIds = this.getConfigResultsBySequenceIds.bind(this);
        this.getCachedConfigResultSequenceIds = this.getCachedConfigResultSequenceIds.bind(this);
        this.getBitmapByToken = this.getBitmapByToken.bind(this);
        this.generateConfigSet = this.generateConfigSet.bind(this);
        this.pinConfigSet = this.pinConfigSet.bind(this);
        this.unpinConfigSet = this.unpinConfigSet.bind(this);
        this.getUnevaluatedConfigResultsWithAbTargeting = this.getUnevaluatedConfigResultsWithAbTargeting.bind(this);
    }
    targetingQuery(request, metadata) {
        return this.rpc.unary(CircumstancesServicetargetingQueryDesc, ConfigTargetingRequest.fromPartial(request), metadata);
    }
    getAbConfigValues(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetAbConfigValuesDesc, GetAbConfigValuesRequest.fromPartial(request), metadata);
    }
    getConfigValuesByToken(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetConfigValuesByTokenDesc, GetConfigValuesByTokenRequest.fromPartial(request), metadata);
    }
    getConfigResultsBySequenceIds(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetConfigResultsBySequenceIdsDesc, GetConfigResultsBySequenceIdsRequest.fromPartial(request), metadata);
    }
    getCachedConfigResultSequenceIds(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetCachedConfigResultSequenceIdsDesc, GetCachedConfigResultSequenceIdsRequest.fromPartial(request), metadata);
    }
    getBitmapByToken(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetBitmapByTokenDesc, GetBitmapByTokenRequest.fromPartial(request), metadata);
    }
    generateConfigSet(request, metadata) {
        return this.rpc.unary(CircumstancesServicegenerateConfigSetDesc, ConfigSetGenerationRequest.fromPartial(request), metadata);
    }
    pinConfigSet(request, metadata) {
        return this.rpc.unary(CircumstancesServicepinConfigSetDesc, PinConfigRequest.fromPartial(request), metadata);
    }
    unpinConfigSet(request, metadata) {
        return this.rpc.unary(CircumstancesServiceunpinConfigSetDesc, UnpinConfigRequest.fromPartial(request), metadata);
    }
    getUnevaluatedConfigResultsWithAbTargeting(request, metadata) {
        return this.rpc.unary(CircumstancesServicegetUnevaluatedConfigResultsWithAbTargetingDesc, GetUnevaluatedConfigResultsWithAbTargetingRequest.fromPartial(request), metadata);
    }
}
const CircumstancesServiceDesc = {
    serviceName: "snapchat.cdp.cof.CircumstancesService",
};
const CircumstancesServicetargetingQueryDesc = {
    methodName: "targetingQuery",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return ConfigTargetingRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, ConfigTargetingResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const CircumstancesServicegetAbConfigValuesDesc = {
    methodName: "getAbConfigValues",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetAbConfigValuesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, GetAbConfigValuesResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const CircumstancesServicegetConfigValuesByTokenDesc = {
    methodName: "getConfigValuesByToken",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetConfigValuesByTokenRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, GetConfigValuesByTokenResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const CircumstancesServicegetConfigResultsBySequenceIdsDesc = {
    methodName: "getConfigResultsBySequenceIds",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetConfigResultsBySequenceIdsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, GetConfigResultsBySequenceIdsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const CircumstancesServicegetCachedConfigResultSequenceIdsDesc = {
    methodName: "getCachedConfigResultSequenceIds",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetCachedConfigResultSequenceIdsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, GetCachedConfigResultSequenceIdsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const CircumstancesServicegetBitmapByTokenDesc = {
    methodName: "getBitmapByToken",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetBitmapByTokenRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, GetBitmapByTokenResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const CircumstancesServicegenerateConfigSetDesc = {
    methodName: "generateConfigSet",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return ConfigSetGenerationRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, ConfigSetGenerationResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const CircumstancesServicepinConfigSetDesc = {
    methodName: "pinConfigSet",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return PinConfigRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, PinConfigResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const CircumstancesServiceunpinConfigSetDesc = {
    methodName: "unpinConfigSet",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return UnpinConfigRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, UnpinConfigResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const CircumstancesServicegetUnevaluatedConfigResultsWithAbTargetingDesc = {
    methodName: "getUnevaluatedConfigResultsWithAbTargeting",
    service: CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetUnevaluatedConfigResultsWithAbTargetingRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, GetUnevaluatedConfigResultsWithAbTargetingResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class CircumstancesRegionalServiceClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.getConfigValues = this.getConfigValues.bind(this);
    }
    getConfigValues(request, metadata) {
        return this.rpc.unary(CircumstancesRegionalServicegetConfigValuesDesc, GetConfigValuesRegionalRequest.fromPartial(request), metadata);
    }
}
const CircumstancesRegionalServiceDesc = {
    serviceName: "snapchat.cdp.cof.CircumstancesRegionalService",
};
const CircumstancesRegionalServicegetConfigValuesDesc = {
    methodName: "getConfigValues",
    service: CircumstancesRegionalServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetConfigValuesRegionalRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, GetConfigValuesRegionalResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_umd.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_client_umd.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_client_umd.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=circumstance_service.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/responseCachingHandler.js




const responseCachingHandler_logger = getLogger("responseCachingHandler");
const notFound = (key) => cacheKeyNotFoundError(`Response for key ${key} not found in cache.`);
const strategyFailed = (key, cause) => new Error(`Network request and cache lookup for ${key} both failed.`, { cause });
/**
 * Create a CachingStrategy that first makes a request to the network, falling back to cache if the network request
 * fails. If the network request fails and a prior response has not been cached, an error is returned to the caller.
 */
const staleIfErrorStrategy = () => (key, cache, network) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield network();
        cache.store(key, response).catch((error) => {
            responseCachingHandler_logger.warn(`staleIfErrorStrategy failed to store key ${key}.`, error);
        });
        return response;
    }
    catch (networkError) {
        try {
            const cachedResponse = yield cache.retrieve(key);
            if (!cachedResponse)
                throw notFound(key);
            responseCachingHandler_logger.debug(`staleIfErrorStrategy successfully fell back to cache for key ${key} after network error.`, networkError);
            return cachedResponse;
        }
        catch (cacheError) {
            const error = ensureError(cacheError);
            error.cause = networkError;
            throw strategyFailed(key, error);
        }
    }
});
/**
 * Create a CachingStrategy that first does a cache lookup – if the response is found in cache, it is returned and the
 * entry is updated with a request to the network in the background. If no cached response is found, the network request
 * is made, the result cached and returned to the caller.
 */
const staleWhileRevalidateStrategy = () => (key, cache, network) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    try {
        const cachedResponse = yield cache.retrieve(key);
        if (!cachedResponse)
            throw notFound(key);
        network()
            .then((response) => cache.store(key, response))
            .catch((error) => {
            responseCachingHandler_logger.warn(`staleWhileRevalidateStrategy failed to retrieve and store key ${key}.`, error);
        });
        return cachedResponse;
    }
    catch (cacheError) {
        try {
            const response = yield network();
            cache.store(key, response).catch((error) => {
                responseCachingHandler_logger.warn(`staleWhileRevalidateStrategy failed to store key ${key}.`, error);
            });
            responseCachingHandler_logger.debug(`staleWhileRevalidateStrategy successfully fell back to network for key ${key} after cache error.`, cacheError);
            return response;
        }
        catch (networkError) {
            const error = errorHelpers_ensureError(networkError);
            error.cause = cacheError;
            throw strategyFailed(key, error);
        }
    }
});
/**
 * Create a Handler capable of caching responses using various caching strategies.
 *
 * More than one caching strategy can be provided, and they will be composed into a single strategy. For example, an
 * expiringStrategy could be composed with a staleIfErrorStrategy so that responses
 *
 * @param cache A Persistence instance capable of storing responses.
 * @param resolveKey This function is called once for each request, and must return a valid persistence key
 * corresponding uniquely to that request.
 * @param strategy A CachingStrategy used to determine when to retrieve from cache vs. request from the network.
 * @returns
 */
const createResponseCachingHandler = (cache, resolveKey, strategy) => {
    return (next) => (request, metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        const network = () => next(request, metadata);
        let key;
        try {
            key = resolveKey(request, metadata);
        }
        catch (error) {
            responseCachingHandler_logger.warn("Cache lookup failed because the cache key could not be resolved.", error);
            return network();
        }
        return strategy(key, cache, network);
    });
};
//# sourceMappingURL=responseCachingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/persistence/ExpiringPersistence.js



const ExpiringPersistence_logger = getLogger("ExpiringPersistence");
/**
 * Create a Persistence that will remove entries after they expire.
 *
 * An expiration function must be provided, which is called each time a value is stored. It must return the expiration
 * time for that value, given in seconds from now. For example, to expire a value 24 hours after it is stored, the
 * expiration function should return 86400 (the number of seconds in 24 hours).
 */
class ExpiringPersistence {
    constructor(expiration, persistence) {
        this.expiration = expiration;
        this.persistence = persistence;
    }
    get size() {
        return this.persistence.size;
    }
    retrieve(key) {
        var _a;
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const [expiry, value] = (_a = (yield this.persistence.retrieve(key))) !== null && _a !== void 0 ? _a : [];
            if (value === undefined || expiry === undefined)
                return undefined;
            if (Date.now() > expiry) {
                yield this.persistence.remove(key).catch((error) => {
                    ExpiringPersistence_logger.warn(`Key ${key} is expired, but removing it from persistence failed.`, errorHelpers_ensureError(error));
                });
                return undefined;
            }
            return value;
        });
    }
    retrieveAll() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const now = Date.now();
            return (yield this.persistence.retrieveAll()).filter(([expiry]) => expiry >= now).map(([, v]) => v);
        });
    }
    remove(key) {
        return this.persistence.remove(key);
    }
    removeAll() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const results = yield this.persistence.removeAll();
            return results.map(([, v]) => v);
        });
    }
    store(keyOrValue, maybeValue) {
        const [key, value] = maybeValue === undefined ? [undefined, keyOrValue] : [keyOrValue, maybeValue];
        const expiry = Date.now() + this.expiration(value) * 1000;
        return key === undefined
            ? this.persistence.store([expiry, value])
            : this.persistence.store(key, [expiry, value]);
    }
}
//# sourceMappingURL=ExpiringPersistence.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/persistence/Persistence.js
const isValidKey = (key) => typeof key === "string" || typeof key === "number";
/**
 * The abstract Persistence class defines an async interface for interacting with persistent client-side storage. This
 * is modeled as a simple key/value store.
 *
 * Subclasses may be implemented to support a variety of persistence mechanisms – e.g. localStorage, IndexedDB, etc.
 */
class Persistence {
}
//# sourceMappingURL=Persistence.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/persistence/IndexedDBPersistence.js


function wrapRequest(request) {
    const p = new Promise((resolve, reject) => {
        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
    });
    p.request = request;
    return p;
}
/**
 * IndexedDB cursor requests are unique, in that their `onsuccess` handler may be called multiple times. To support
 * this, and allow for an easier-to-use Promise-based API, we wrap the cursor request to support usage like:
 * ```ts
 * let request = await wrapCursorRequest(store.openCursor())
 * while (request.cursor) {
 *   console.log(request.cursor.key, request.cursor.value)
 *   request = await request.continue()
 * }
 * ```
 */
function wrapCursorRequest(request) {
    return new Promise((resolve, reject) => {
        request.onsuccess = () => {
            const cursor = request.result;
            if (!cursor)
                resolve({ cursor: null, continue: () => Promise.reject() });
            else
                resolve({
                    cursor,
                    continue: () => {
                        cursor.continue();
                        return wrapCursorRequest(request);
                    },
                });
        };
        request.onerror = () => reject(request.error);
    });
}
/**
 * A simple key/value persistence using an IndexedDB storage backend.
 *
 * See [Using IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB) for an
 * introduction to how IndexedDB works, its APIs, and how to use it.
 *
 * Note: Currently there is no support for database upgrades. Each instance of this class uses a single IDBObjectStore
 * object set at instantiation time, and there are no hooks for performing migrations between versions. This may be
 * added in the future if such functionality is needed.
 */
class IndexedDBPersistence {
    /**
     * Construct an {@link IndexedDBPersistence} instance corresponding to a given IndexedDB database version.
     *
     * Throws `ConstraintError` if the version number is invalid (e.g. NaN, or less than 1).
     */
    constructor(options) {
        var _a;
        // We'll namespace our DB names to A) avoid collisions with host applications and B) be transparent about who
        // is using persistence.
        this.databaseName = `Snap.CameraKit.${options.databaseName}`;
        this.databaseVersion = options.databaseVersion;
        this.objectStore = (_a = options.objectStore) !== null && _a !== void 0 ? _a : options.databaseName;
        // `open()` will throw if the version is invalid -- this is desirable vs. rejecting the `db` promise, since then
        // the error is only reported when callers try to perform some operation. Instead, we want the instantiating
        // code to see the error.
        this.db = this.openDatabase(indexedDB.open(this.databaseName, this.databaseVersion));
        this.size = 0;
    }
    retrieve(key) {
        return this.simpleTransaction("readonly", (store) => store.get(key));
    }
    retrieveAll() {
        return this.simpleTransaction("readonly", (store) => store.getAll());
    }
    remove(key) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield this.simpleTransaction("readwrite", (store) => store.delete(key));
            this.size--;
        });
    }
    removeAll() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const results = [];
            const { store, done } = yield this.transaction("readwrite");
            let request = yield wrapCursorRequest(store.openCursor());
            const deleteRequests = [];
            while (request.cursor) {
                results.push(request.cursor.value);
                // If any of the deletes fail (e.g. if the user deletes the object store during the transaction), it will
                // fail the whole transaction. Since the primary expected cause of this failure mode is that the entire
                // object store no longer exists, it's unlikely this will result in unbounded DB growth. That said, callers
                // may want to attempt to retry the removal, or raise an alarm if the persistence size grows unexpectedly.
                deleteRequests.push(wrapRequest(store.delete(request.cursor.key)));
                request = yield request.continue();
            }
            yield Promise.all(deleteRequests.concat(done));
            this.size = 0;
            return results;
        });
    }
    store(keyOrValue, maybeValue) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const [key, value] = maybeValue === undefined ? [undefined, keyOrValue] : [keyOrValue, maybeValue];
            // The key must be ValidKey | undefined.
            if (!isValidKey(key) && typeof key !== "undefined")
                throw new TypeError(`IndexedDBPersistence failed to ` + `store a value. Invalid key type: ${typeof key}`);
            const storedKey = yield this.simpleTransaction("readwrite", (store) => store.put(value, key));
            this.size++;
            // Type safety: we already assert any given key is valid, and if the key is undefined IndexedDB will generate
            // a numeric key (https://w3c.github.io/IndexedDB/#key-generator).
            return storedKey;
        });
    }
    openDatabase(request) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            // The `open()` call will throw if databaseVersion is invalid (e.g. < 1).
            const dbPromise = wrapRequest(request);
            dbPromise.request.onupgradeneeded = () => {
                try {
                    // The following DOMExceptions may be thrown by `createObjectStore()` – they should all be logically
                    // impossible. We handle the one recoverable exception which could occur below.
                    //
                    // TransactionInactiveError: the database does not exist.
                    // InvalidStateError: `createObjectStore` was called outside a `versionchange` transaction.
                    // InvalidAccessError: `autoIncrement` is true and `keyPath` contains an empty string.
                    dbPromise.request.result.createObjectStore(this.objectStore, { autoIncrement: true });
                }
                catch (error) {
                    // ConstraintError is thrown if the object store already exists. Could happen if multiple tabs to the
                    // same domain are opened and race to create the object store. In this case we can safely ignore the
                    // error and continue.
                    if (error instanceof DOMException && error.name === "ConstraintError")
                        return;
                    throw error;
                }
            };
            const db = yield dbPromise;
            db.onclose = () => {
                // The 'close` event fires when the DB is unexpectedly closed (e.g. user clears application data). We'll
                // attempt to re-open it (which may fail, in which case no further attempts will be made, and all future
                // transactions will fail).
                this.db = this.openDatabase(indexedDB.open(this.databaseName, this.databaseVersion));
            };
            return db;
        });
    }
    simpleTransaction(mode, operation) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const { store, done } = yield this.transaction(mode);
            const [result] = yield Promise.all([wrapRequest(operation(store)), done]);
            return result;
        });
    }
    transaction(mode) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const db = yield this.db;
            // The following DOMExceptions may be thrown – they should all be logically impossible, or could be
            // triggered by the user deleting or modifying the database (e.g. via DevTools) at the right time. We won't
            // attempt to recover from them now, but may decide to do so in the future (if we see them in the wild).
            //
            // InvalidStateError: `close()` has previously been called on the IDBDatabase
            // NotFoundError: the object store does not exist.
            // TypeError: the `mode` parameter is invalid.
            // InvalidAccessError: the function was called with an empty list of object stores.
            const tx = db.transaction(this.objectStore, mode);
            // Similarly, the following DOMExceptions may be thrown by `objectStore()`:
            //
            // InvalidStateError: the transaction has already completed.
            // NotFoundError: the object store is not in the transaction's scope.
            const store = tx.objectStore(this.objectStore);
            const done = new Promise((resolve, reject) => {
                tx.oncomplete = () => resolve();
                tx.onerror = () => reject(tx.error);
                tx.onabort = () => reject(new DOMException("The transaction was aborted", "AbortError"));
            });
            return { tx, store, done };
        });
    }
}
//# sourceMappingURL=IndexedDBPersistence.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/remote-configuration/cofHandler.js












const id = (h) => h;
// We need to wrap `targetingQuery` to create a usable Handler – the main issue is that HandlerChainBuilder always adds
// a `signal` property to the metadata argument (second argument of the Handler), but `targetingQuery` expects the
// second argument to only contain headers.
const createTargetingQueryHandler = (apiToken) => (request, _a) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    var { signal } = _a, metadata = __rest(_a, ["signal"]);
    const rpc = new GrpcWebImpl("https://api-kit.snapchat.com", {});
    const client = new CircumstancesServiceClientImpl(rpc);
    return new Promise((resolve, reject) => {
        if (signal) {
            signal.addEventListener("abort", () => reject(new Error("COF request aborted by handler chain.")));
        }
        client
            .targetingQuery(request, new browser_headers_umd.BrowserHeaders(Object.assign({ authorization: `Bearer ${apiToken}`, "x-snap-client-user-agent": cameraKitUserAgent.userAgent }, metadata)))
            .then((response) => {
            // NOTE: in order for cache persistance to work, we need to make the object cloneable,
            // i.e. with no methods (it appears targetingQuery() attaches toObject() to response object).
            // Safety: We have to cast response object to a type that has toObject defined, because that is
            // indeed what generated code has:
            // eslint-disable-next-line max-len
            // https://github.sc-corp.net/Snapchat/camera-kit-web-sdk/blob/8d6b4e8bfa3717b376ab197a49972a1e410851f7/packages/web-sdk/src/generated-proto/pb_schema/cdp/cof/circumstance_service.ts#L1459
            delete response.toObject;
            resolve(response);
        })
            .catch(reject);
    });
});
const COF_REQUEST_TYPE = "cof";
/**
 * Handler chain used to make COF requests. Uses the COF client to perform the
 * requests, with retries, timeout, and caching.
 *
 * The handler will first attempt to retrieve the COF response from cache. If it is found, the result is returned
 * immediately and the cache is updated in the background. If no response is found, a COF request is made. This request
 * will retry (with exponential backoff + jitter) for 5 seconds before returning an error to the caller.
 */
const cofHandlerFactory = (apiToken) => new HandlerChainBuilder(createTargetingQueryHandler(apiToken))
    .map(id((next) => (request, metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    const dimensions = { requestType: COF_REQUEST_TYPE };
    const { requestId } = dispatchRequestStarted({ dimensions });
    try {
        const response = yield next(request, metadata);
        // TODO: We hardcode status code and sizeByte values because we do not have access to underlying
        // transport of configs-web.
        // When this ticket is done https://jira.sc-corp.net/browse/CAMKIT-2840,
        // we will remove this handler and benefit from existing ones.
        const status = 200;
        let sizeByte = 0;
        try {
            sizeByte = new TextEncoder().encode(JSON.stringify(response)).byteLength;
        }
        finally {
            dispatchRequestCompleted({ requestId, dimensions, status, sizeByte });
            return response;
        }
    }
    catch (error) {
        dispatchRequestErrored({ requestId, dimensions, error: errorHelpers_ensureError(error) });
        throw error;
    }
})))
    // targetingQuery() always converts failed responses into errors (unlike fetch()), so we need a custom
    // retryPredicate that retries all errors. We'll keep retrying (with backoff) for 20 seconds total elapsed
    // time before we return an error back up the chain.
    .map(createRetryingHandler({ retryPredicate: (r) => r instanceof Error }))
    // API gateway has 15 seconds timeout, so we rely on that first
    .map(createTimeoutHandler({ timeout: 20 * 1000 }))
    .map(createResponseCachingHandler(
// COF responses will be removed from cache after 1 week. Keep in mind that the staleWhileRevalidate
// strategy will update the cache each time COF is requested – this expiration comes into play only if
// e.g. a user doesn't load the page for more than a week.
new ExpiringPersistence(() => 7 * 24 * 60 * 60, new IndexedDBPersistence({ databaseName: "COFCache" })), (r) => JSON.stringify(r), 
// If we have a matching response already in cache, we'll return it immediately and then update the
// cache in the background.
staleWhileRevalidateStrategy())).handler;
//# sourceMappingURL=cofHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/remote-configuration/remoteConfiguration.js





const defaultTargetingRequest = {
    namespaces: [Namespace.LENS_CORE, Namespace.CAMERA_KIT_CORE],
};
class RemoteConfiguration {
    constructor(apiToken, lensPerformance) {
        const lensCluster = Promise.resolve(lensPerformance).then((lensPerformance) => {
            // `0` means no cluster could be determined. For COF, we'll omit a value in that case.
            return (lensPerformance === null || lensPerformance === void 0 ? void 0 : lensPerformance.cluster) === 0 ? undefined : lensPerformance === null || lensPerformance === void 0 ? void 0 : lensPerformance.cluster;
        });
        const cofHandler = cofHandlerFactory(apiToken);
        this.configById = from_from(lensCluster).pipe(
        // Note: we don't catch errors here, purposefully letting them propagate to subscribers outside this class.
        // Subscribers, having more context about the config use-case, will know better how to handle an error than
        // we do here (e.g. their logging / reporting will have more context, and they can use the error they get
        // from this Observable as a cause).
        mergeMap((lensClusterOrig4) => from_from(cofHandler(Object.assign(Object.assign({}, defaultTargetingRequest), { lensClusterOrig4 })))), map((result) => {
            const configById = new Map();
            result.configResults.forEach((config) => {
                var _a;
                const configsWithId = (_a = configById.get(config.configId)) !== null && _a !== void 0 ? _a : [];
                configsWithId.push(config);
                configById.set(config.configId, configsWithId);
            });
            return configById;
        }), shareReplay(1));
    }
    get(configId) {
        return this.configById.pipe(map((config) => { var _a; return (_a = config.get(configId)) !== null && _a !== void 0 ? _a : []; }));
    }
}
const remoteConfigurationFactory = Injectable("remoteConfiguration", [configurationToken], (config) => {
    const remoteConfig = new RemoteConfiguration(config.apiToken, config.lensPerformance);
    // We'll kick off remote configuration loading by subscribing (and then unsubscribing) to a dummy config value.
    // Subsequent requests for config will use the shared Observable, benefitting from this eager loading.
    remoteConfig.get("").pipe(take(1)).subscribe();
    return remoteConfig;
});
//# sourceMappingURL=remoteConfiguration.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/assets/deviceDependentAssetLoader.js








const hasStringValue = (value) => {
    return isRecord(value) && isString(value.stringValue);
};
const isAssetConfig = (value) => {
    return isRecord(value) && isString(value.url) && (value.checksum === undefined || isString(value.checksum));
};
/**
 * @internal
 */
const deviceDependentAssetLoaderFactory = Injectable("deviceDependentAssetLoader", [defaultFetchHandlerFactory.token, remoteConfigurationFactory.token], (fetchHandler, remoteConfiguration) => {
    const assetHandler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;
    return function deviceDependentAssetLoader({ assetId }) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const loadingFailed = (reason, cause) => new Error(`Cannot load device-dependent asset ${assetId}. ${reason}`, { cause });
            return firstValueFrom(remoteConfiguration.get(assetId).pipe(catchError((error) => {
                throw loadingFailed("COF config failed to load.", error);
            }), map((configs) => {
                if (configs.length === 0) {
                    throw loadingFailed(`No COF config found corresponding to that assetId.`);
                }
                // All of the deviceDependent asset configs will only have one value, so we can safely use the
                // first (i.e. only) element in the configs list.
                const [{ value }] = configs;
                // Asset configurations are all JSON-encoded in the `stringValue` property. If it doesn't
                // exists, we can't fetch the asset.
                if (!hasStringValue(value))
                    throw loadingFailed("COF config malformed (missing stringValue)");
                let assetConfig;
                try {
                    assetConfig = JSON.parse(value.stringValue);
                }
                catch (parseError) {
                    throw loadingFailed("COF config malformed (JSON parse error)", parseError);
                }
                // Asset configurations have a `url` and `checksum` property. Otherwise we're dealing with some
                // other kind of configuration, and cannot fetch the asset.
                if (!isAssetConfig(assetConfig))
                    throw loadingFailed("COF config malformed (missing URL)");
                return assetConfig;
            }), mergeMap(({ url, checksum }) => tslib_es6_awaiter(this, void 0, void 0, function* () {
                // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed
                const [data, response] = yield assetHandler(url, { cache: "force-cache" });
                if (!response.ok)
                    throw response;
                return { data, checksum };
            }))));
        });
    };
});
//# sourceMappingURL=deviceDependentAssetLoader.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/assets/remoteMediaAssetLoaderFactory.js





/**
 * @internal
 */
const remoteMediaAssetLoaderFactory = Injectable("remoteMediaAssetLoader", [defaultFetchHandlerFactory.token], (fetchHandler) => {
    const handler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;
    return function remoteMediaAssetLoader(asset) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            // as a default option assuming that RemoteMedia asset type contains asset url in assetId
            // this behaviour could be changed by providing own implementation for RemoteMedia asset loader
            //   const cameraKit = bootstrapCameraKit(config, container => {
            //     return container.provides(Injectable(
            //       remoteMediaAssetLoaderFactory.token, ...
            // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed
            const [buffer, response] = yield handler(asset.assetId, { cache: "force-cache" });
            if (!response.ok)
                throw response;
            return buffer;
        });
    };
});
//# sourceMappingURL=remoteMediaAssetLoaderFactory.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/assets/staticAssetLoader.js





/**
 * @internal
 */
const staticAssetLoaderFactory = Injectable("staticAssetLoader", [defaultFetchHandlerFactory.token], (fetchHandler) => {
    const handler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;
    return (asset, _lens, assetManifest) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const assetUrl = (_a = assetManifest === null || assetManifest === void 0 ? void 0 : assetManifest.find((manifest) => manifest.id === asset.assetId)) === null || _a === void 0 ? void 0 : _a.assetUrl;
        if (!assetUrl) {
            throw new Error(`Cannot load lens asset ${asset.assetId}. Static asset URL could not be found.`);
        }
        // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed
        const [buffer, response] = yield handler(assetUrl, { cache: "force-cache" });
        if (!response.ok)
            throw response;
        return buffer;
    });
});
//# sourceMappingURL=staticAssetLoader.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/assets/LensAssetRepository.js













const LensAssetRepository_logger = getLogger("LensAssetRepository");
/**
 * Computes cache key for asset ID and loader type pair.
 * @param asset Asset ID and loader type pair.
 * @returns Cache key.
 */
function getCacheKey(asset) {
    return `${asset.assetId}_${asset.assetType.value}`;
}
function mapManfiestItemToAssetType(lensCore, type) {
    switch (type) {
        case LensAssetManifestItem_Type.ASSET:
            return lensCore.AssetType.Static;
        case LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET:
        case LensAssetManifestItem_Type.UNRECOGNIZED:
            return lensCore.AssetType.DeviceDependent;
        default:
            return assertUnreachable(type);
    }
}
/**
 * Registers a remote asset provider function with a given instance of LensCore, and uses a provided mapping of asset
 * types to loading functions to acquire remote asset data and pass it to LensCore.
 *
 * *Note:* LensCoreModule.initialize must be called on the desired LensCoreModule instance **prior** to passing it
 * to the LensAssetProvider constructor. If this class is instantiated with a LensCoreModule that has not been
 * initialized, the registry of the asset provider function will fail silently and no remote assets will be loaded.
 */
class LensAssetRepository {
    constructor(lensCore, assetLoaders, metrics) {
        this.lensCore = lensCore;
        this.assetLoaders = assetLoaders;
        this.metrics = metrics;
        this.cachedAssetKeys = new Set();
    }
    /**
     * Caches lens assets defined in asset manifest.
     *
     * @param assetManifest Lens asset manifest.
     * @param lens Lens to cache assets of.
     * @param assetTimings Optionally specifies what assets to cache. By default, on-demand assets are not cached.
     * @returns Promise rejects if any required assets could not be loaded – if this occurs, it's very likely the Lens
     * with this manifest will not function.
     */
    cacheAssets(assetManifest, lens, assetTimings = [LensAssetManifestItem_RequestTiming.REQUIRED]) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const assetTimingsToPreload = new Set([
                // That is a bad naming, but PRELOAD_UNSET actually means
                // that an asset has to be preloaded
                LensAssetManifestItem_RequestTiming.PRELOAD_UNSET,
                ...assetTimings,
            ]);
            const assetDescriptors = assetManifest
                .filter((asset) => {
                return assetTimingsToPreload.has(asset.requestTiming);
            })
                .map(({ id, type }) => ({
                assetId: id,
                assetType: mapManfiestItemToAssetType(this.lensCore, type),
            }));
            if (assetDescriptors.length) {
                // When preloading, we *do* want load failures to reject Promise.all (assets listed in the manifest
                // are known to be hard requirements of the lens).
                return this.cacheAssetsByDescriptor(assetDescriptors, lens, assetManifest);
            }
        });
    }
    /**
     * Calls the correct asset loader to fetch the asset's data,
     * depending on the requested asset's type and provides that to LensCore.
     */
    loadAsset(assetDescriptor, lens, assetManifest) {
        var _a, _b;
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const { assetId, assetType } = assetDescriptor;
            const [assetTypeName, assetLoader] = (_a = this.assetLoaders.get(assetType)) !== null && _a !== void 0 ? _a : [];
            const safeAssetTypeName = assetTypeName !== null && assetTypeName !== void 0 ? assetTypeName : "unknown";
            const dimensions = {
                requestType: "asset",
                assetId: assetId,
                assetType: safeAssetTypeName,
                lensId: (_b = lens === null || lens === void 0 ? void 0 : lens.id) !== null && _b !== void 0 ? _b : "unknown",
            };
            const { requestId } = dispatchRequestStarted({ dimensions });
            try {
                if (!assetLoader) {
                    throw new Error(`Cannot get asset "${assetId}". Asset type "${safeAssetTypeName}" is not supported.`);
                }
                const assetResponse = yield assetLoader(assetDescriptor, lens, assetManifest);
                const assetBuffer = "data" in assetResponse ? assetResponse.data : assetResponse;
                const assetChecksum = "checksum" in assetResponse ? assetResponse.checksum : undefined;
                if (assetBuffer.byteLength === 0) {
                    throw new Error(`Got empty response for asset "${assetId}" from "${safeAssetTypeName}" loader.`);
                }
                dispatchRequestCompleted({ requestId, dimensions, status: 200, sizeByte: assetBuffer.byteLength });
                this.lensCore.provideRemoteAssetsResponse({
                    assetId,
                    assetBuffer,
                    assetType,
                    assetChecksum,
                    onFailure: (reason) => {
                        const lensCoreError = errorHelpers_ensureError(reason);
                        if (/validation failed/.test(lensCoreError.message)) {
                            this.metrics.dispatchEvent(new TypedCustomEvent("assetValidationFailed", {
                                name: "assetValidationFailed",
                                assetId,
                            }));
                        }
                        LensAssetRepository_logger.warn(new Error(`Failed to provide lens asset "${assetId}".`, { cause: lensCoreError }));
                    },
                });
            }
            catch (error) {
                const wrappedError = new Error(`Failed to load lens asset "${assetId}".`, { cause: error });
                dispatchRequestErrored({ requestId, dimensions, error: wrappedError });
                throw wrappedError;
            }
        });
    }
    /**
     * Downloads and caches assets if applicable. Does nothing for assets that are already in cache.
     * @param assetDescriptors Asset ID and type pairs.
     * @param lens Lens to load assets for.
     * @param assetManifest Lens asset manifest.
     */
    cacheAssetsByDescriptor(assetDescriptors, lens, assetManifest) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield Promise.all(assetDescriptors
                .filter((assetDescriptors) => !this.cachedAssetKeys.has(getCacheKey(assetDescriptors)))
                .map((assetDescriptor) => tslib_es6_awaiter(this, void 0, void 0, function* () {
                var _a;
                try {
                    // NOTE: we allow concurrent cache request to download the same asset more than once,
                    // because that is better than skipping second request when the firs one fails.
                    // In future we could improve concurretn logic with observables as part of
                    // https://jira.sc-corp.net/browse/CAMKIT-3931
                    yield this.loadAsset(assetDescriptor, lens, assetManifest);
                    this.cachedAssetKeys.add(getCacheKey(assetDescriptor));
                }
                catch (error) {
                    const { assetId, assetType } = assetDescriptor;
                    const [assetTypeName] = (_a = this.assetLoaders.get(assetType)) !== null && _a !== void 0 ? _a : [];
                    LensAssetRepository_logger.warn(new Error(`Failed to cache asset "${assetId}" of type "${assetTypeName !== null && assetTypeName !== void 0 ? assetTypeName : assetType.value}".`, { cause: error }));
                }
            })));
        });
    }
}
/**
 * @internal
 */
const lensAssetRepositoryFactory = Injectable("lensAssetRepository", [
    lensCoreFactory.token,
    deviceDependentAssetLoaderFactory.token,
    remoteMediaAssetLoaderFactory.token,
    staticAssetLoaderFactory.token,
    metricsEventTargetFactory.token,
], (lensCore, deviceDependentAssetLoader, remoteMediaAssetLoader, staticAssetLoader, metrics) => new LensAssetRepository(lensCore, new Map([
    [lensCore.AssetType.DeviceDependent, ["DeviceDependent", deviceDependentAssetLoader]],
    [lensCore.AssetType.RemoteMediaByUrl, ["RemoteMediaByUrl", remoteMediaAssetLoader]],
    // URL type is deprecated and was introduced before RemoteMediaByURL
    // however, there are some lenses still using it so we need to support it
    [lensCore.AssetType.URL, ["URL", remoteMediaAssetLoader]],
    [lensCore.AssetType.Static, ["Static", staticAssetLoader]],
]), metrics));
//# sourceMappingURL=LensAssetRepository.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/LensRepository.js

















const LensRepository_logger = getLogger("LensRepository");
const log = errorLoggingDecorator(LensRepository_logger);
const assetTimingMap = {
    required: LensAssetManifestItem_RequestTiming.REQUIRED,
    onDemand: LensAssetManifestItem_RequestTiming.ON_DEMAND,
};
function isAssetTiming(value) {
    return isString(value) && assetTimingMap.hasOwnProperty(value);
}
function isOptionalAssetTimingArray(value) {
    return isUndefined(value) || isArrayOfType(isAssetTiming, value);
}
/**
 * The LensRepository is used to query for lenses from specific lens groups, or for a lens with a specific ID.
 *
 * Lens groups are configured in the CameraKit Portal -- that's where you'll find lens group IDs and lens IDs.
 *
 * Lenses must be loaded by the LensRepository before they can be applied to a {@link CameraKitSession}.
 *
 * @example
 * ```ts
 * const cameraKit = await bootstrapCameraKit(options)
 * const session = await cameraKit.createSession()
 * const lens = await cameraKit.lensRepository.loadLens(lensId, groupId)
 * session.applyLens(lens)
 * ```
 *
 * @category Lenses
 */
class LensRepository {
    /** @internal */
    constructor(lensMetadataFetchHandler, lensFetchHandler, lensSources, lensAssetRepository) {
        this.lensMetadataFetchHandler = lensMetadataFetchHandler;
        this.lensFetchHandler = lensFetchHandler;
        this.lensSources = lensSources;
        this.lensAssetRepository = lensAssetRepository;
        this.metadataCache = new Map();
        this.binariesCache = new Map();
    }
    /**
     * Retrieve a single Lens.
     *
     * @param lensId Desired Lens's unique ID. Can be found in the CameraKit Portal.
     * @param groupId The ID of a group containing the desired Lens. Can be found in the CameraKit Portal.
     * @returns Resolves with the desired Lens, or rejects if an error occurred (including a missing Lens).
     */
    loadLens(lensId, groupId) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const envelopes = yield this.lensSources.retrieveLenses({ lensId, groupId });
            let lens;
            if (envelopes) {
                lens = decodeEnvelopes(envelopes)[0];
                if (!lens) {
                    throw new Error("Expected non-empty envelope");
                }
            }
            else {
                lens = yield retrieveCameraKitLens(this.lensMetadataFetchHandler, lensId, groupId);
            }
            this.metadataCache.set(lens.id, lens);
            return toPublicLens(lens);
        });
    }
    /**
     * Retrieve the Lenses contained in a list of Lens Groups.
     *
     * This may result in multiple requests to retrieve Lens data (e.g. one per desired group). If any constituent
     * requests fail, those errors will be reported in the response – but the returned Promise will not be rejected. Any
     * Lenses which could be successfully retrieved will be available in the response.
     *
     * @param groupIds A list of Lens Group IDs. Can be found in the CameraKit Portal.
     * @returns Resolves with a flattened list of all lenses in the desired groups. If any errors occurred during the
     * query operation, these will be included in a separate list. If errors are present, the list of Lenses may not
     * contain all the Lenses from the desired groups.
     */
    loadLensGroups(groupIds) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const responses = yield Promise.all(groupIds.map((groupId) => tslib_es6_awaiter(this, void 0, void 0, function* () {
                try {
                    const envelopes = yield this.lensSources.retrieveLenses({ groupId });
                    const lenses = envelopes
                        ? decodeEnvelopes(envelopes)
                        : yield retrieveCameraKitLensGroup(this.lensMetadataFetchHandler, groupId);
                    lenses.forEach((lens) => this.metadataCache.set(lens.id, lens));
                    return lenses.map(toPublicLens);
                }
                catch (error) {
                    LensRepository_logger.error(new Error(`Failed to load lens group ${groupId}`, { cause: error }));
                    return error;
                }
            })));
            const errors = [];
            const lenses = [];
            responses.forEach((response) => (Array.isArray(response) ? lenses.push(...response) : errors.push(response)));
            return { errors, lenses };
        });
    }
    /**
     * Loads and caches lens content and dependencies to reduce latency when {@link CameraKitSession.applyLens} is later
     * called to apply the lens. This is an in-memory cache, it will not be persisted across page loads.
     *
     * This may useful if the application A) knows which lenses will be applied and B) has some opportunity to call
     * this method before a lens is applied. For example, if the user must perform some other actions before lenses
     * become active, this might be a good opportunity to cache lenses to improve applyLens latency.
     *
     * @example
     * ```ts
     * const lens = await cameraKit.lensRepository.loadLens(lensId, groupId)
     * await cameraKit.lensRepository.cacheLensContent([lens])
     *
     * // sometime later -- this call will use the cached lens content, making lens application faster.
     * await cameraKitSession.applyLens(lens)
     * ```
     *
     * @param lenses Array of lenses to cache in memory.
     * @param assetTimingsToCache Lenses specify certain required assets that are necessary for the lens to render, and
     * other assets which may be needed by the lens. By default this method will cache all of those assets, but this
     * behavior can be modified to only load the required assets, only the "onDemand" assets, or neither (by passing
     * an empty array).
     */
    cacheLensContent(lenses, assetTimingsToCache = ["required", "onDemand"]) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const assetTimingsToLoad = assetTimingsToCache.map((timing) => assetTimingMap[timing]);
            yield Promise.all(lenses.map((lens) => tslib_es6_awaiter(this, void 0, void 0, function* () {
                try {
                    const { lensBuffer } = yield this.getLensContent(lens);
                    // Safety: getLensContent() call above ensures metadata to exist
                    const { content } = this.metadataCache.get(lens.id);
                    this.binariesCache.set(lens.id, lensBuffer);
                    yield this.lensAssetRepository.cacheAssets(content.assetManifest, lens, assetTimingsToLoad);
                }
                catch (e) {
                    LensRepository_logger.warn(new Error(`Failed to cache lens ${lens.id}.`, { cause: e }));
                }
            })));
        });
    }
    /**
     * Returns loaded Lens metadata if available.
     */
    getLensMetadata(lensId) {
        return this.metadataCache.get(lensId);
    }
    /**
     * Removes Lens content from the in-memory cache.
     */
    removeCachedLenses(lenses) {
        lenses.forEach((lens) => this.binariesCache.delete(lens.id));
    }
    /**
     * Fetches lens content and assets. This may come from the cache, otherwise network requests will be made.
     *
     * @internal
     */
    getLensContent(lens) {
        var _a;
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const { content } = (_a = this.metadataCache.get(lens.id)) !== null && _a !== void 0 ? _a : {};
            if (!content) {
                throw new Error(`Cannot find metadata for lens ${lens.id}.`);
            }
            const cachedLensBuffer = this.binariesCache.get(lens.id);
            if (cachedLensBuffer) {
                return {
                    lensBuffer: cachedLensBuffer,
                    lensChecksum: content.lnsSha256,
                };
            }
            // Load required lens assets and the lens itself in parallel. We count both toward lens download time.
            const [lensBuffer] = yield this.lensFetchHandler([
                // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed
                new Request(content.lnsUrlBolt, { cache: "force-cache" }),
                {
                    requestType: "lens_content",
                    lensId: lens.id,
                },
            ]);
            return { lensBuffer, lensChecksum: content.lnsSha256 };
        });
    }
}
__decorate([
    validate_validate,
    log,
    __param(0, guard(isSafeString)),
    __param(1, guard(isSafeString)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], LensRepository.prototype, "loadLens", null);
__decorate([
    validate_validate,
    log,
    __param(0, guard(isSafeStringArray)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array]),
    __metadata("design:returntype", Promise)
], LensRepository.prototype, "loadLensGroups", null);
__decorate([
    validate_validate,
    log,
    __param(0, guard(isLensArray)),
    __param(1, guard(isOptionalAssetTimingArray)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Array]),
    __metadata("design:returntype", Promise)
], LensRepository.prototype, "cacheLensContent", null);
/**
 * @internal
 */
const lensRepositoryFactory = Injectable("LensRepository", [
    cameraKitServiceFetchHandlerFactory.token,
    defaultFetchHandlerFactory.token,
    lensSourcesFactory.token,
    lensAssetRepositoryFactory.token,
], (lensMetadataFetchHandler, defaultFetchHandler, lensSources, lensAssetRepository) => {
    const lensFetchHandler = new HandlerChainBuilder(defaultFetchHandler)
        .map(createRequestStateEmittingHandler())
        .map(createArrayBufferParsingHandler()).handler;
    return new LensRepository(lensMetadataFetchHandler, lensFetchHandler, lensSources, lensAssetRepository);
});
//# sourceMappingURL=LensRepository.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/memoize.js
function isMemoized(fn) {
    return typeof fn === "function" && typeof fn.delegate === "function";
}
function memoize(delegate) {
    let memo;
    const memoized = (...args) => {
        if (typeof memo !== "undefined")
            return memo;
        memo = delegate(...args);
        return memo;
    };
    memoized.delegate = delegate;
    return memoized;
}
//# sourceMappingURL=memoize.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/dependency-injection/PartialContainer.js


/**
 * Similar to [Container], with the exception that Services may be provided to a PartialContainer which *does not*
 * contain all of that Services dependencies.
 *
 * For this to remain safe, Services can not be resolved by PartialContainer – it has no `get` method.
 *
 * Instead, the PartialContainer must be provided to a [Container] which *does* contain all the dependencies required
 * by all the Service in the PartialContainer. The resulting [Container] can then resolve these Services.
 *
 * PartialContainers are used to create a collection of Services which can then be provided via a simple one-line syntax
 * to an existing Container (which fulfills the collection's dependencies). It is an organizational tool, allowing
 * coherent groupings of Services to be defined in one place, then combined elsewhere to form a complete [Container].
 *
 * Here's an example of PartialContainer usage:
 * ```ts
 * // We can provide fooFactory, even though the PartialContainer doesn't fulfill the Bar dependency.
 * const fooFactory = Injectable('Foo', ['Bar'] as const, (bar: Bar) => new Foo(bar))
 * const partialContainer = new PartialContainer({}).provide(fooFactory)
 *
 * const barFactory = Injectable('Bar', () => new Bar())
 * const dependenciesContainer = Container.provides(barFactory)
 *
 * const combinedContainer = dependenciesContainer.provides(partialContainer)
 *
 * // We can resolve Foo, because the combined container includes Bar, so all of Foo's dependencies are now met.
 * const foo = combinedContainer.get('Foo')
 * ```
 */
/** @internal */
class PartialContainer_PartialContainer {
    constructor(injectables) {
        this.injectables = injectables;
    }
    /**
     * Create a new PartialContainer which provides a Service created by the given InjectableFunction.
     *
     * The InjectableFunction contains metadata specifying the Token by which the created Service will be known, as well
     * as an ordered list of Tokens to be resolved and provided to the InjectableFunction as arguments.
     *
     * This dependencies are allowed to be missing from the PartialContainer, but these dependencies are maintained as a
     * parameter of the returned PartialContainer. This allows `[Container.provides]` to type check the dependencies and
     * ensure they can be provided by the Container.
     *
     * @param fn A InjectableFunction, taking dependencies as arguments, which returns the Service.
     */
    provides(fn) {
        return new PartialContainer_PartialContainer(Object.assign(Object.assign({}, this.injectables), { [fn.token]: fn }));
    }
    /**
     * In order to create a [Container], the InjectableFunctions maintained by the PartialContainer must be memoized
     * into Factories that can resolve their dependencies and return the correct Service.
     *
     * In particular, this requires access to a "parent" Container to avoid infinite looping in cases where Service A
     * depends on Service A – this is allowed (as long as the parent container provides Service A), but requires access
     * to the parent Container to provide the parent implementation of Service A.
     *
     * This also means that Services provided by a PartialContainer to a Container via this function will always be
     * scoped to the Container. In other words, if a PartialContainer containing Service A is provided to both
     * Container X and Container Y, when Service A is resolved by Container X the InjectableFunction used to create
     * Service A will be invoked – and when Service A is resolved by Container Y, the InjectableFunction will be invoked
     * again.
     *
     * @param parent A [Container] which provides all the required Dependencies of this PartialContainer.
     */
    getFactories(parent) {
        return Object.fromEntries(entries(this.injectables).map(([token, fn]) => {
            return [
                token,
                memoize((c) => {
                    return fn(...fn.dependencies.map((t) => {
                        return t === token
                            ? parent.get(t)
                            : c.get(t);
                    }));
                }),
            ];
        }));
    }
    getTokens() {
        return Object.keys(this.injectables);
    }
}
//# sourceMappingURL=PartialContainer.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/dependency-injection/Container.js


const CONTAINER = "$container";
/**
 * A Container of values, indexed each by a unique token, which can be used throughout CameraKit. This is how CameraKit
 * implements simple dependency injection.
 *
 * Dependency injection is a way to decouple the *use* of a dependency from the *creation* of that dependency. This
 * improves modularity and re-usability, since components only care about the *interfaces* of dependencies (since that
 * determines their use) and not about their concrete creation. New implementations of a particular dependency may be
 * provided without the need to change any of the consumers of that dependency.
 *
 * There are a few commonly-used terms used when talking about dependency injection:
 *
 *   - Container (or Injector): Maintains a registry of all available Services and understands how to create them.
 *   - Service: Anything that can be provided by the Container is called a Service – this can be a value of any type.
 *   - Token: Each Service is associated with a unique name, or Token. In order to obtain a Service from the Container,
 *     the consumer must provide the Token corresponding to that Service.
 *   - InjectableFunction: Services are created by InjectableFunctions. When adding a Service to a Container, the
 *     Service provider gives the Container a InjectableFunction which, when called will return the Service. These
 *     InjectableFunctions may themselves use other Services, which will be passed to them as arguments.
 *
 * Services are, by default, singletons – that is, each call to `get()` a particular Service will return a reference
 * to the same value. In other words, InjectableFunctions are only invoked once. If multiple instances of a Service are
 * desired, a new Container can be created using the `copy([Token])` method – passing a Token to this method forces the
 * new Container to recreate the corresponding Service (the InjectableFunction will be invoked again). We say that the
 * Service is then "scoped" to the new Container.
 *
 *
 * One common downside of many dependency injection implementations is that the dependency graph formed by the various
 * Services can only be validated at runtime. That is, if a dependency is missing or a circular dependency is found, the
 * developer must wait until runtime to discover the error. These errors can often be confusing and hard to debug.
 *
 * This implementation eliminates this issue by moving these sorts of errors to compile time. If an unknown dependency
 * is used in a InjectableFunction, for example, the code simply won't compile.
 *
 * To achieve this, we do lose the ability to implicitly define the dependency graph, as is common with many dependency
 * injection frameworks that employ decorators to define Services and their dependencies. Instead, the dependency graph
 * must be constructed explicitly, step-by-step, via successive calls to the `provide()` method. This is a suitable
 * trade-off for CameraKit, as there are a relatively small number of Services.
 *
 * Here's a simple example of Container usage:
 * ```ts
 * const fooFactory = Injectable('Foo', () => new Foo())
 * const barFactory = Injectable('Bar', ['Foo'] as const, (foo: Foo) => new Bar(foo))
 * const container = Container.empy()
 *   .provide(fooFactory)
 *   .provide(barFactory)
 *
 * const bar: Bar = container.get('Bar')
 * ```
 */
/** @internal */
class Container {
    constructor(factories) {
        this.factories = {};
        for (const k in factories) {
            const fn = factories[k];
            if (isMemoized(fn))
                this.factories[k] = fn;
            else
                this.factories[k] = memoize(fn);
        }
    }
    static provides(fnOrContainer) {
        // Although the `provides` method has overloads that match both members of the union type separately, it does
        // not match the union type itself, so the compiler forces us to branch and handle each type within the union
        // separately. (Maybe in the future the compiler will decide to infer this, but for now this is necessary.)
        if (fnOrContainer instanceof PartialContainer_PartialContainer)
            return new Container({}).provides(fnOrContainer);
        if (fnOrContainer instanceof Container)
            return new Container({}).provides(fnOrContainer);
        return new Container({}).provides(fnOrContainer);
    }
    /**
     * Create a copy of this Container, optionally providing a list of Services which will be scoped to the copy.
     *
     * This can be useful, for example, if different parts of an application wish to use the same Service interface, but
     * do not want to share a reference to same Service instance.
     *
     * Say we have a Service which manages a list of Users. Our application wishes to display two lists of Users, which
     * may be edited independently. In this case it may be desirable to create a Container for each list component, with
     * the UserList Service scoped to those Containers – that way, each list component gets a unique copy of the
     * UserList Service that can be edited independently of the other.
     *
     * @param scopedServices A list of Tokens identifying Services which will be scoped to the new Container – that is,
     * if those Services had already been created by the source Container, they will be re-created by their Factory
     * functions when provided by the new Container.
     * @returns A new copy of this Container, sharing all of this Container's Services. Services corresponding to any
     * Tokens passed to this method will be re-created by the new Container (i.e. they become "scoped" to the new
     * Container).
     */
    copy(scopedServices) {
        const factories = Object.assign({}, this.factories);
        // We "un-memoize" scoped Service InjectableFunctions so they will create a new copy of their Service when
        // provided by the new Container – we re-memoize them so the new Container will itself only create one Service
        // instance.
        (scopedServices || []).forEach((token) => {
            factories[token] = this.factories[token].delegate;
        });
        return new Container(factories);
    }
    get(token) {
        if (token === CONTAINER)
            return this;
        const factory = this.factories[token];
        if (!factory) {
            throw new Error(`[Container::get] Could not find Service for Token "${String(token)}". This should've caused a ` +
                "compile-time error. If the Token is 'undefined', check all your calls to the Injectable " +
                "function. Make sure you define dependencies using string literals or string constants that are " +
                "definitely initialized before the call to Injectable.");
        }
        return factory(this);
    }
    run(fnOrContainer) {
        if (fnOrContainer instanceof PartialContainer_PartialContainer) {
            const runnableContainer = this.provides(fnOrContainer);
            for (const token of fnOrContainer.getTokens()) {
                runnableContainer.get(token);
            }
        }
        else {
            this.provides(fnOrContainer).get(fnOrContainer.token);
        }
        return this;
    }
    provides(fnOrContainer) {
        if (fnOrContainer instanceof PartialContainer_PartialContainer || fnOrContainer instanceof Container) {
            const factories = fnOrContainer instanceof PartialContainer_PartialContainer ? fnOrContainer.getFactories(this) : fnOrContainer.factories;
            // Safety: `this.factories` and `factories` are both properly type checked, so merging them produces
            // a Factories object with keys from both Services and AdditionalServices. The compiler is unable to
            // infer that Factories<A> & Factories<B> == Factories<A & B>, so the cast is required.
            return new Container(Object.assign(Object.assign({}, this.factories), factories));
        }
        return this.providesService(fnOrContainer);
    }
    providesService(fn) {
        const token = fn.token;
        const dependencies = fn.dependencies;
        const factory = memoize((container) => {
            return fn(...dependencies.map((t) => {
                // To support overwriting an already-existing service with a new implementation, it should be
                // possibleto do `provide(A, [A], a => createNewServiceFromOld(a))` – that is, inject a dependency
                // with the same token as this service's token.
                //
                // To avoid a circular dependency (in which the factory for service A depends on itself), we always
                // use the service defined in the *parent* container (i.e. this) when injecting a dependency with
                // the same token as the service we're providing. If we did not do this, calling `container.get(t)`
                // would result in an infinite loop.
                return t === token ? this.get(t) : container.get(t);
            }));
        });
        // Safety: `token` and `factory` are property type checked, so extending `this.factories` produces a
        // MaybeMemoizedFactories object with the expected set of services – but when using the spread operation to
        // merge two objects, the compiler widens the Token type to string. So we must re-narrow via casting.
        const factories = Object.assign(Object.assign({}, this.factories), { [token]: factory });
        return new Container(factories);
    }
}
//# sourceMappingURL=Container.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/filter.js


function filter(predicate, thisArg) {
    return operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
    });
}
//# sourceMappingURL=filter.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/isScheduler.js

function isScheduler(value) {
    return value && isFunction_isFunction(value.schedule);
}
//# sourceMappingURL=isScheduler.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/args.js


function last(arr) {
    return arr[arr.length - 1];
}
function args_popResultSelector(args) {
    return isFunction_isFunction(last(args)) ? args.pop() : undefined;
}
function args_popScheduler(args) {
    return isScheduler(last(args)) ? args.pop() : undefined;
}
function popNumber(args, defaultValue) {
    return typeof last(args) === 'number' ? args.pop() : defaultValue;
}
//# sourceMappingURL=args.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/of.js


function of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args_popScheduler(args);
    return from_from(args, scheduler);
}
//# sourceMappingURL=of.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js




function takeUntil(notifier) {
    return operate(function (source, subscriber) {
        innerFrom_innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, function () { return subscriber.complete(); }, noop));
        !subscriber.closed && source.subscribe(subscriber);
    });
}
//# sourceMappingURL=takeUntil.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/tap.js




function tap(observerOrNext, error, complete) {
    var tapObserver = isFunction_isFunction(observerOrNext) || error || complete
        ?
            { next: observerOrNext, error: error, complete: complete }
        : observerOrNext;
    return tapObserver
        ? operate(function (source, subscriber) {
            var _a;
            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
            var isUnsub = true;
            source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                var _a;
                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                subscriber.next(value);
            }, function () {
                var _a;
                isUnsub = false;
                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                subscriber.complete();
            }, function (err) {
                var _a;
                isUnsub = false;
                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                subscriber.error(err);
            }, function () {
                var _a, _b;
                if (isUnsub) {
                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                }
                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
            }));
        })
        :
            identity_identity;
}
//# sourceMappingURL=tap.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/state-management/dist/types.js
// `Object.entries` does preserve key types.
const types_entries = (o) => Object.entries(o);
// `Object.fromEntries` does not preserve key types.
const fromEntries = (entries) => Object.fromEntries(entries);

;// CONCATENATED MODULE: ./node_modules/@snap/state-management/dist/actions.js


/**
 * Define an Action by providing a name and (optionally) the type of data the Action carries. Returns a function which
 * creates actions of that type.
 *
 * @param name The action's name, should be unique among all actions used by a single state machine.
 * @returns The function returned is used to specify the type of data the Action carries – it must be called to return
 * the actual action creator, which is then strongly typed.
 */
const defineAction = (name) => () => {
    const actionCreator = (data) => ({
        name,
        data,
    });
    Object.defineProperty(actionCreator, 'name', { value: name });
    // Safety: Object.defineProperty has added the `name` property, but the TS compiler doesn't know that.
    return actionCreator;
};
/**
 * Create an object from action creators, where each property is the name of the action.
 *
 * @param actions Pass one or more actions as arguments, using [[defineAction]] to create each action.
 * @returns
 */
const defineActions = (...actions) => {
    const entries = actions.map((s) => [s.name, s]);
    // Safety: TS isn't able to infer that keys are the action names, so we have to cast – but we're just extracting the
    // name property and using it as the key (we're doing no other manipulation), so we know we'll end up with the
    // correct ActionCreatorMap.
    return fromEntries(entries);
};
/**
 * Filter an `Observable<[Action, State]>` to only emit when the action matches one of the action names given as
 * arguments.
 * ```ts
 * myStateMachine.pipe(
 *   forActions('myFirstAction', 'mySecondAction'),
 * ).subscribe(doSomethingOnEitherAction)
 * ```
 *
 * @param actions Pass one or more action names as arguments, used to filter an `Observable<[Action, State]>`
 * @returns
 */
function forActions(...actions) {
    return filter((v) => actions.some(action => v[0].name === action));
}
/**
 * Determine if a given action is of a specific type, given by an action name. This narrows the type of the action.
 *
 * @param action An action with a broad type (e.g. a union of many actions)
 * @param name The name of a specific action.
 * @returns Narrows the type of the action argument to that action which has the given name.
 */
function isAction(action, name) {
    return action.name === name;
}

;// CONCATENATED MODULE: ./node_modules/@snap/state-management/dist/states.js


/**
 * Define a State by providing a name and (optionally) the type of data the State carries. Returns a function which
 * creates states of that type.
 *
 * @param name The state's name, should be unique among all states used by a single state machine.
 * @returns The function returned is used to specify the type of data the State carries – it must be called to return
 * the actual state creator, which is then strongly typed.
 */
const defineState = (name) => () => defineAction(name)();
/**
 * Create an object from state creators, where each property is the name of the state.
 *
 * @param states Pass one or more states as arguments, using [[defineState]] to create each state.
 * @returns
 */
const defineStates = (...states) => defineActions(...states);
/**
 * Filter an `Observable<[Action, State]>` to only emit when the state matches one of the state names given as
 * arguments.
 * ```ts
 * myStateMachine.pipe(
 *   inStates('myFirstState', 'mySecondState'),
 * ).subscribe(doSomethingIfInEitherState)
 * ```
 *
 * @param states Pass one or more state names as arguments, used to filter an `Observable<[Action, State]>`
 * @returns An Observable which only emits when in one of the given states.
 */
function inStates(...states) {
    return filter((v) => states.some(state => v[1].name === state));
}
/**
 * Determine if a given state is of a specific type, given by an state name. This narrows the type of the state.
 *
 * @param state A state with a broad type (e.g. a union of many states)
 * @param name The name of a specific state.
 * @returns Narrows the type of the state argument to that state which has the given name.
 */
function isState(state, name) {
    return state.name === name;
}

;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js


var BehaviorSubject = (function (_super) {
    __extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
            throw thrownError;
        }
        this._throwIfClosed();
        return _value;
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, (this._value = value));
    };
    return BehaviorSubject;
}(Subject));

//# sourceMappingURL=BehaviorSubject.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js







function withLatestFrom() {
    var inputs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        inputs[_i] = arguments[_i];
    }
    var project = args_popResultSelector(inputs);
    return operate(function (source, subscriber) {
        var len = inputs.length;
        var otherValues = new Array(len);
        var hasValue = inputs.map(function () { return false; });
        var ready = false;
        var _loop_1 = function (i) {
            innerFrom_innerFrom(inputs[i]).subscribe(createOperatorSubscriber(subscriber, function (value) {
                otherValues[i] = value;
                if (!ready && !hasValue[i]) {
                    hasValue[i] = true;
                    (ready = hasValue.every(identity_identity)) && (hasValue = null);
                }
            }, noop));
        };
        for (var i = 0; i < len; i++) {
            _loop_1(i);
        }
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            if (ready) {
                var values = __spreadArray([value], __read(otherValues));
                subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);
            }
        }));
    });
}
//# sourceMappingURL=withLatestFrom.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/never.js


var NEVER = new Observable_Observable(noop);
function never() {
    return NEVER;
}
//# sourceMappingURL=never.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js


function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    return mergeMap(identity_identity, concurrent);
}
//# sourceMappingURL=mergeAll.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/concatAll.js

function concatAll() {
    return mergeAll(1);
}
//# sourceMappingURL=concatAll.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/concat.js



function concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return concatAll()(from_from(args, args_popScheduler(args)));
}
//# sourceMappingURL=concat.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/startWith.js



function startWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var scheduler = args_popScheduler(values);
    return operate(function (source, subscriber) {
        (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
    });
}
//# sourceMappingURL=startWith.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/race.js




function race() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    sources = argsOrArgArray(sources);
    return sources.length === 1 ? innerFrom(sources[0]) : new Observable(raceInit(sources));
}
function raceInit(sources) {
    return function (subscriber) {
        var subscriptions = [];
        var _loop_1 = function (i) {
            subscriptions.push(innerFrom_innerFrom(sources[i]).subscribe(createOperatorSubscriber(subscriber, function (value) {
                if (subscriptions) {
                    for (var s = 0; s < subscriptions.length; s++) {
                        s !== i && subscriptions[s].unsubscribe();
                    }
                    subscriptions = null;
                }
                subscriber.next(value);
            })));
        };
        for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
            _loop_1(i);
        }
    };
}
//# sourceMappingURL=race.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/raceWith.js




function raceWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return !otherSources.length
        ? identity_identity
        : operate(function (source, subscriber) {
            raceInit(__spreadArray([source], __read(otherSources)))(subscriber);
        });
}
//# sourceMappingURL=raceWith.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/state-management/dist/state-machine.js

/**
 * A StateMachine takes a finite set of both Action and State types, represeting the allowed states of the machine and
 * the possible actions which may (or may not) cause a transition between states.
 *
 * The following algorithm is used to update state. For those who have used Redux, this will sound familiar:
 *
 * 1. The user of the state machine dispatches one of the allowed Actions.
 * 2. The [action, current state] pair is passed to each of the "reducers" configured for the state machine. These
 *    reducers must (synchronously) produce a new state, or do nothing.
 * 3. The state machine's internal state is updated to the new state (or remains in the old state if no reducer produced
 *    a new state).
 * 4. Notify all configured "effects" with the [action, new state] pair – effects are notified even if the state did not
 *    change. Effects may produce their own actions. This will feel familiar to users of redux-observable.
 *
 * We can visualize this with the following diagram:
 *
 * ```txt
 * dipatch Action
 *    |
 *    |
 * reducers run on [Action, Starting State] and return New State
 *    |
 *    |
 * the state machine's internal state is updated to New State
 *    |
 *    |
 * effects run on [Action, New State]
 * ```
 */
/** @internal */
class StateMachine {
    actions;
    states;
    /**
     * After an Action is dispatched, passed to the StateMachine's reducer to produce a new state (or stay in the same
     * state), a pair of [Action, State] is emitted on this Observable.
     *
     * This can be used to observe every action dispatched to the StateMachine, along with the state that it produced.
     *
     * The most common use of the `events` Observable is to implement side-effects. It's very common for side-effects
     * to dispatch actions back to the StateMachine.
     *
     * ```ts
     * stateMachine.events.pipe(
     *   inStates('idle'),
     *   forActions('makeRequest'),
     *   switchMap(([{data: request}]) => fromFetch(request)),
     *   tap(response => stateMachine.dispatch('requestComplete', response)),
     * ).subscribe()
     * ```
     */
    events;
    actionsSubject;
    eventsSubject;
    state;
    /**
     * Create a StateMachine with a defined set of Actions and States.
     *
     * The StateMachine begins in a given initial state with transitions to new states defined by a "reducer" function.
     *
     * Reducers are OperatorFunctions which map an Observable of `[Action, State]` pairs into an Observable of a new
     * state. They can be constructed using RxJS's `pipe` function. For example:
     *
     * ```ts
     * new StateMachine(actions, states, initialState, pipe(
     *   inStates('someState'),
     *   forActions('someAction'),
     *   map(([a, s]) => computeNewState(a, s)),
     * ))
     * ```
     *
     * Often it will be useful to break the reducer into separate behaviors to handle different actions:
     *
     * ```ts
     * new StateMachine(actions, states, initialState, state => {
     *   return merge(
     *     state.pipe(inStates('someState'), forAction('someAction'), map(computeNextState)),
     *     state.pipe(inStates('otherState'), forAction('otherAction'), map(computeOtherNextState)),
     *     // ...
     *   )
     * })
     * ```
     *
     * Reducers must return an output Observable<State> which, when the input Observable<[Action, State]> emits, either:
     *
     * - synchronously emits a single new state.
     * - emits nothing.
     *
     * To enforce this, reducer Observables race with a sync Observable containing the current state. If the reducer
     * Observable does not emit a new state synchronously, the current state is used (i.e. the state does not change).
     *
     * @param initialState
     * @param reducer
     * @returns
     */
    constructor(actions, states, initialState, reducer) {
        this.actions = actions;
        this.states = states;
        this.actionsSubject = new Subject();
        this.eventsSubject = new Subject();
        this.events = this.eventsSubject.asObservable();
        this.state = new BehaviorSubject(initialState);
        this.actionsSubject
            .pipe(withLatestFrom(this.state), mergeMap(([a, s]) => 
        // `NEVER` + `startWith` is needed for `raceWith` to work properly. If we instead used the more
        // typical `of([a, s])` we would encounter the following problem:
        //
        // `of` emits its value and completes synchronously (i.e. both in the same "frame," if you think in
        // marble diagrams). Assuming `reducer` does nothing to modify the completion behavior of its source
        // Observable, the Observable returned by `reducer` will also complete immediately. If we were to
        // pass that Observable to `raceWith` – whose output mirrors whichever input Observable is first to
        // emit, error, *or complete* – it would always win, even if it never emitted anything (because it
        // would already be complete).
        //
        // So instead we need an Observable that does not complete. We achieve this by using `NEVER` and
        // then starting it with `[a, s]`. Note that it's important to then use `take(1)` after `raceWith`
        // so that we don't leak Observables which never complete.
        NEVER.pipe(startWith([a, s]), reducer, raceWith(of(s)), tap((newState) => {
            if (newState !== s)
                this.state.next(newState);
        }), map((newState) => [a, newState]), take(1))))
            .subscribe(this.eventsSubject);
    }
    dispatch(actionOrName, data) {
        const action = typeof actionOrName === 'string' ? { name: actionOrName, data } : actionOrName;
        this.actionsSubject.next(action);
    }
    /**
     * Returns the current state.
     */
    getState() {
        return this.state.getValue();
    }
}
/**
 * Transform a source Observable of Actions into an Observable of [Action, State] pairs by:
 * 1. Dispatching the source Actions to the given StateMachine.
 * 3. Return an Observable of that StateMachine's events.
 *
 * This allows callers to dispatch to a StateMachine when the output Observable is subscribed, and then be notified when
 * the StateMachine has produced a new state (which could be the same as the old state).
 *
 * The output Observable will remain subscribed to the StateMachine's events, emitting all subsequent `[Action, State]`
 * pairs. For that reason, it's important to ensure the output Observable is properly unsubscribed to avoid leaks. This
 * is commonly done using the `take`, `takeUntil`, `firstValueFrom`, etc. operators.
 *
 * @param stateMachine The source Observable's Actions will be dispatched to this StateMachine
 * @returns Operator function which transforms an Observable<Action> into an Observable<[Action, State]> by subscribing
 * to the given StateMachine's events and then dispatching source actions to it when they arrive.
 */
function dispatch(stateMachine) {
    return (source) => new Observable_Observable(subscriber => {
        const subscription = stateMachine.events.subscribe(subscriber);
        subscription.add(source.subscribe({
            next: (action) => stateMachine.dispatch(action),
            error: (error) => subscriber.error(error),
            // We purposely do not forward the `complete` notification. We want the subscriber to remain subscribed to
            // the stateMachine.events observable even if the source Observable<Actions> completes.
        }));
        return subscription;
    });
}

;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/index.js






//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/pageVisibility.js
const onHiddenHandlers = new Set();
const onVisibleHandlers = new Set();
let previousVisibilityState = document.visibilityState;
let visibilityTransition = false;
let initialized = false;
function maybeInitializeVisibilityListeners() {
    if (initialized)
        return;
    initialized = true;
    document.addEventListener("visibilitychange", () => {
        const handlers = previousVisibilityState === "visible" && document.visibilityState === "hidden"
            ? onHiddenHandlers
            : previousVisibilityState === "hidden" && document.visibilityState === "visible"
                ? onVisibleHandlers
                : new Set();
        visibilityTransition = document.visibilityState;
        for (const handler of handlers) {
            try {
                handler();
            }
            catch (error) {
                // We'll do the same thing here that we would do if the handler was added directly as an event
                // listener and dispatch an error event if we can.
                if (typeof window !== "undefined")
                    window.dispatchEvent(new CustomEvent("error", { detail: error }));
            }
        }
        previousVisibilityState = visibilityTransition;
        visibilityTransition = false;
    });
}
function isDuringVisibilityTransition(test) {
    return test === visibilityTransition;
}
/**
 * Run a function when the page is hidden. If this occurs due to tab / browser closure, only synchronous functions will
 * run to completion.
 *
 * If the given handler throws an error, it will be silently swallowed.
 *
 * @param handler
 * @returns A function which, when called, removes the function from the set of visibility change handlers.
 */
function onPageHidden(handler) {
    maybeInitializeVisibilityListeners();
    onHiddenHandlers.add(handler);
    return () => onHiddenHandlers.delete(handler);
}
/**
 * Run a function when the page is made visible.
 *
 * If the given handler throws an error, it will be silently swallowed.
 *
 * @param handler
 * @returns A function which, when called, removes the function from the set of visibility change handlers.
 */
function onPageVisible(handler) {
    maybeInitializeVisibilityListeners();
    onVisibleHandlers.add(handler);
    return () => onVisibleHandlers.delete(handler);
}
//# sourceMappingURL=pageVisibility.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/transforms/Transform2D.js
/**
 * Use this class to supply the CameraKitSession::setSourceTransform with the proper data
 * needed to apply transformations
 *
 * @category Rendering
 */
class Transform2D_Transform2D {
    /**
     * @param matrix A 3x3 matrix in column-major order, representing a 2D transform to be applied to the source media
     */
    constructor(matrix) {
        this.matrix = matrix;
    }
}
Transform2D_Transform2D.MirrorX = new Transform2D_Transform2D([-1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0]);
Transform2D_Transform2D.MirrorY = new Transform2D_Transform2D([1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0]);
Transform2D_Transform2D.Identity = new Transform2D_Transform2D([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]);

//# sourceMappingURL=Transform2D.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/transforms/index.js

//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/media-sources/CameraKitSource.js
/* eslint-disable @typescript-eslint/member-ordering */



const defaultDeviceInfo = {
    cameraType: "front",
    fpsLimit: Number.POSITIVE_INFINITY,
};
const createNotAttachedError = (message) => new Error(`${message}. This CameraKitSource is not attached to a CameraKitSession.`);
/**
 * This general-purpose class represents a source of media for a {@link CameraKitSession}.
 *
 * When an instance is passed to {@link CameraKitSession.setSource | CameraKitSession.setSource}, it will be "attached"
 * to the session. Later it may be "detached" from the session.
 *
 * Passing a {@link CameraKitSourceSubscriber} to the constructor allows callers to specify behavior
 * that will occur when the source is attached and detached. This can be used to e.g. update the render size.
 *
 * @category Rendering
 */
class CameraKitSource_CameraKitSource {
    constructor(sourceInfo, subscriber = {}, deviceInfo = {}) {
        this.sourceInfo = sourceInfo;
        this.subscriber = subscriber;
        this.deviceInfo = Object.assign(Object.assign({}, defaultDeviceInfo), deviceInfo);
    }
    /**
     * Called by {@link CameraKitSession} when this source is set as that session's source.
     *
     * @param lensCore
     * @param reportError Calling this function will report an error back to the session.
     * @returns Rejects if any calls to LensCore or CameraKitSource.subscriber.onAttach fail.
     * @internal
     */
    attach(lensCore, reportError) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (this.lensCore) {
                throw new Error("Cannot attach. This CameraKitCustomSource has already been attached to " +
                    "a CameraKitSession. To re-attach, create a copy of this CameraKitCustomSource.");
            }
            this.lensCore = lensCore;
            yield new Promise((onSuccess, onFailure) => {
                lensCore.useMediaElement({
                    autoplayNewMedia: false,
                    autoplayPreviewCanvas: false,
                    media: this.sourceInfo.media,
                    pauseExistingMedia: false,
                    replayTrackingData: this.sourceInfo.replayTrackingData,
                    requestWebcam: false,
                    startOnFrontCamera: this.deviceInfo.cameraType === "front",
                    useManualFrameProcessing: this.sourceInfo.useManualFrameProcessing,
                    onSuccess,
                    onFailure,
                });
            });
            yield new Promise((onSuccess, onFailure) => {
                // LensCore uses 0 to remove the limit.
                const fps = this.deviceInfo.fpsLimit < Number.POSITIVE_INFINITY ? this.deviceInfo.fpsLimit : 0;
                lensCore.setFPSLimit({ fps, onSuccess, onFailure });
            });
            if (this.subscriber.onAttach)
                yield this.subscriber.onAttach(this, lensCore, reportError);
        });
    }
    /**
     * Make a copy of the source, sharing the same {@link CameraKitSourceSubscriber}.
     *
     * @param deviceInfo Optionally provide new device info for the copy (e.g. to change the camera type).
     * @returns The new {@link CameraKitSource}
     */
    copy(deviceInfo = {}) {
        return new CameraKitSource_CameraKitSource(this.sourceInfo, this.subscriber, Object.assign(Object.assign({}, this.deviceInfo), deviceInfo));
    }
    /**
     * Called by {@link CameraKitSession} when it must remove this source.
     *
     * @param reportError Calling this function will report an error back to the session.
     * @returns
     * @internal
     */
    detach(reportError) {
        if (!this.lensCore)
            return Promise.reject(createNotAttachedError("Cannot detach"));
        if (this.subscriber.onDetach)
            return this.subscriber.onDetach(reportError);
    }
    /**
     * Set the resolution used to render this source.
     *
     * It’s important to distinguish render size from display size. The size at which the output canvases are displayed
     * on a web page is determined by the CSS of the page. It is distinct from the size at which LensCore renders
     * Lenses. Performance is dominated by render size, while any display scaling can most often be thought of as free.
     *
     * If greater performance is required, a smaller render size may boost frame-rate. It does come at a cost, including
     * loss of accuracy in various tracking and computer-vision algorithms (since they'll be operating on fewer pixels).
     *
     * The size of the Live and Capture {@link RenderTarget} is always the same.
     *
     * @todo Currently it's only valid to call `setRenderSize` after `CameraKitSession.play` has been called. This
     * constraint should be removed, so callers don't have to understand the underlying LensCore state machine.
     *
     * @param width pixels
     * @param height pixels
     * @returns Promise resolves when the render size has been successfully updated.
     */
    setRenderSize(width, height) {
        return new Promise((onSuccess, onFailure) => {
            if (!this.lensCore)
                return onFailure(createNotAttachedError("Cannot setRenderSize"));
            const target = { width, height };
            this.lensCore.setRenderSize({ mode: "explicit", target, onSuccess, onFailure });
        });
    }
    /**
     * Apply a 2D transformation to the source (e.g. translation, rotation, scale).
     *
     * @param transform Specifies the 3x3 matrix describing the transformation.
     */
    setTransform(transform) {
        return new Promise((onSuccess, onFailure) => {
            if (!this.lensCore)
                return onFailure(createNotAttachedError("Cannot setTransform"));
            const matrix = new Float32Array(transform.matrix);
            this.lensCore.setInputTransform({ matrix, onSuccess, onFailure });
        });
    }
}
__decorate([
    validate_validate,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, Number]),
    __metadata("design:returntype", Promise)
], CameraKitSource_CameraKitSource.prototype, "setRenderSize", null);
__decorate([
    validate_validate,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Transform2D_Transform2D]),
    __metadata("design:returntype", Promise)
], CameraKitSource_CameraKitSource.prototype, "setTransform", null);
//# sourceMappingURL=CameraKitSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/media-sources/MediaStreamSource.js



const MediaStreamSource_defaultOptions = {
    transform: Transform2D_Transform2D.Identity,
    disableSourceAudio: false,
};
/**
 * Create a {@link CameraKitSource} from a user's media device -- this calls
 * [MediaDevices.getUserMedia](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia) to get a
 * MediaStream and then calls {@link createMediaStreamSource}.
 *
 * @param constraints Specify contraints used to get a MediaStream from a media device. By default we simply request
 * a video stream.
 * @param options
 * @param options.transform By default we horizontally mirror the video stream. The most common use-case is to obtain a
 * stream from a front-facing web cam, which requires mirroring to be viewed naturally.
 * @param options.cameraType By default we set this to 'front' to indicate a camera pointed at the user (e.g. a webcam).
 * @param options.fpsLimit By default we set no limit on FPS – if the source device has a known FPS setting this limit
 * may prevent CameraKit from using more compute resources than strictly necessary.
 * @returns A Promise, resolving to {@link CameraKitSource}
 *
 * @category Rendering
 */
function createUserMediaSource(constraints = { video: true }, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const stream = yield navigator.mediaDevices.getUserMedia(constraints);
        return createMediaStreamSource(stream, Object.assign({ transform: Transform2D.MirrorX, cameraType: "front" }, options));
    });
}
/**
 * Create a {@link CameraKitSource} from any
 * [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream).
 *
 * @param stream Any MediaStream, such as obtained via `canvas.captureStream()`
 * @param options
 * @param options.transform We apply no transformation by default.
 * @param options.disableSourceAudio By default we pass audio to lens. Settings this to true will disable sending audio
 * to the lens.
 * @param options.cameraType By default we set this to 'front', which is the camera type most Lenses expect.
 * @param options.fpsLimit By default we set no limit on FPS – if the MediaStream has a known FPS setting this limit
 * may prevent CameraKit from using more compute resources than strictly necessary.
 *
 * @category Rendering
 */
function createMediaStreamSource(stream, options = {}) {
    const optionsNotNull = Object.assign(Object.assign({}, MediaStreamSource_defaultOptions), options);
    const { width, height } = stream.getVideoTracks().length > 0 ? stream.getVideoTracks()[0].getSettings() : { width: 0, height: 0 };
    const enableSourceAudio = stream.getAudioTracks().length > 0 && !optionsNotNull.disableSourceAudio;
    const simulateStereoAudio = true;
    const sampleRate = 44100;
    let audioContext = undefined;
    let audioSource = undefined;
    let microphoneRecorderUrl;
    if (enableSourceAudio) {
        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_AudioWorklet
        const microphoneRecorderWorklet = `
        class MicrophoneWorkletProcessor extends AudioWorkletProcessor {
            process(inputs, outputs, parameters) {
                this.port.postMessage({
                    eventType: 'data',
                    buffer: inputs
                });
                return true;
            }
        }
        registerProcessor('microphone-worklet', MicrophoneWorkletProcessor);`;
        const microphoneRecorderBlob = new Blob([microphoneRecorderWorklet], {
            type: "application/javascript",
        });
        microphoneRecorderUrl = URL.createObjectURL(microphoneRecorderBlob);
    }
    return new CameraKitSource_CameraKitSource({ media: stream }, {
        onAttach: (source, lensCore, reportError) => tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (width !== undefined && height !== undefined)
                yield source.setRenderSize(width, height);
            yield source.setTransform(optionsNotNull.transform);
            if (enableSourceAudio) {
                // Audio paramters set has to be called before lens is applied
                lensCore.setAudioParameters({
                    parameters: {
                        numChannels: simulateStereoAudio ? 2 : 1,
                        sampleRate,
                    },
                    onFailure: (error) => {
                        reportError(error);
                    },
                });
                if (audioContext) {
                    yield audioContext.close();
                }
                audioContext = new AudioContext();
                audioSource = audioContext.createMediaStreamSource(stream);
                const scopedAudioSource = audioSource;
                audioContext.audioWorklet
                    .addModule(microphoneRecorderUrl)
                    .then(() => {
                    if (audioContext) {
                        const worklet = new AudioWorkletNode(audioContext, "microphone-worklet");
                        scopedAudioSource.connect(worklet);
                        worklet.connect(audioContext.destination);
                        // NOTE: We subscribe to messages here, and they will continue to arrive
                        // even after audioContext.close() is called. To disconnect the audio worklets
                        // created here, we need to track another variable - audioSource.
                        // By calling audioSource.disconnect(), we can properly
                        // disconnect the audio worklets.
                        worklet.port.onmessage = (e) => {
                            if (e.data.eventType === "data") {
                                // developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/process
                                // inputs[n][m] is the list of samples in the n-th input at the m-th channel.
                                const leftSamples = e.data.buffer[0][0];
                                let inputBuffers = [leftSamples];
                                if (simulateStereoAudio) {
                                    const rightSamples = e.data.buffer[0].length > 1 ? e.data.buffer[0][1] : leftSamples.slice();
                                    inputBuffers.push(rightSamples);
                                }
                                lensCore.processAudioSampleBuffer({
                                    input: inputBuffers,
                                    onFailure: (error) => {
                                        reportError(error);
                                    },
                                });
                            }
                        };
                    }
                })
                    .catch((error) => {
                    reportError(error);
                });
            }
        }),
        onDetach: (reportError) => tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (audioSource) {
                audioSource.disconnect();
                audioSource = undefined;
            }
            if (audioContext) {
                yield audioContext.close().catch((error) => {
                    reportError(error);
                });
                audioContext = undefined;
            }
        }),
    }, options);
}
//# sourceMappingURL=MediaStreamSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/media-sources/VideoSource.js

const VideoSource_defaultOptions = {
    trackingData: new ArrayBuffer(0),
};
/**
 * Create a {@link CameraKitSource} from an
 * [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement).
 *
 * @param video CameraKit performs best when the source video is 720p – arbitrary resolutions are supported, but very
 * high resolutions may not perform well.
 * @param options
 * @param options.trackingData If pre-computed tracking data exists for this video, it may be provided in order to boost
 * rendering performance (it is not typical or expected for this to be provided).
 * @param options.cameraType By default we set this to 'front', which is the camera type most Lenses expect.
 * @param options.fpsLimit By default we set no limit on FPS – if the video has a known FPS setting this limit
 * may prevent CameraKit from using more compute resources than strictly necessary.
 *
 * @category Rendering
 */
function createVideoSource(video, options = {}) {
    const { trackingData } = Object.assign(Object.assign({}, VideoSource_defaultOptions), options);
    const replayTrackingData = trackingData.byteLength > 0 ? { buffer: trackingData } : undefined;
    return new CameraKitSource_CameraKitSource({
        media: video,
        replayTrackingData,
    }, {
        onAttach: (source) => {
            // If the video element has no explicit width/height (which may be the case for elements that have not
            // been added to the DOM or had their size set explicitly), we'll render at the video's native
            // resolution.
            const [width, height] = video.width === 0 || video.height === 0
                ? [video.videoWidth, video.videoHeight]
                : [video.width, video.height];
            return source.setRenderSize(width, height);
        },
    }, options);
}
//# sourceMappingURL=VideoSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/logger/logEntries.js


/**
 * The factory creates new logEntries subject.
 *
 * NOTE: The factory calls `initLogger()`, which overrides the global `logEntrySubject`.
 * This is currently necessary to avoid sharing the same subject between multiple `CameraKit` instances.
 * In the future, we may throw an error when bootstrapping more than a single `CameraKit`,
 * that will allow us to have a single log entry subject.
 *
 * @internal
 */
const logEntriesFactory = Injectable("logEntries", () => initLogger().asObservable());
//# sourceMappingURL=logEntries.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/session/LensPerformanceMeasurement.js
const defaultFrameMetricsState = {
    avgFps: 0,
    averageProcessingTime: 0,
    procFrameCount: 0,
    procFrameMean: 0,
    procFrameD2: 0,
};
// This duration is chosen to be larger than we expect frame processing to reasonably take on any device, but smaller
// than the duration of a manual rendering pause (e.g. a user clicking a pause button followed by a play button).
//
// This also defines the min avgFps that will be reported – if we see avgFps at `1 / frameDurationThresholdSec`
// consistently, it's safe to assume actual fps is probably even lower.
const frameDurationThreshold = 1;
/**
 * Represents an ongoing measurement of rendering metrics.
 *
 * An instance of this class is obtained by calling {@link LensPerformanceMetrics.beginMeasurement}. Then it may be
 * used to record rendering performance metrics, reset measurement, or end the measurement.
 *
 * @category Rendering
 * @category Metrics
 */
class LensPerformanceMeasurement {
    constructor(instances) {
        this.instances = instances;
        this.state = Object.assign({}, defaultFrameMetricsState);
        this.instances.add(this);
    }
    /** @internal */
    update(processingTimeMs) {
        this.computeRunningStats(processingTimeMs);
    }
    /**
     * Return a {@link ComputedFrameMetrics} object, containing lens performance metrics.
     *
     * This method may be called multiple times, each time reporting values computed since the time when this instance
     * was created.
     */
    measure() {
        return {
            avgFps: this.state.avgFps,
            lensFrameProcessingTimeMsAvg: this.state.procFrameMean,
            lensFrameProcessingTimeMsStd: Math.sqrt(this.state.procFrameD2 / this.state.procFrameCount),
        };
    }
    /**
     * Reset the measured perforamance statistics (averages, std deviations). This is equivalent to using
     * {@link LensPerformanceMetrics.beginMeasurement} to create a new LensPerformanceMeasurement instance, but may be
     * more convenient.
     */
    reset() {
        this.state = Object.assign({}, defaultFrameMetricsState);
    }
    /**
     * Stop measuring performance statistics.
     *
     * This instance will not be garbage collected until this method is called. Therefore it is important to call this
     * method at the appropriate time to avoid leaking memory -- particularly if your application creates many
     * LensPerformanceMeasurement instances.
     */
    end() {
        this.instances.delete(this);
    }
    /**
     * In order to calculate the mean, variance, and standard deviation for the processing times
     *  we are using Welford's online algorithm.
     * https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm
     *
     * @param processingTimeMs Processing time that is returned from registered callback
     */
    computeRunningStats(processingTimeMs) {
        // calculate mean and delta squared for variance and standard deviation
        const delta = processingTimeMs - this.state.procFrameMean;
        this.state.procFrameCount += 1;
        this.state.procFrameMean += delta / this.state.procFrameCount;
        const delta2 = processingTimeMs - this.state.procFrameMean;
        this.state.procFrameD2 += delta * delta2;
        // Determine average fps
        if (this.priorFrameCompletedTime === undefined) {
            this.priorFrameCompletedTime = performance.now();
        }
        else {
            const frameDurationSec = (performance.now() - this.priorFrameCompletedTime) / 1000;
            if (frameDurationSec < frameDurationThreshold) {
                this.state.avgFps = (this.state.avgFps + 1 / frameDurationSec) / 2;
            }
            this.priorFrameCompletedTime = performance.now();
        }
    }
}
//# sourceMappingURL=LensPerformanceMeasurement.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/session/LensPerformanceMetrics.js




const LensPerformanceMetrics_logger = getLogger("RenderingMetrics");
const LensPerformanceMetrics_log = errorLoggingDecorator(LensPerformanceMetrics_logger);
/**
 * Use to measure lens rendering performance.
 *
 * The {@link LensPerformanceMetrics.beginMeasurement} method is used to start measuring rendering performance. After
 * a measurement has begun, performance metrics can be read using {@link LensPerformanceMeasurement}.
 *
 * @example
 * ```ts
 * const measurement = cameraKitSession.metrics.beginMeasurement()
 * // some time later
 * console.log(measurement.measure())
 * ```
 *
 * @category Rendering
 * @category Metrics
 */
class LensPerformanceMetrics {
    /** @internal */
    constructor(lensCore) {
        this.lensCore = lensCore;
        this.measurementInstances = new Set();
        this.lensCore.setOnFrameProcessedCallback({
            onFrameProcessed: ({ processingTimeMs }) => {
                try {
                    for (const measurement of this.measurementInstances.values()) {
                        measurement.update(processingTimeMs);
                    }
                }
                catch (error) {
                    LensPerformanceMetrics_logger.error(error);
                }
            },
            onFailure: (error) => LensPerformanceMetrics_logger.error(`Failed registering setOnFrameProcessedCallback with error: ${error.message}`),
        });
    }
    /**
     * Begin a measurement window, during which time rendering metrics will be gathered.
     *
     * @returns A {@link LensPerformanceMeasurement} representing an ongoing measurement of aggregated rendering
     * metrics, from which specific metrics can be obtained.
     */
    beginMeasurement() {
        return new LensPerformanceMeasurement(this.measurementInstances);
    }
}
__decorate([
    LensPerformanceMetrics_log,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", LensPerformanceMeasurement)
], LensPerformanceMetrics.prototype, "beginMeasurement", null);
//# sourceMappingURL=LensPerformanceMetrics.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/merge.js





function merge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args_popScheduler(args);
    var concurrent = popNumber(args, Infinity);
    var sources = args;
    return !sources.length
        ?
            EMPTY
        : sources.length === 1
            ?
                innerFrom_innerFrom(sources[0])
            :
                mergeAll(concurrent)(from_from(sources, scheduler));
}
//# sourceMappingURL=merge.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js




function exhaustMap(project, resultSelector) {
    if (resultSelector) {
        return function (source) {
            return source.pipe(exhaustMap(function (a, i) { return innerFrom_innerFrom(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }));
        };
    }
    return operate(function (source, subscriber) {
        var index = 0;
        var innerSub = null;
        var isComplete = false;
        source.subscribe(createOperatorSubscriber(subscriber, function (outerValue) {
            if (!innerSub) {
                innerSub = createOperatorSubscriber(subscriber, undefined, function () {
                    innerSub = null;
                    isComplete && subscriber.complete();
                });
                innerFrom_innerFrom(project(outerValue, index++)).subscribe(innerSub);
            }
        }, function () {
            isComplete = true;
            !innerSub && subscriber.complete();
        }));
    });
}
//# sourceMappingURL=exhaustMap.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js



function switchMap(project, resultSelector) {
    return operate(function (source, subscriber) {
        var innerSubscriber = null;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
            var innerIndex = 0;
            var outerIndex = index++;
            innerFrom_innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                innerSubscriber = null;
                checkComplete();
            })));
        }, function () {
            isComplete = true;
            checkComplete();
        }));
    });
}
//# sourceMappingURL=switchMap.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/LensPersistenceStore.js






const LensPersistenceStore_logger = getLogger("LensPersistenceStore");
const lensPersistenceStoreFactory = Injectable("lensPersistenceStore", [lensCoreFactory.token], (lensCore) => {
    const db = new IndexedDBPersistence({ databaseName: "lensPersistenceStore" });
    lensCore.registerSavePersistentStoreCallback((id, data) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        try {
            yield db.store(id, data);
        }
        catch (error) {
            LensPersistenceStore_logger.error(persistentStoreError(`Unable to store data for lens "${id}".`, error));
        }
    }));
    return db;
});
//# sourceMappingURL=LensPersistenceStore.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/snappable.js
/* eslint-disable */


const snappable_protobufPackage = "snapchat.lenses.snappable";
var EncryptionData_EncryptionScheme;
(function (EncryptionData_EncryptionScheme) {
    EncryptionData_EncryptionScheme["NOT_APPLICABLE"] = "NOT_APPLICABLE";
    EncryptionData_EncryptionScheme["SPOOKEY"] = "SPOOKEY";
    EncryptionData_EncryptionScheme["REGISTRY"] = "REGISTRY";
    /** FIDELIUS - Add others as necessary */
    EncryptionData_EncryptionScheme["FIDELIUS"] = "FIDELIUS";
    EncryptionData_EncryptionScheme["UNRECOGNIZED"] = "UNRECOGNIZED";
})(EncryptionData_EncryptionScheme || (EncryptionData_EncryptionScheme = {}));
function encryptionData_EncryptionSchemeFromJSON(object) {
    switch (object) {
        case 0:
        case "NOT_APPLICABLE":
            return EncryptionData_EncryptionScheme.NOT_APPLICABLE;
        case 1:
        case "SPOOKEY":
            return EncryptionData_EncryptionScheme.SPOOKEY;
        case 2:
        case "REGISTRY":
            return EncryptionData_EncryptionScheme.REGISTRY;
        case 3:
        case "FIDELIUS":
            return EncryptionData_EncryptionScheme.FIDELIUS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return EncryptionData_EncryptionScheme.UNRECOGNIZED;
    }
}
function encryptionData_EncryptionSchemeToNumber(object) {
    switch (object) {
        case EncryptionData_EncryptionScheme.NOT_APPLICABLE:
            return 0;
        case EncryptionData_EncryptionScheme.SPOOKEY:
            return 1;
        case EncryptionData_EncryptionScheme.REGISTRY:
            return 2;
        case EncryptionData_EncryptionScheme.FIDELIUS:
            return 3;
        default:
            return 0;
    }
}
var SnappableMessage_ReplyType;
(function (SnappableMessage_ReplyType) {
    SnappableMessage_ReplyType["NOT_APPLICABLE"] = "NOT_APPLICABLE";
    SnappableMessage_ReplyType["CONTEXT"] = "CONTEXT";
    SnappableMessage_ReplyType["INTERSTITIAL"] = "INTERSTITIAL";
    SnappableMessage_ReplyType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(SnappableMessage_ReplyType || (SnappableMessage_ReplyType = {}));
function snappableMessage_ReplyTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "NOT_APPLICABLE":
            return SnappableMessage_ReplyType.NOT_APPLICABLE;
        case 1:
        case "CONTEXT":
            return SnappableMessage_ReplyType.CONTEXT;
        case 2:
        case "INTERSTITIAL":
            return SnappableMessage_ReplyType.INTERSTITIAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SnappableMessage_ReplyType.UNRECOGNIZED;
    }
}
function snappableMessage_ReplyTypeToNumber(object) {
    switch (object) {
        case SnappableMessage_ReplyType.NOT_APPLICABLE:
            return 0;
        case SnappableMessage_ReplyType.CONTEXT:
            return 1;
        case SnappableMessage_ReplyType.INTERSTITIAL:
            return 2;
        default:
            return 0;
    }
}
function createBaseEncryptionData() {
    return {
        key: new Uint8Array(),
        ivStore: {},
        isKeyServerEncrypted: false,
        isKeyE2eEncrypted: false,
        encryptionScheme: EncryptionData_EncryptionScheme.NOT_APPLICABLE,
    };
}
const EncryptionData = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        Object.entries(message.ivStore).forEach(([key, value]) => {
            EncryptionData_IvStoreEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.isKeyServerEncrypted === true) {
            writer.uint32(24).bool(message.isKeyServerEncrypted);
        }
        if (message.isKeyE2eEncrypted === true) {
            writer.uint32(32).bool(message.isKeyE2eEncrypted);
        }
        if (message.encryptionScheme !== EncryptionData_EncryptionScheme.NOT_APPLICABLE) {
            writer.uint32(40).int32(encryptionData_EncryptionSchemeToNumber(message.encryptionScheme));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEncryptionData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    const entry2 = EncryptionData_IvStoreEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.ivStore[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message.isKeyServerEncrypted = reader.bool();
                    break;
                case 4:
                    message.isKeyE2eEncrypted = reader.bool();
                    break;
                case 5:
                    message.encryptionScheme = encryptionData_EncryptionSchemeFromJSON(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseEncryptionData();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.ivStore = Object.entries((_b = object.ivStore) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.isKeyServerEncrypted = (_c = object.isKeyServerEncrypted) !== null && _c !== void 0 ? _c : false;
        message.isKeyE2eEncrypted = (_d = object.isKeyE2eEncrypted) !== null && _d !== void 0 ? _d : false;
        message.encryptionScheme = (_e = object.encryptionScheme) !== null && _e !== void 0 ? _e : EncryptionData_EncryptionScheme.NOT_APPLICABLE;
        return message;
    },
};
function createBaseEncryptionData_IvStoreEntry() {
    return { key: "", value: new Uint8Array() };
}
const EncryptionData_IvStoreEntry = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEncryptionData_IvStoreEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEncryptionData_IvStoreEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBasePlayerData() {
    return { store: {}, serializedStore: new Uint8Array() };
}
const PlayerData = {
    encode(message, writer = minimal_default().Writer.create()) {
        Object.entries(message.store).forEach(([key, value]) => {
            PlayerData_StoreEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        if (message.serializedStore.length !== 0) {
            writer.uint32(18).bytes(message.serializedStore);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = PlayerData_StoreEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.store[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    message.serializedStore = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePlayerData();
        message.store = Object.entries((_a = object.store) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.serializedStore = (_b = object.serializedStore) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBasePlayerData_StoreEntry() {
    return { key: "", value: "" };
}
const PlayerData_StoreEntry = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayerData_StoreEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePlayerData_StoreEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSessionData() {
    return { playerData: {} };
}
const SessionData = {
    encode(message, writer = minimal_default().Writer.create()) {
        Object.entries(message.playerData).forEach(([key, value]) => {
            SessionData_PlayerDataEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSessionData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = SessionData_PlayerDataEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.playerData[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSessionData();
        message.playerData = Object.entries((_a = object.playerData) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = PlayerData.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseSessionData_PlayerDataEntry() {
    return { key: "", value: undefined };
}
const SessionData_PlayerDataEntry = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            PlayerData.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSessionData_PlayerDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = PlayerData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSessionData_PlayerDataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value =
            object.value !== undefined && object.value !== null ? PlayerData.fromPartial(object.value) : undefined;
        return message;
    },
};
function createBaseSnappableMedia() {
    return { sessionId: "", playerId: "", url: "", key: "", createdTime: 0 };
}
const SnappableMedia = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        if (message.playerId !== "") {
            writer.uint32(18).string(message.playerId);
        }
        if (message.url !== "") {
            writer.uint32(26).string(message.url);
        }
        if (message.key !== "") {
            writer.uint32(34).string(message.key);
        }
        if (message.createdTime !== 0) {
            writer.uint32(40).int64(message.createdTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnappableMedia();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sessionId = reader.string();
                    break;
                case 2:
                    message.playerId = reader.string();
                    break;
                case 3:
                    message.url = reader.string();
                    break;
                case 4:
                    message.key = reader.string();
                    break;
                case 5:
                    message.createdTime = snappable_longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseSnappableMedia();
        message.sessionId = (_a = object.sessionId) !== null && _a !== void 0 ? _a : "";
        message.playerId = (_b = object.playerId) !== null && _b !== void 0 ? _b : "";
        message.url = (_c = object.url) !== null && _c !== void 0 ? _c : "";
        message.key = (_d = object.key) !== null && _d !== void 0 ? _d : "";
        message.createdTime = (_e = object.createdTime) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseSnap3DData() {
    return { allowZippedMedia: false };
}
const Snap3DData = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.allowZippedMedia === true) {
            writer.uint32(8).bool(message.allowZippedMedia);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnap3DData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allowZippedMedia = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSnap3DData();
        message.allowZippedMedia = (_a = object.allowZippedMedia) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseUsesCameraRoll() {
    return { usesCameraRoll: false };
}
const UsesCameraRoll = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.usesCameraRoll === true) {
            writer.uint32(8).bool(message.usesCameraRoll);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUsesCameraRoll();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.usesCameraRoll = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUsesCameraRoll();
        message.usesCameraRoll = (_a = object.usesCameraRoll) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseSnappableMessage() {
    return {
        snappable: undefined,
        media: [],
        effectId: "",
        userIds: [],
        focusPointX: 0,
        focusPointY: 0,
        focusPointWidth: 0,
        replyType: SnappableMessage_ReplyType.NOT_APPLICABLE,
        snap3dData: undefined,
        usesCameraRollData: undefined,
        assetBatchId: "",
    };
}
const SnappableMessage = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.snappable !== undefined) {
            Snappable.encode(message.snappable, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.media) {
            SnappableMedia.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.effectId !== "") {
            writer.uint32(26).string(message.effectId);
        }
        for (const v of message.userIds) {
            writer.uint32(34).string(v);
        }
        if (message.focusPointX !== 0) {
            writer.uint32(45).float(message.focusPointX);
        }
        if (message.focusPointY !== 0) {
            writer.uint32(53).float(message.focusPointY);
        }
        if (message.focusPointWidth !== 0) {
            writer.uint32(61).float(message.focusPointWidth);
        }
        if (message.replyType !== SnappableMessage_ReplyType.NOT_APPLICABLE) {
            writer.uint32(64).int32(snappableMessage_ReplyTypeToNumber(message.replyType));
        }
        if (message.snap3dData !== undefined) {
            Snap3DData.encode(message.snap3dData, writer.uint32(74).fork()).ldelim();
        }
        if (message.usesCameraRollData !== undefined) {
            UsesCameraRoll.encode(message.usesCameraRollData, writer.uint32(82).fork()).ldelim();
        }
        if (message.assetBatchId !== "") {
            writer.uint32(4002).string(message.assetBatchId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnappableMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.snappable = Snappable.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.media.push(SnappableMedia.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.effectId = reader.string();
                    break;
                case 4:
                    message.userIds.push(reader.string());
                    break;
                case 5:
                    message.focusPointX = reader.float();
                    break;
                case 6:
                    message.focusPointY = reader.float();
                    break;
                case 7:
                    message.focusPointWidth = reader.float();
                    break;
                case 8:
                    message.replyType = snappableMessage_ReplyTypeFromJSON(reader.int32());
                    break;
                case 9:
                    message.snap3dData = Snap3DData.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.usesCameraRollData = UsesCameraRoll.decode(reader, reader.uint32());
                    break;
                case 500:
                    message.assetBatchId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSnappableMessage();
        message.snappable =
            object.snappable !== undefined && object.snappable !== null ? Snappable.fromPartial(object.snappable) : undefined;
        message.media = ((_a = object.media) === null || _a === void 0 ? void 0 : _a.map((e) => SnappableMedia.fromPartial(e))) || [];
        message.effectId = (_b = object.effectId) !== null && _b !== void 0 ? _b : "";
        message.userIds = ((_c = object.userIds) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.focusPointX = (_d = object.focusPointX) !== null && _d !== void 0 ? _d : 0;
        message.focusPointY = (_e = object.focusPointY) !== null && _e !== void 0 ? _e : 0;
        message.focusPointWidth = (_f = object.focusPointWidth) !== null && _f !== void 0 ? _f : 0;
        message.replyType = (_g = object.replyType) !== null && _g !== void 0 ? _g : SnappableMessage_ReplyType.NOT_APPLICABLE;
        message.snap3dData =
            object.snap3dData !== undefined && object.snap3dData !== null
                ? Snap3DData.fromPartial(object.snap3dData)
                : undefined;
        message.usesCameraRollData =
            object.usesCameraRollData !== undefined && object.usesCameraRollData !== null
                ? UsesCameraRoll.fromPartial(object.usesCameraRollData)
                : undefined;
        message.assetBatchId = (_h = object.assetBatchId) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSnappable() {
    return {
        id: "",
        sessionId: "",
        playerId: "",
        sessionData: undefined,
        createdTime: 0,
        expireTime: 0,
        version: 0,
        encryptionData: undefined,
        sessionDepth: 0,
    };
}
const Snappable = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.sessionId !== "") {
            writer.uint32(18).string(message.sessionId);
        }
        if (message.playerId !== "") {
            writer.uint32(26).string(message.playerId);
        }
        if (message.sessionData !== undefined) {
            SessionData.encode(message.sessionData, writer.uint32(34).fork()).ldelim();
        }
        if (message.createdTime !== 0) {
            writer.uint32(40).int64(message.createdTime);
        }
        if (message.expireTime !== 0) {
            writer.uint32(48).int64(message.expireTime);
        }
        if (message.version !== 0) {
            writer.uint32(56).int32(message.version);
        }
        if (message.encryptionData !== undefined) {
            EncryptionData.encode(message.encryptionData, writer.uint32(66).fork()).ldelim();
        }
        if (message.sessionDepth !== 0) {
            writer.uint32(72).int32(message.sessionDepth);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnappable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.sessionId = reader.string();
                    break;
                case 3:
                    message.playerId = reader.string();
                    break;
                case 4:
                    message.sessionData = SessionData.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.createdTime = snappable_longToNumber(reader.int64());
                    break;
                case 6:
                    message.expireTime = snappable_longToNumber(reader.int64());
                    break;
                case 7:
                    message.version = reader.int32();
                    break;
                case 8:
                    message.encryptionData = EncryptionData.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.sessionDepth = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseSnappable();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.sessionId = (_b = object.sessionId) !== null && _b !== void 0 ? _b : "";
        message.playerId = (_c = object.playerId) !== null && _c !== void 0 ? _c : "";
        message.sessionData =
            object.sessionData !== undefined && object.sessionData !== null
                ? SessionData.fromPartial(object.sessionData)
                : undefined;
        message.createdTime = (_d = object.createdTime) !== null && _d !== void 0 ? _d : 0;
        message.expireTime = (_e = object.expireTime) !== null && _e !== void 0 ? _e : 0;
        message.version = (_f = object.version) !== null && _f !== void 0 ? _f : 0;
        message.encryptionData =
            object.encryptionData !== undefined && object.encryptionData !== null
                ? EncryptionData.fromPartial(object.encryptionData)
                : undefined;
        message.sessionDepth = (_g = object.sessionDepth) !== null && _g !== void 0 ? _g : 0;
        return message;
    },
};
function createBasePutSnappableRequest() {
    return { snappable: undefined, media: [] };
}
const PutSnappableRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.snappable !== undefined) {
            Snappable.encode(message.snappable, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.media) {
            SnappableMedia.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePutSnappableRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.snappable = Snappable.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.media.push(SnappableMedia.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePutSnappableRequest();
        message.snappable =
            object.snappable !== undefined && object.snappable !== null ? Snappable.fromPartial(object.snappable) : undefined;
        message.media = ((_a = object.media) === null || _a === void 0 ? void 0 : _a.map((e) => SnappableMedia.fromPartial(e))) || [];
        return message;
    },
};
function createBasePutSnappableResponse() {
    return { id: "" };
}
const PutSnappableResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePutSnappableResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePutSnappableResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetSnappableRequest() {
    return { id: "" };
}
const GetSnappableRequest = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSnappableRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetSnappableRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetSnappableResponse() {
    return { data: undefined, media: [] };
}
const GetSnappableResponse = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.data !== undefined) {
            Snappable.encode(message.data, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.media) {
            SnappableMedia.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSnappableResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = Snappable.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.media.push(SnappableMedia.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetSnappableResponse();
        message.data = object.data !== undefined && object.data !== null ? Snappable.fromPartial(object.data) : undefined;
        message.media = ((_a = object.media) === null || _a === void 0 ? void 0 : _a.map((e) => SnappableMedia.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSnappableEncryptedKey() {
    return { encryptedKey: new Uint8Array(), encryptionKeyId: "", encryptionKeyIv: new Uint8Array() };
}
const SnappableEncryptedKey = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.encryptedKey.length !== 0) {
            writer.uint32(10).bytes(message.encryptedKey);
        }
        if (message.encryptionKeyId !== "") {
            writer.uint32(18).string(message.encryptionKeyId);
        }
        if (message.encryptionKeyIv.length !== 0) {
            writer.uint32(26).bytes(message.encryptionKeyIv);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSnappableEncryptedKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encryptedKey = reader.bytes();
                    break;
                case 2:
                    message.encryptionKeyId = reader.string();
                    break;
                case 3:
                    message.encryptionKeyIv = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSnappableEncryptedKey();
        message.encryptedKey = (_a = object.encryptedKey) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.encryptionKeyId = (_b = object.encryptionKeyId) !== null && _b !== void 0 ? _b : "";
        message.encryptionKeyIv = (_c = object.encryptionKeyIv) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
var snappable_globalThis = (() => {
    if (typeof snappable_globalThis !== "undefined")
        return snappable_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function snappable_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new snappable_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=snappable.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/geopoint.js
/* eslint-disable */


const geopoint_protobufPackage = "snapchat.lenses";
function createBaseGeopoint() {
    return { latitude: 0, longitude: 0 };
}
const Geopoint = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.latitude !== 0) {
            writer.uint32(9).double(message.latitude);
        }
        if (message.longitude !== 0) {
            writer.uint32(17).double(message.longitude);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGeopoint();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.latitude = reader.double();
                    break;
                case 2:
                    message.longitude = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGeopoint();
        message.latitude = (_a = object.latitude) !== null && _a !== void 0 ? _a : 0;
        message.longitude = (_b = object.longitude) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=geopoint.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/geocircle.js
/* eslint-disable */



const geocircle_protobufPackage = "snapchat.lenses";
function createBaseGeocircle() {
    return { radius: 0, center: undefined };
}
const Geocircle = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.radius !== 0) {
            writer.uint32(9).double(message.radius);
        }
        if (message.center !== undefined) {
            Geopoint.encode(message.center, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGeocircle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.radius = reader.double();
                    break;
                case 2:
                    message.center = Geopoint.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGeocircle();
        message.radius = (_a = object.radius) !== null && _a !== void 0 ? _a : 0;
        message.center =
            object.center !== undefined && object.center !== null ? Geopoint.fromPartial(object.center) : undefined;
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=geocircle.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/lures.js
/* eslint-disable */



const lures_protobufPackage = "snapchat.lenses";
function createBaseLures() {
    return { locations: [], activeLure: undefined, closestLure: undefined };
}
const Lures = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.locations) {
            Geocircle.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.activeLure !== undefined) {
            Geocircle.encode(message.activeLure, writer.uint32(18).fork()).ldelim();
        }
        if (message.closestLure !== undefined) {
            Geocircle.encode(message.closestLure, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLures();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.locations.push(Geocircle.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.activeLure = Geocircle.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.closestLure = Geocircle.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLures();
        message.locations = ((_a = object.locations) === null || _a === void 0 ? void 0 : _a.map((e) => Geocircle.fromPartial(e))) || [];
        message.activeLure =
            object.activeLure !== undefined && object.activeLure !== null
                ? Geocircle.fromPartial(object.activeLure)
                : undefined;
        message.closestLure =
            object.closestLure !== undefined && object.closestLure !== null
                ? Geocircle.fromPartial(object.closestLure)
                : undefined;
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=lures.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/user_data.js
/* eslint-disable */



const user_data_protobufPackage = "snapchat.lenses";
var UserData_Zodiac;
(function (UserData_Zodiac) {
    UserData_Zodiac["Invalid"] = "Invalid";
    UserData_Zodiac["Aquarius"] = "Aquarius";
    UserData_Zodiac["Aries"] = "Aries";
    UserData_Zodiac["Cancer"] = "Cancer";
    UserData_Zodiac["Capricorn"] = "Capricorn";
    UserData_Zodiac["Gemini"] = "Gemini";
    UserData_Zodiac["Leo"] = "Leo";
    UserData_Zodiac["Libra"] = "Libra";
    UserData_Zodiac["Pisces"] = "Pisces";
    UserData_Zodiac["Sagittarius"] = "Sagittarius";
    UserData_Zodiac["Scorpio"] = "Scorpio";
    UserData_Zodiac["Taurus"] = "Taurus";
    UserData_Zodiac["Virgo"] = "Virgo";
    UserData_Zodiac["UNRECOGNIZED"] = "UNRECOGNIZED";
})(UserData_Zodiac || (UserData_Zodiac = {}));
function userData_ZodiacFromJSON(object) {
    switch (object) {
        case 0:
        case "Invalid":
            return UserData_Zodiac.Invalid;
        case 1:
        case "Aquarius":
            return UserData_Zodiac.Aquarius;
        case 2:
        case "Aries":
            return UserData_Zodiac.Aries;
        case 3:
        case "Cancer":
            return UserData_Zodiac.Cancer;
        case 4:
        case "Capricorn":
            return UserData_Zodiac.Capricorn;
        case 5:
        case "Gemini":
            return UserData_Zodiac.Gemini;
        case 6:
        case "Leo":
            return UserData_Zodiac.Leo;
        case 7:
        case "Libra":
            return UserData_Zodiac.Libra;
        case 8:
        case "Pisces":
            return UserData_Zodiac.Pisces;
        case 9:
        case "Sagittarius":
            return UserData_Zodiac.Sagittarius;
        case 10:
        case "Scorpio":
            return UserData_Zodiac.Scorpio;
        case 11:
        case "Taurus":
            return UserData_Zodiac.Taurus;
        case 12:
        case "Virgo":
            return UserData_Zodiac.Virgo;
        case -1:
        case "UNRECOGNIZED":
        default:
            return UserData_Zodiac.UNRECOGNIZED;
    }
}
function userData_ZodiacToNumber(object) {
    switch (object) {
        case UserData_Zodiac.Invalid:
            return 0;
        case UserData_Zodiac.Aquarius:
            return 1;
        case UserData_Zodiac.Aries:
            return 2;
        case UserData_Zodiac.Cancer:
            return 3;
        case UserData_Zodiac.Capricorn:
            return 4;
        case UserData_Zodiac.Gemini:
            return 5;
        case UserData_Zodiac.Leo:
            return 6;
        case UserData_Zodiac.Libra:
            return 7;
        case UserData_Zodiac.Pisces:
            return 8;
        case UserData_Zodiac.Sagittarius:
            return 9;
        case UserData_Zodiac.Scorpio:
            return 10;
        case UserData_Zodiac.Taurus:
            return 11;
        case UserData_Zodiac.Virgo:
            return 12;
        default:
            return 0;
    }
}
function createBaseBitmojiUserInfo() {
    return { avatarId: "", selfieId: "" };
}
const BitmojiUserInfo = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.avatarId !== "") {
            writer.uint32(10).string(message.avatarId);
        }
        if (message.selfieId !== "") {
            writer.uint32(18).string(message.selfieId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBitmojiUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.avatarId = reader.string();
                    break;
                case 2:
                    message.selfieId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBitmojiUserInfo();
        message.avatarId = (_a = object.avatarId) !== null && _a !== void 0 ? _a : "";
        message.selfieId = (_b = object.selfieId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseFriendUserInfo() {
    return { friendshipStart: undefined, lastInteraction: undefined, streak: 0 };
}
const FriendUserInfo = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.friendshipStart !== undefined) {
            Timestamp.encode(user_data_toTimestamp(message.friendshipStart), writer.uint32(10).fork()).ldelim();
        }
        if (message.lastInteraction !== undefined) {
            Timestamp.encode(user_data_toTimestamp(message.lastInteraction), writer.uint32(18).fork()).ldelim();
        }
        if (message.streak !== 0) {
            writer.uint32(24).uint32(message.streak);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFriendUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.friendshipStart = user_data_fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.lastInteraction = user_data_fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.streak = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseFriendUserInfo();
        message.friendshipStart = (_a = object.friendshipStart) !== null && _a !== void 0 ? _a : undefined;
        message.lastInteraction = (_b = object.lastInteraction) !== null && _b !== void 0 ? _b : undefined;
        message.streak = (_c = object.streak) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseUserData() {
    return {
        userId: "",
        username: "",
        birthdate: "",
        displayName: "",
        countrycode: "",
        score: 0,
        bitmojiInfo: undefined,
        friendInfo: undefined,
        zodiac: UserData_Zodiac.Invalid,
    };
}
const UserData = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.birthdate !== "") {
            writer.uint32(26).string(message.birthdate);
        }
        if (message.displayName !== "") {
            writer.uint32(34).string(message.displayName);
        }
        if (message.countrycode !== "") {
            writer.uint32(42).string(message.countrycode);
        }
        if (message.score !== 0) {
            writer.uint32(56).uint64(message.score);
        }
        if (message.bitmojiInfo !== undefined) {
            BitmojiUserInfo.encode(message.bitmojiInfo, writer.uint32(66).fork()).ldelim();
        }
        if (message.friendInfo !== undefined) {
            FriendUserInfo.encode(message.friendInfo, writer.uint32(74).fork()).ldelim();
        }
        if (message.zodiac !== UserData_Zodiac.Invalid) {
            writer.uint32(80).int32(userData_ZodiacToNumber(message.zodiac));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.username = reader.string();
                    break;
                case 3:
                    message.birthdate = reader.string();
                    break;
                case 4:
                    message.displayName = reader.string();
                    break;
                case 5:
                    message.countrycode = reader.string();
                    break;
                case 7:
                    message.score = user_data_longToNumber(reader.uint64());
                    break;
                case 8:
                    message.bitmojiInfo = BitmojiUserInfo.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.friendInfo = FriendUserInfo.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.zodiac = userData_ZodiacFromJSON(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseUserData();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.username = (_b = object.username) !== null && _b !== void 0 ? _b : "";
        message.birthdate = (_c = object.birthdate) !== null && _c !== void 0 ? _c : "";
        message.displayName = (_d = object.displayName) !== null && _d !== void 0 ? _d : "";
        message.countrycode = (_e = object.countrycode) !== null && _e !== void 0 ? _e : "";
        message.score = (_f = object.score) !== null && _f !== void 0 ? _f : 0;
        message.bitmojiInfo =
            object.bitmojiInfo !== undefined && object.bitmojiInfo !== null
                ? BitmojiUserInfo.fromPartial(object.bitmojiInfo)
                : undefined;
        message.friendInfo =
            object.friendInfo !== undefined && object.friendInfo !== null
                ? FriendUserInfo.fromPartial(object.friendInfo)
                : undefined;
        message.zodiac = (_g = object.zodiac) !== null && _g !== void 0 ? _g : UserData_Zodiac.Invalid;
        return message;
    },
};
function createBaseUserDataList() {
    return { userData: [] };
}
const UserDataList = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.userData) {
            UserData.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserDataList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userData.push(UserData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUserDataList();
        message.userData = ((_a = object.userData) === null || _a === void 0 ? void 0 : _a.map((e) => UserData.fromPartial(e))) || [];
        return message;
    },
};
var user_data_globalThis = (() => {
    if (typeof user_data_globalThis !== "undefined")
        return user_data_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function user_data_toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function user_data_fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function user_data_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new user_data_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=user_data.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/persistent_store.js
/* eslint-disable */


const persistent_store_protobufPackage = "snapchat.lenses";
function createBasePersistentStore() {
    return { store: new Uint8Array() };
}
const PersistentStore = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.store.length !== 0) {
            writer.uint32(10).bytes(message.store);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePersistentStore();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.store = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePersistentStore();
        message.store = (_a = object.store) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=persistent_store.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/launch_params.js
/* eslint-disable */


const launch_params_protobufPackage = "snapchat.lenses";
function createBaseLaunchParams() {
    return { data: new Uint8Array() };
}
const LaunchParams = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLaunchParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLaunchParams();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=launch_params.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/launchdata.js
/* eslint-disable */







const launchdata_protobufPackage = "snapchat.lenses";
var LaunchData_EntryPoint;
(function (LaunchData_EntryPoint) {
    LaunchData_EntryPoint["LIVE_CAMERA"] = "LIVE_CAMERA";
    LaunchData_EntryPoint["STORY_REPLY"] = "STORY_REPLY";
    LaunchData_EntryPoint["CHAT_REPLY"] = "CHAT_REPLY";
    LaunchData_EntryPoint["RESTART"] = "RESTART";
    LaunchData_EntryPoint["PREVIEW_CANCEL"] = "PREVIEW_CANCEL";
    LaunchData_EntryPoint["MAP"] = "MAP";
    LaunchData_EntryPoint["BITMOJI_STICKERS"] = "BITMOJI_STICKERS";
    LaunchData_EntryPoint["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LaunchData_EntryPoint || (LaunchData_EntryPoint = {}));
function launchData_EntryPointFromJSON(object) {
    switch (object) {
        case 0:
        case "LIVE_CAMERA":
            return LaunchData_EntryPoint.LIVE_CAMERA;
        case 1:
        case "STORY_REPLY":
            return LaunchData_EntryPoint.STORY_REPLY;
        case 2:
        case "CHAT_REPLY":
            return LaunchData_EntryPoint.CHAT_REPLY;
        case 3:
        case "RESTART":
            return LaunchData_EntryPoint.RESTART;
        case 4:
        case "PREVIEW_CANCEL":
            return LaunchData_EntryPoint.PREVIEW_CANCEL;
        case 5:
        case "MAP":
            return LaunchData_EntryPoint.MAP;
        case 6:
        case "BITMOJI_STICKERS":
            return LaunchData_EntryPoint.BITMOJI_STICKERS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LaunchData_EntryPoint.UNRECOGNIZED;
    }
}
function launchData_EntryPointToNumber(object) {
    switch (object) {
        case LaunchData_EntryPoint.LIVE_CAMERA:
            return 0;
        case LaunchData_EntryPoint.STORY_REPLY:
            return 1;
        case LaunchData_EntryPoint.CHAT_REPLY:
            return 2;
        case LaunchData_EntryPoint.RESTART:
            return 3;
        case LaunchData_EntryPoint.PREVIEW_CANCEL:
            return 4;
        case LaunchData_EntryPoint.MAP:
            return 5;
        case LaunchData_EntryPoint.BITMOJI_STICKERS:
            return 6;
        default:
            return 0;
    }
}
var LaunchData_ApiDescriptor;
(function (LaunchData_ApiDescriptor) {
    /** NONE - Extend as appropriate */
    LaunchData_ApiDescriptor["NONE"] = "NONE";
    /** EXPERIMENTAL - https://snapchat.quip.com/Z6pNAfq26OKk */
    LaunchData_ApiDescriptor["EXPERIMENTAL"] = "EXPERIMENTAL";
    LaunchData_ApiDescriptor["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LaunchData_ApiDescriptor || (LaunchData_ApiDescriptor = {}));
function launchData_ApiDescriptorFromJSON(object) {
    switch (object) {
        case 0:
        case "NONE":
            return LaunchData_ApiDescriptor.NONE;
        case 1:
        case "EXPERIMENTAL":
            return LaunchData_ApiDescriptor.EXPERIMENTAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LaunchData_ApiDescriptor.UNRECOGNIZED;
    }
}
function launchData_ApiDescriptorToNumber(object) {
    switch (object) {
        case LaunchData_ApiDescriptor.NONE:
            return 0;
        case LaunchData_ApiDescriptor.EXPERIMENTAL:
            return 1;
        default:
            return 0;
    }
}
function createBaseLaunchData() {
    return {
        snappable: undefined,
        lures: undefined,
        userId: "",
        entryPoint: LaunchData_EntryPoint.LIVE_CAMERA,
        userData: undefined,
        persistentStore: undefined,
        launchParams: undefined,
        apiDescriptors: [],
    };
}
const LaunchData = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.snappable !== undefined) {
            Snappable.encode(message.snappable, writer.uint32(10).fork()).ldelim();
        }
        if (message.lures !== undefined) {
            Lures.encode(message.lures, writer.uint32(18).fork()).ldelim();
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        if (message.entryPoint !== LaunchData_EntryPoint.LIVE_CAMERA) {
            writer.uint32(32).int32(launchData_EntryPointToNumber(message.entryPoint));
        }
        if (message.userData !== undefined) {
            UserData.encode(message.userData, writer.uint32(42).fork()).ldelim();
        }
        if (message.persistentStore !== undefined) {
            PersistentStore.encode(message.persistentStore, writer.uint32(50).fork()).ldelim();
        }
        if (message.launchParams !== undefined) {
            LaunchParams.encode(message.launchParams, writer.uint32(58).fork()).ldelim();
        }
        writer.uint32(66).fork();
        for (const v of message.apiDescriptors) {
            writer.int32(launchData_ApiDescriptorToNumber(v));
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLaunchData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.snappable = Snappable.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.lures = Lures.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.userId = reader.string();
                    break;
                case 4:
                    message.entryPoint = launchData_EntryPointFromJSON(reader.int32());
                    break;
                case 5:
                    message.userData = UserData.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.persistentStore = PersistentStore.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.launchParams = LaunchParams.decode(reader, reader.uint32());
                    break;
                case 8:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.apiDescriptors.push(launchData_ApiDescriptorFromJSON(reader.int32()));
                        }
                    }
                    else {
                        message.apiDescriptors.push(launchData_ApiDescriptorFromJSON(reader.int32()));
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseLaunchData();
        message.snappable =
            object.snappable !== undefined && object.snappable !== null ? Snappable.fromPartial(object.snappable) : undefined;
        message.lures = object.lures !== undefined && object.lures !== null ? Lures.fromPartial(object.lures) : undefined;
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.entryPoint = (_b = object.entryPoint) !== null && _b !== void 0 ? _b : LaunchData_EntryPoint.LIVE_CAMERA;
        message.userData =
            object.userData !== undefined && object.userData !== null ? UserData.fromPartial(object.userData) : undefined;
        message.persistentStore =
            object.persistentStore !== undefined && object.persistentStore !== null
                ? PersistentStore.fromPartial(object.persistentStore)
                : undefined;
        message.launchParams =
            object.launchParams !== undefined && object.launchParams !== null
                ? LaunchParams.fromPartial(object.launchParams)
                : undefined;
        message.apiDescriptors = ((_c = object.apiDescriptors) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=launchdata.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/LensLaunchParams.js


const isNotValid = (value) => !(isString(value) || isValidNumber(value));
const isValidNumber = (value) => isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);
/**
 * @internal
 */
function isLaunchParamsValid(launchParams) {
    if (!isRecord(launchParams) || launchParams instanceof Date) {
        throw new Error("should be a record <string, number | string | string[] | number[]>");
    }
    for (const value of Object.values(launchParams)) {
        if (Array.isArray(value)) {
            if (!value.every(isString) && !value.every(isValidNumber)) {
                throw new Error("only number, string, string[], number[] values are allowed");
            }
        }
        else if (isNotValid(value)) {
            throw new Error("only number, string, string[], number[] values are allowed");
        }
    }
    return true;
}
/**
 * @param launchDetails
 * @internal
 */
const createLaunchData = ({ launchParams, persistentStore }) => 
// finish() protobufjs method returns UInt8Array with shared ArrayBuffer
// to avoid of detached buffer error when passing data to Lens Core
// data should be copied using slice() method
LaunchData.encode(LaunchData.fromPartial(Object.assign(Object.assign({}, (launchParams &&
    isLaunchParamsValid(launchParams) && {
    launchParams: { data: new TextEncoder().encode(JSON.stringify(launchParams)) },
})), (persistentStore && { persistentStore: { store: new Uint8Array(persistentStore) } }))))
    .finish()
    .slice();
//# sourceMappingURL=LensLaunchParams.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/legal_prompt.js
/* eslint-disable */



const legal_prompt_protobufPackage = "com.snap.camerakit.v3";
/** All known types of legal documents that may be provided to a user. */
var LegalDocument_Type;
(function (LegalDocument_Type) {
    /** UNSET - Default unset field. */
    LegalDocument_Type["UNSET"] = "UNSET";
    /** TERMS_OF_SERVICE - Represents terms of service type of a document. */
    LegalDocument_Type["TERMS_OF_SERVICE"] = "TERMS_OF_SERVICE";
    /** PRIVACY_POLICY - Represents privacy policy type of a document. */
    LegalDocument_Type["PRIVACY_POLICY"] = "PRIVACY_POLICY";
    /** LEARN_MORE - Represents additional legal information type of a document. */
    LegalDocument_Type["LEARN_MORE"] = "LEARN_MORE";
    LegalDocument_Type["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LegalDocument_Type || (LegalDocument_Type = {}));
function legalDocument_TypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return LegalDocument_Type.UNSET;
        case 1:
        case "TERMS_OF_SERVICE":
            return LegalDocument_Type.TERMS_OF_SERVICE;
        case 2:
        case "PRIVACY_POLICY":
            return LegalDocument_Type.PRIVACY_POLICY;
        case 3:
        case "LEARN_MORE":
            return LegalDocument_Type.LEARN_MORE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LegalDocument_Type.UNRECOGNIZED;
    }
}
function legalDocument_TypeToNumber(object) {
    switch (object) {
        case LegalDocument_Type.UNSET:
            return 0;
        case LegalDocument_Type.TERMS_OF_SERVICE:
            return 1;
        case LegalDocument_Type.PRIVACY_POLICY:
            return 2;
        case LegalDocument_Type.LEARN_MORE:
            return 3;
        default:
            return 0;
    }
}
function createBaseLegalPrompt() {
    return { documents: [], disabled: false };
}
const LegalPrompt = {
    encode(message, writer = minimal_default().Writer.create()) {
        for (const v of message.documents) {
            LegalDocument.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.disabled === true) {
            writer.uint32(16).bool(message.disabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLegalPrompt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.documents.push(LegalDocument.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.disabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseLegalPrompt();
        message.documents = ((_a = object.documents) === null || _a === void 0 ? void 0 : _a.map((e) => LegalDocument.fromPartial(e))) || [];
        message.disabled = (_b = object.disabled) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseLegalDocument() {
    return { type: LegalDocument_Type.UNSET, webUrl: "", version: "", timestamp: undefined };
}
const LegalDocument = {
    encode(message, writer = minimal_default().Writer.create()) {
        if (message.type !== LegalDocument_Type.UNSET) {
            writer.uint32(8).int32(legalDocument_TypeToNumber(message.type));
        }
        if (message.webUrl !== "") {
            writer.uint32(18).string(message.webUrl);
        }
        if (message.version !== "") {
            writer.uint32(26).string(message.version);
        }
        if (message.timestamp !== undefined) {
            Timestamp.encode(legal_prompt_toTimestamp(message.timestamp), writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLegalDocument();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = legalDocument_TypeFromJSON(reader.int32());
                    break;
                case 2:
                    message.webUrl = reader.string();
                    break;
                case 3:
                    message.version = reader.string();
                    break;
                case 4:
                    message.timestamp = legal_prompt_fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseLegalDocument();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : LegalDocument_Type.UNSET;
        message.webUrl = (_b = object.webUrl) !== null && _b !== void 0 ? _b : "";
        message.version = (_c = object.version) !== null && _c !== void 0 ? _c : "";
        message.timestamp = (_d = object.timestamp) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
// @ts-ignore
function legal_prompt_toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function legal_prompt_fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
//# sourceMappingURL=legal_prompt.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js


var isArray = Array.isArray;
function callOrApply(fn, args) {
    return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
}
function mapOneOrManyArgs_mapOneOrManyArgs(fn) {
    return map(function (args) { return callOrApply(fn, args); });
}
//# sourceMappingURL=mapOneOrManyArgs.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js







var nodeEventEmitterMethods = ['addListener', 'removeListener'];
var eventTargetMethods = ['addEventListener', 'removeEventListener'];
var jqueryMethods = ['on', 'off'];
function fromEvent(target, eventName, options, resultSelector) {
    if (isFunction_isFunction(options)) {
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs_mapOneOrManyArgs(resultSelector));
    }
    var _a = __read(isEventTarget(target)
        ? eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })
        :
            isNodeStyleEventEmitter(target)
                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))
                : isJQueryStyleEventEmitter(target)
                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))
                    : [], 2), add = _a[0], remove = _a[1];
    if (!add) {
        if (isArrayLike(target)) {
            return mergeMap(function (subTarget) { return fromEvent(subTarget, eventName, options); })(innerFrom_innerFrom(target));
        }
    }
    if (!add) {
        throw new TypeError('Invalid event target');
    }
    return new Observable_Observable(function (subscriber) {
        var handler = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return subscriber.next(1 < args.length ? args : args[0]);
        };
        add(handler);
        return function () { return remove(handler); };
    });
}
function toCommonHandlerRegistry(target, eventName) {
    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };
}
function isNodeStyleEventEmitter(target) {
    return isFunction_isFunction(target.addListener) && isFunction_isFunction(target.removeListener);
}
function isJQueryStyleEventEmitter(target) {
    return isFunction_isFunction(target.on) && isFunction_isFunction(target.off);
}
function isEventTarget(target) {
    return isFunction_isFunction(target.addEventListener) && isFunction_isFunction(target.removeEventListener);
}
//# sourceMappingURL=fromEvent.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
var argsOrArgArray_isArray = Array.isArray;
function argsOrArgArray_argsOrArgArray(args) {
    return args.length === 1 && argsOrArgArray_isArray(args[0]) ? args[0] : args;
}
//# sourceMappingURL=argsOrArgArray.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/merge.js






function merge_merge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = args_popScheduler(args);
    var concurrent = popNumber(args, Infinity);
    args = argsOrArgArray_argsOrArgArray(args);
    return operate(function (source, subscriber) {
        mergeAll(concurrent)(from_from(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
    });
}
//# sourceMappingURL=merge.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js


function mergeWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return merge_merge.apply(void 0, __spreadArray([], __read(otherSources)));
}
//# sourceMappingURL=mergeWith.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/common/localization.js
var _a;

function makeTemplate(keys) {
    return (template) => (values) => {
        const tag = (readonlyStrings) => {
            const strings = readonlyStrings.slice();
            return [strings.shift()]
                .concat(keys.map((key) => { var _a; return `${(_a = values[key]) !== null && _a !== void 0 ? _a : ""}${strings.shift()}`; }))
                .concat(strings)
                .join("");
        };
        return template(tag);
    };
}
/**
 * Any strings which are templated (i.e. require runtime values) are defined below.
 */
const legalPromptMessage = makeTemplate(["privacyPolicyUrl", "termsOfServiceUrl", "learnMoreUrl"]);
/**
 * Strings for each language are defined blow.
 */
// en_US is used both to:
//  A) define the set of strings which can be localized and
//  B) provide a default set of strings in case a specific localization cannot be found.
const en_US = {
    legalPromptMessage: legalPromptMessage((tag) => tag `By using Lenses, you acknowledge reading Snap's <a href="${0}" target="_blank">
            Privacy Policy</a> and agree to Snap's <a href="${0}" target="_blank">Terms of Service</a>.
            Some Lenses use information about your face, hands, and voice to work. <a href="${0}"
            target="_blank">Learn More</a>, and if you want to agree and continue, click or tap below.`),
    legalPromptAccept: "I Agree",
    legalPromptReject: "Dismiss",
};
/**
 * --- end of string definitions ---
 */
const allStrings = {
    en_US,
};
const localizedStrings = (_a = allStrings[cameraKitUserAgent.locale]) !== null && _a !== void 0 ? _a : en_US;
function localizedString(stringId) {
    return localizedStrings[stringId];
}
//# sourceMappingURL=localization.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/legal/legalPrompt.js



function createCameraKitLegalPrompt(privacyPolicyUrl, termsOfServiceUrl, learnMoreUrl) {
    const element = document.createElement("div");
    element.id = "tos-popup";
    const shadow = element.attachShadow({ mode: "open" });
    const prompt = document.createElement("div");
    prompt.id = "content";
    /* eslint-disable max-len */
    prompt.innerHTML = `
        <button id="reject">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
            <title>${localizedString("legalPromptReject")}</title>
            <path
                d="M 14.356 12.5 L 17.803 15.947 C 18.316 16.46 18.316 17.291 17.803 17.803 C 17.291 18.316 16.46 18.316 15.947 17.803 L 12.5 14.356 L 9.053 17.803 C 8.54 18.316 7.709 18.316 7.197 17.803 C 6.684 17.291 6.684 16.46 7.197 15.947 L 10.644 12.5 L 7.197 9.053 C 6.684 8.54 6.684 7.709 7.197 7.197 C 7.709 6.684 8.54 6.684 9.053 7.197 L 12.5 10.644 L 15.947 7.197 C 16.46 6.684 17.291 6.684 17.803 7.197 C 18.316 7.709 18.316 8.54 17.803 9.053 Z"
                fill="#a0a0a0"
            />
        </svg>
        </button>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
            <g>
                <path
                    d="M 30.898 23.477 C 30.77 23.045 30.148 22.743 30.148 22.743 C 30.092 22.71 30.039 22.684 29.994 22.663 C 28.962 22.161 28.048 21.561 27.277 20.876 C 26.659 20.325 26.128 19.719 25.701 19.074 C 25.182 18.288 24.937 17.632 24.831 17.275 C 24.773 17.043 24.782 16.951 24.831 16.832 C 24.873 16.731 24.99 16.632 25.049 16.588 C 25.397 16.341 25.96 15.976 26.303 15.75 C 26.602 15.556 26.859 15.389 27.009 15.283 C 27.494 14.944 27.824 14.596 28.02 14.223 C 28.275 13.74 28.303 13.208 28.107 12.684 C 27.84 11.978 27.184 11.556 26.35 11.556 C 26.163 11.556 25.974 11.577 25.785 11.62 C 25.308 11.723 24.852 11.894 24.474 12.042 C 24.446 12.054 24.416 12.032 24.418 12.002 C 24.457 11.059 24.502 9.79 24.399 8.584 C 24.306 7.493 24.082 6.576 23.717 5.776 C 23.351 4.972 22.874 4.376 22.5 3.947 C 22.143 3.536 21.519 2.936 20.577 2.394 C 19.251 1.631 17.742 1.244 16.09 1.244 C 14.443 1.244 12.934 1.631 11.605 2.394 C 10.607 2.966 9.97 3.614 9.678 3.947 C 9.304 4.376 8.827 4.972 8.46 5.776 C 8.096 6.576 7.872 7.496 7.778 8.584 C 7.673 9.792 7.715 10.96 7.76 11.999 C 7.762 12.03 7.732 12.051 7.704 12.039 C 7.325 11.892 6.87 11.72 6.393 11.617 C 6.204 11.575 6.012 11.554 5.828 11.554 C 4.994 11.554 4.337 11.976 4.071 12.682 C 3.875 13.205 3.903 13.738 4.157 14.221 C 4.354 14.594 4.685 14.941 5.169 15.281 C 5.318 15.387 5.575 15.553 5.874 15.748 C 6.211 15.968 6.758 16.323 7.108 16.569 C 7.152 16.599 7.299 16.712 7.346 16.827 C 7.397 16.951 7.404 17.045 7.341 17.289 C 7.234 17.648 6.989 18.298 6.479 19.069 C 6.052 19.715 5.522 20.32 4.902 20.871 C 4.132 21.556 3.218 22.157 2.186 22.658 C 2.137 22.682 2.078 22.712 2.015 22.748 C 2.015 22.748 1.399 23.064 1.282 23.472 C 1.109 24.075 1.567 24.64 2.036 24.943 C 2.8 25.438 3.732 25.703 4.272 25.849 C 4.421 25.889 4.559 25.926 4.683 25.964 C 4.76 25.989 4.956 26.062 5.038 26.17 C 5.143 26.306 5.155 26.473 5.192 26.66 C 5.253 26.977 5.384 27.373 5.774 27.643 C 6.204 27.941 6.75 27.962 7.444 27.99 C 8.168 28.018 9.07 28.054 10.1 28.394 C 10.579 28.553 11.011 28.818 11.514 29.128 C 12.56 29.773 13.864 30.578 16.09 30.578 C 18.318 30.578 19.629 29.768 20.685 29.119 C 21.183 28.811 21.612 28.546 22.08 28.391 C 23.11 28.049 24.011 28.014 24.735 27.988 C 25.427 27.962 25.974 27.941 26.404 27.641 C 26.822 27.35 26.943 26.918 26.997 26.59 C 27.027 26.428 27.046 26.285 27.14 26.165 C 27.219 26.064 27.399 25.992 27.483 25.964 C 27.609 25.924 27.751 25.886 27.906 25.844 C 28.445 25.698 29.123 25.527 29.945 25.061 C 30.933 24.511 31.001 23.82 30.898 23.477"
                    fill="#ffffff"
                    stroke="#00000000"
                    stroke-width="1"
                />
            </g>
            <g>
                <path
                    d="M 29.56 24.299 C 28.21 25.045 27.312 24.965 26.613 25.414 C 26.021 25.795 26.37 26.618 25.939 26.915 C 25.411 27.279 23.843 26.889 21.822 27.555 C 20.155 28.107 19.09 29.689 16.089 29.689 C 13.081 29.689 12.047 28.114 10.357 27.555 C 8.335 26.889 6.768 27.279 6.24 26.915 C 5.809 26.618 6.16 25.795 5.566 25.414 C 4.869 24.965 3.969 25.045 2.619 24.299 C 1.758 23.825 2.247 23.53 2.532 23.393 C 7.426 21.027 8.204 17.372 8.24 17.096 C 8.282 16.769 8.328 16.509 7.966 16.175 C 7.615 15.853 6.066 14.895 5.636 14.593 C 4.925 14.098 4.612 13.6 4.841 12.99 C 5 12.569 5.395 12.41 5.812 12.41 C 5.94 12.41 6.071 12.426 6.2 12.452 C 6.981 12.623 7.741 13.013 8.179 13.118 C 8.24 13.132 8.293 13.139 8.34 13.139 C 8.574 13.139 8.656 13.022 8.639 12.754 C 8.59 11.9 8.469 10.234 8.602 8.677 C 8.787 6.536 9.477 5.476 10.298 4.538 C 10.693 4.087 12.543 2.133 16.082 2.133 C 19.633 2.133 21.474 4.087 21.867 4.538 C 22.688 5.478 23.378 6.536 23.563 8.677 C 23.698 10.234 23.581 11.898 23.525 12.754 C 23.506 13.034 23.591 13.139 23.825 13.139 C 23.872 13.139 23.925 13.132 23.986 13.118 C 24.426 13.013 25.184 12.62 25.965 12.452 C 26.091 12.424 26.222 12.41 26.353 12.41 C 26.77 12.41 27.165 12.569 27.324 12.99 C 27.555 13.6 27.242 14.095 26.529 14.593 C 26.098 14.892 24.547 15.85 24.199 16.175 C 23.836 16.509 23.883 16.767 23.925 17.096 C 23.96 17.372 24.739 21.025 29.633 23.393 C 29.932 23.53 30.421 23.825 29.56 24.299 M 31.709 23.12 C 31.489 22.523 31.07 22.203 30.594 21.939 C 30.505 21.887 30.423 21.845 30.355 21.812 C 30.212 21.74 30.067 21.667 29.922 21.592 C 28.435 20.806 27.275 19.812 26.469 18.635 C 26.198 18.238 26.008 17.88 25.877 17.587 C 25.809 17.391 25.811 17.281 25.86 17.178 C 25.898 17.101 25.996 17.019 26.05 16.979 C 26.305 16.811 26.57 16.64 26.748 16.525 C 27.067 16.319 27.317 16.156 27.481 16.043 C 28.093 15.617 28.519 15.164 28.786 14.658 C 29.163 13.945 29.21 13.131 28.919 12.363 C 28.517 11.301 27.509 10.642 26.291 10.642 C 26.038 10.642 25.783 10.67 25.527 10.726 C 25.46 10.74 25.394 10.756 25.328 10.773 C 25.34 10.05 25.324 9.278 25.258 8.524 C 25.029 5.872 24.099 4.48 23.129 3.371 C 22.724 2.908 22.021 2.232 20.964 1.628 C 19.491 0.781 17.821 0.356 16 0.356 C 14.185 0.356 12.518 0.781 11.044 1.623 C 9.983 2.229 9.278 2.905 8.875 3.366 C 7.905 4.475 6.975 5.867 6.746 8.52 C 6.68 9.273 6.663 10.045 6.675 10.768 C 6.61 10.752 6.544 10.735 6.476 10.721 C 6.221 10.665 5.965 10.637 5.713 10.637 C 4.494 10.637 3.487 11.297 3.084 12.359 C 2.794 13.126 2.841 13.94 3.218 14.654 C 3.485 15.159 3.911 15.613 4.522 16.039 C 4.686 16.153 4.937 16.314 5.256 16.52 C 5.427 16.633 5.68 16.794 5.926 16.958 C 5.963 16.984 6.097 17.082 6.141 17.173 C 6.193 17.279 6.195 17.393 6.118 17.604 C 5.987 17.891 5.801 18.242 5.535 18.631 C 4.747 19.782 3.62 20.757 2.18 21.536 C 1.419 21.941 0.54 22.355 0.29 23.118 C 0.039 23.88 0.203 24.582 0.842 25.239 C 1.053 25.466 1.318 25.665 1.653 25.85 C 2.438 26.283 3.105 26.496 3.63 26.641 C 3.721 26.669 3.937 26.736 4.031 26.819 C 4.265 27.022 4.23 27.331 4.543 27.78 C 4.731 28.061 4.949 28.25 5.129 28.374 C 5.783 28.826 6.516 28.854 7.294 28.881 C 7.997 28.908 8.793 28.94 9.702 29.24 C 10.079 29.364 10.47 29.605 10.922 29.883 C 12.011 30.552 13.501 31.467 15.998 31.467 C 18.493 31.467 19.995 30.547 21.091 29.876 C 21.541 29.6 21.93 29.361 22.297 29.242 C 23.206 28.942 24.003 28.912 24.706 28.884 C 25.483 28.854 26.216 28.826 26.87 28.377 C 27.076 28.234 27.331 28.004 27.535 27.651 C 27.76 27.272 27.753 27.003 27.964 26.821 C 28.05 26.746 28.238 26.68 28.338 26.65 C 28.868 26.505 29.545 26.292 30.344 25.852 C 30.697 25.658 30.976 25.443 31.192 25.2 C 31.194 25.197 31.196 25.192 31.199 25.19 C 31.805 24.544 31.955 23.787 31.709 23.12"
                    fill="#000000"
                    stroke="#00000000"
                    stroke-width="1"
                />
            </g>
        </svg>
        <p>${localizedString("legalPromptMessage")({ privacyPolicyUrl, termsOfServiceUrl, learnMoreUrl })}</p>
        <button id="accept">${localizedString("legalPromptAccept")}</button>
    `;
    /* eslint-enable */
    const style = document.createElement("style");
    style.innerHTML = `
        div#content {
            display: flex;
            flex-direction: column;

            position: fixed;
            top: 25%;
            left: 50%;
            transform: translate(-50%, -25%);

            background-color: #fff;
            border: #efefef 1px solid;
            border-radius: 1.5rem;
            box-shadow: rgba(0, 0, 0, 0.25) 0 1.5rem 2rem;

            min-width: 16rem;
            max-width: 20rem;
            padding: 2rem;

            text-align: center;
            font-family: sans-serif;
        }

        div > svg {
            height: 3rem;
        }

        div > p {
            margin: 1rem 0;
        }

        div > p > a {
            color: rgb(78, 171, 248);
        }

        div > button {
            cursor: pointer;
        }

        div > button#reject {
            align-self: flex-end;

            position: absolute;

            background-color: transparent;
            border: 0;

            width: 3rem;
            margin: -1.5rem;
        }

        div > button#accept {
            align-self: center;

            background-color: rgb(78, 171, 248);
            border: 0;
            border-radius: 1.5rem;

            width: 80%;
            padding: 1rem;
            margin-top: 1rem;

            color: #fff;
            font-size: 1.5rem;
            font-weight: 700;
            font-family: inherit;
        }

        div#overlay {
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            left: 0;

            background-color: rgba(0, 0, 0, 0.4);
        }
    `;
    const overlay = document.createElement("div");
    overlay.id = "overlay";
    shadow.appendChild(overlay);
    shadow.appendChild(style);
    shadow.appendChild(prompt);
    const acceptBtn = prompt.querySelector("#accept");
    const rejectBtn = prompt.querySelector("#reject");
    const result = fromEvent(acceptBtn, "click").pipe(map(() => true), mergeWith(fromEvent(rejectBtn, "click").pipe(map(() => false))), take(1));
    result.subscribe({ complete: element.remove.bind(element) });
    return { element, result, focus: () => rejectBtn.focus() };
}
/**
 * @internal
 */
const legalPromptFactory = Injectable("legalPrompt", () => {
    return function legalPrompt(privacyPolicy, termsOfService, learnMore, container = document.body) {
        const prompt = createCameraKitLegalPrompt(privacyPolicy.webUrl, termsOfService.webUrl, learnMore.webUrl);
        container.appendChild(prompt.element);
        prompt.focus();
        return prompt.result;
    };
});
//# sourceMappingURL=legalPrompt.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/legal/legalState.js









const legalState_logger = getLogger("LegalState");
/**
 * We store a hash of the last accepted ToS content. This is how we determine if the user previously accepted the
 * relevant ToS.
 *
 * ToS acceptance is only valid for 12 hours. That is, if legal status is checked and the last acceptance occurred more
 * than 12 hours ago, the user must be prompted to accept again.
 */
const tosContentHashExpiry = 12 * 60 * 60;
const tosContentHashKey = "lastAcceptedTosContentHash";
/**
 * Fast, simple hashing function from github.com/bryc
 * https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js
 */
const computeHash = (str) => {
    let h1 = 0xdeadbeef;
    let h2 = 0x41c6ce57;
    for (let i = 0; i < str.length; i++) {
        const ch = str.charCodeAt(i);
        h1 = Math.imul(h1 ^ ch, 2654435761);
        h2 = Math.imul(h2 ^ ch, 1597334677);
    }
    h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);
    h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);
    return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString(16);
};
const createLegalState = () => {
    const states = defineStates(defineState("unknown")(), defineState("accepted")(), defineState("rejected")());
    const actions = defineActions(defineAction("requestLegalPrompt")(), defineAction("accept")(), defineAction("reject")());
    return new StateMachine(actions, states, states.unknown(), (actions) => {
        return merge(actions.pipe(inStates("unknown"), forActions("accept"), map(() => states.accepted())), actions.pipe(inStates("unknown"), forActions("reject"), map(() => states.rejected())), actions.pipe(forActions("requestLegalPrompt"), map(() => states.unknown())));
    });
};
const defaultLegalDocumentDate = new Date("2021-09-30T00:00:00+00:00");
const defaultLegalPrompt = LegalPrompt.fromPartial({
    documents: [
        LegalDocument.fromPartial({
            type: LegalDocument_Type.PRIVACY_POLICY,
            webUrl: "https://values.snap.com/privacy/privacy-policy",
            version: "1",
            timestamp: defaultLegalDocumentDate,
        }),
        LegalDocument.fromPartial({
            type: LegalDocument_Type.TERMS_OF_SERVICE,
            webUrl: "https://snap.com/terms",
            version: "1",
            timestamp: defaultLegalDocumentDate,
        }),
        LegalDocument.fromPartial({
            type: LegalDocument_Type.LEARN_MORE,
            webUrl: "https://support.snapchat.com/article/camera-information-use",
            version: "1",
            timestamp: defaultLegalDocumentDate,
        }),
    ],
    disabled: false,
});
const hasAnyValue = (c) => {
    var _a, _b;
    return ((_b = (_a = c.value) === null || _a === void 0 ? void 0 : _a.anyValue) === null || _b === void 0 ? void 0 : _b.value) instanceof Uint8Array;
};
const getDocumentOrDefault = (documents) => (type) => {
    var _a;
    return ((_a = documents.find((d) => d.type === type)) !== null && _a !== void 0 ? _a : defaultLegalPrompt.documents.find((d) => d.type === type));
};
/**
 * We maintain the state of the user's acceptance of Snap's various legal documents. Other components may require that
 * the legal state be "accepted" before proceeding (e.g. to apply a lens).
 *
 * On page load, the legal state starts as "unknown." If a request is made to determine the legal state, the following
 * business logic is implemented:
 *
 * 1. Download remote COF config value containing the legal documents + a `disabled` field to optionally skip the legal
 * requirement.
 * 2. Check for a `lastAcceptedTosContentHash` stored in IndexedDB.
 * 3. Prompt the user to accept/reject the legal documents.
 *
 *                     ┌────────────────────────────────────────────────────────┐
 *                     │       COF config value includes "disabled: true"       │
 *                     └────────────────────────────────────────────────────────┘
 *                                                  │
 *                                                  │
 *                           ┌────────No────────────┴────────────Yes──────────────────┐
 *                           │                                                        │
 *                           ▼                                                        │
 *        ┌────────────────────────────────────┐                                      ▼
 *        │"lastAcceptedTosContentHash" exists │                               ┌────────────┐
 *        └────────────────────────────────────┘                               │  Skip ToS  │
 *                           │                                                 └────────────┘
 *                           │                                                        ▲
 *        ┌─────────────No───┴───────Yes────────────┐                                 │
 *        │                                         │                                 │
 *        │                                         │                                 │
 *        ▼                                         ▼                                 │
 * ┌────────────┐              ┌────────────────────────────────────────┐             │
 * │  Show ToS  │              │  Hash of ToS content from COF matches  │             │
 * └────────────┘              │      "lastAcceptedTosContentHash"      │             │
 *        ▲                    └────────────────────────────────────────┘             │
 *        │                                         │                                 │
 *        │                                         │                                 │
 *        └──────────────────No─────────────────────┴───────────────────Yes───────────┘
 *
 * @internal
 */
const legalStateFactory = Injectable("legalState", [remoteConfigurationFactory.token, legalPromptFactory.token], (remoteConfig, legalPrompt) => {
    const persistance = new ExpiringPersistence(() => tosContentHashExpiry, new IndexedDBPersistence({ databaseName: "Legal" }));
    const getLastAcceptedTosContentHash = () => from_from(persistance.retrieve(tosContentHashKey).catch((error) => legalState_logger.warn(error)));
    const setLastAcceptedTosContentHash = (hash) => persistance.store(tosContentHashKey, hash).catch((error) => legalState_logger.warn(error));
    const legalState = createLegalState();
    legalState.events
        .pipe(inStates("unknown", "rejected"), forActions("requestLegalPrompt"), switchMap(() => remoteConfig.get("CAMERA_KIT_LEGAL_PROMPT").pipe(map((configResults) => {
        const config = configResults.find(hasAnyValue);
        if (!config)
            return defaultLegalPrompt;
        return LegalPrompt.decode(config.value.anyValue.value);
    }), catchError((error) => {
        legalState_logger.error(error);
        return of(defaultLegalPrompt);
    }))), switchMap((config) => {
        if (config.disabled)
            return of(legalState.actions.accept("disabled"));
        const currentTosContentHash = computeHash(JSON.stringify(config.documents));
        return getLastAcceptedTosContentHash().pipe(switchMap((lastAcceptedTosContentHash) => {
            if (currentTosContentHash === lastAcceptedTosContentHash)
                return of(true);
            // Delegate prompting the end-user to accept/reject the legal documents. This returns with
            // an Observable<boolean> indicating accept/reject.
            const documentOfType = getDocumentOrDefault(config.documents);
            return legalPrompt(documentOfType(LegalDocument_Type.PRIVACY_POLICY), documentOfType(LegalDocument_Type.TERMS_OF_SERVICE), documentOfType(LegalDocument_Type.LEARN_MORE));
        }), map((didAccept) => {
            if (!didAccept)
                return legalState.actions.reject(currentTosContentHash);
            setLastAcceptedTosContentHash(currentTosContentHash);
            return legalState.actions.accept(currentTosContentHash);
        }));
    }), dispatch(legalState))
        .subscribe();
    return legalState;
});
//# sourceMappingURL=legalState.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/session/lensState.js












const lensState_logger = getLogger("LensState");
const createLensState = () => {
    const actions = defineActions(defineAction("applyLens")(), defineAction("downloadComplete")(), defineAction("turnedOn")(), defineAction("resourcesLoaded")(), defineAction("firstFrameProcessed")(), defineAction("applyLensComplete")(), defineAction("applyLensFailed")(), defineAction("removeLens")(), defineAction("turnedOff")(), defineAction("removeLensComplete")(), defineAction("removeLensFailed")());
    const states = defineStates(defineState("noLensApplied")(), defineState("applyingLens")(), defineState("lensApplied")());
    return new StateMachine(actions, states, states.noLensApplied(), (events) => merge(events.pipe(
    // We allow a new lens to be applied at any time, no matter the state.
    inStates("noLensApplied", "applyingLens", "lensApplied"), forActions("applyLens"), map(([a]) => states.applyingLens(a.data.lens))), events.pipe(inStates("applyingLens"), forActions("applyLensComplete"), map(([a]) => states.lensApplied(a.data))), events.pipe(inStates("applyingLens"), forActions("applyLensFailed"), map(() => states.noLensApplied())), events.pipe(inStates("lensApplied"), forActions("removeLensComplete"), map(() => states.noLensApplied()))));
};
const lensStateFactory = Injectable("lensState", [
    lensCoreFactory.token,
    lensRepositoryFactory.token,
    lensAssetRepositoryFactory.token,
    lensPersistenceStoreFactory.token,
    legalStateFactory.token,
], (lensCore, lensRepository, lensAssetRepository, lensPersistence, legalState) => {
    const lensState = createLensState();
    /**
     * Apply lens
     */
    lensState.events
        .pipe(forActions("applyLens"), 
    // Determine the legal state (e.g. terms have been accepted). Using exhaustMap means while we are
    // ascertaining legal status (which may include prompting the end user to accept terms), we will ignore
    // any new applyLens actions.
    exhaustMap(([a]) => of(legalState.actions.requestLegalPrompt()).pipe(dispatch(legalState), inStates("accepted", "rejected"), take(1), map(([, { name }]) => {
        if (name === "accepted")
            return a;
        return lensState.actions.applyLensFailed({
            error: legalError(`Failed to apply lens ${a.data.lens.id}. Required legal terms were not ` +
                `accepted.`),
            lens: a.data.lens,
        });
    }))), 
    // The use of switchMap is important so that if we get a new applyLens action while we're still
    // downloading lens content for a previously-requested lens, we can cancel those requests and ensure
    // that lenses are applied in the order they're requested.
    switchMap((a) => {
        if (a.name === "applyLensFailed")
            return of(a);
        const { lens } = a.data;
        // Convenience method making dispatching an action with Lens data less verbose.
        const dispatch = (action) => lensState.dispatch(action, lens);
        return of(a.data).pipe(mergeMap(({ lens, launchParams }) => 
        // If retrieval throws an error, we still want to proceed with the lens
        // because persisted data is not a necessity.
        from_from(lensPersistence.retrieve(lens.id).catch(() => undefined)).pipe(map((persistentStore) => ({ lens, launchParams, persistentStore })))), map(({ lens, launchParams, persistentStore }) => {
            const launchData = createLaunchData({
                launchParams,
                persistentStore,
            });
            const lensDetails = lensRepository.getLensMetadata(lens.id);
            if (!lensDetails) {
                throw new Error(`Cannot apply lens ${lens.id}. It has not been loaded by the Lens repository. ` +
                    `Use CameraKit.lenses.repository.loadLens (or loadLensGroups) to load lens ` +
                    `metadata before calling CameraKitSession.applyLens.`);
            }
            const { content } = lensDetails;
            if (!content) {
                throw new Error(`Cannot apply lens ${lens.id}. Metadata retrieved for this lens does not include ` +
                    `the lens content URL.`);
            }
            return { lens, launchData, content };
        }), 
        // Load lens assets and the lens itself in parallel. Both count toward lens download time.
        // TODO: use RxJS fetch utilities so that these requests can be cancelled on unsubscribe.
        mergeMap(({ lens, launchData, content }) => from_from(Promise.all([
            lensRepository.getLensContent(lens),
            lensAssetRepository.cacheAssets(content.assetManifest, lens),
        ])).pipe(tap(() => lensState.dispatch("downloadComplete", lens)), map(([{ lensBuffer, lensChecksum }]) => {
            // NOTE: cached array buffer has to be copied each time in order to be reused,
            // otherwise the original cached copy would be detached by LensCore
            // One optimization can be done here: do not copy the array if getLensContent()
            // returned uncached buffer
            const lensDataBuffer = lensBuffer.slice(0);
            // LensCore chokes trying if launchData is set to undefined; we must omit it.
            return launchData === undefined
                ? { lensId: lens.id, lensDataBuffer, lensChecksum }
                : { lensId: lens.id, lensDataBuffer, lensChecksum, launchData };
        }))), 
        // If removeLens is dispatched while downloading, cancel download, don't apply the lens.
        takeUntil(lensState.events.pipe(forActions("removeLens"))), 
        // Once the lens has downloaded, we can call replaceLenses. We're not concerned about waiting
        // for prior in-progress calls to replaceLenses to complete, because LensCore guarantees that
        // calls to replaceLenses will always be processed sequentially in the order they are received.
        mergeMap((lensInput) => new Observable_Observable((subscriber) => {
            // replaceLenses has the property that if it fails, LensCore guarantees that no
            // lenses are active – so we can safely dispatch applyLensFailed and transition to
            // noLensApplied state.
            lensCore.replaceLenses({
                lenses: [
                    Object.assign(Object.assign({}, lensInput), { onTurnOn: () => dispatch("turnedOn"), onResourcesLoaded: () => dispatch("resourcesLoaded"), onFirstFrameProcessed: () => dispatch("firstFrameProcessed"), onTurnOff: () => dispatch("turnedOff") }),
                ],
                onSuccess: () => {
                    // We emit applyLensComplete (and applyLensFailed, below) on an Observable,
                    // which is piped to `dispatch` – this allows `switchMap` to properly cancel
                    // the dispatch of these actions if a new applyLens arrives while we're
                    // waiting for onSuccess/onFailure.
                    //
                    // That's desirable behavior, because we don't want the applyingLens state
                    // due to a *subsequent applyLens action* to be transitioned to lensApplied
                    // by this action.
                    subscriber.next(lensState.actions.applyLensComplete(lens));
                    subscriber.complete();
                },
                onFailure: (reason) => {
                    const lensCoreError = errorHelpers_ensureError(reason);
                    const message = `Failed to apply lens ${lensInput.lensId}.`;
                    const error = /validation failed/.test(lensCoreError.message)
                        ? lensContentValidationError(message, lensCoreError)
                        : lensError(message, lensCoreError);
                    subscriber.next(lensState.actions.applyLensFailed({ error, lens }));
                    subscriber.complete();
                },
            });
        })), catchError((error) => of(lensState.actions.applyLensFailed({ error, lens }))));
    }), dispatch(lensState))
        .subscribe();
    /**
     * Remove lens
     */
    lensState.events
        .pipe(inStates("lensApplied", "noLensApplied"), forActions("removeLens"), mergeMap(() => new Observable_Observable((subscriber) => {
        lensCore.clearAllLenses({
            onSuccess: () => {
                subscriber.next(lensState.actions.removeLensComplete());
                subscriber.complete();
            },
            onFailure: (lensCoreError) => {
                const error = new Error("Failed to remove lenses.", { cause: lensCoreError });
                subscriber.next(lensState.actions.removeLensFailed(error));
                subscriber.complete();
            },
        });
    })), dispatch(lensState))
        .subscribe();
    lensState.events
        .pipe(inStates("applyingLens"), forActions("removeLens"), switchMap(([a]) => lensState.events.pipe(
    // Wait to remove the lens until it has been applied.
    inStates("lensApplied"), 
    // But cancel the removal if a new applyLens supercedes the current lens. The goal here is to
    // make sure the latest apply/remove pre-empts any previous request to apply/remove.
    takeUntil(lensState.events.pipe(forActions("applyLens"))), map(() => a))), dispatch(lensState))
        .subscribe();
    // Log transitions
    lensState.events.subscribe(([a, s]) => lensState_logger.debug(`Action: "${a.name}", state: "${s.name}"`));
    return lensState;
});
//# sourceMappingURL=lensState.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/session/sessionState.js



const createSessionState = () => {
    const actions = defineActions(defineAction("suspend")(), defineAction("resume")());
    const states = defineStates(defineState("inactive")(), defineState("active")());
    return new StateMachine(actions, states, defineState("inactive")()(), (events) => {
        return merge(events.pipe(forActions("resume"), map(([a]) => states.active(a.data))), events.pipe(forActions("suspend"), map(() => states.inactive())));
    });
};
const sessionStateFactory = Injectable("sessionState", () => createSessionState());
//# sourceMappingURL=sessionState.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/session/LensKeyboard.js





/** @internal */
class LensKeyboard {
    constructor(lensState) {
        this.lensState = lensState;
        this.active = false;
        this.element = document.createElement("textarea");
        this.element.addEventListener("keypress", (event) => {
            if (event.code === "Enter" && !event.shiftKey) {
                event.preventDefault();
                this.handleReply(this.element.value);
            }
        });
        this.events = new TypedEventTarget();
        this.handleReply = () => { };
        this.uriHandler = {
            uri: "app://textInput/requestKeyboard",
            handleRequest: (_request, reply) => {
                this.element.autofocus = true;
                this.handleReply = (text) => {
                    const opt = {
                        text: text,
                        start: text.length,
                        end: text.length,
                        done: true,
                        shouldNotify: true,
                    };
                    const output = new TextEncoder().encode(JSON.stringify(opt));
                    reply({
                        code: 200,
                        description: "",
                        contentType: "application/json",
                        data: output,
                    });
                };
                this.active = true;
                this.updateStatus();
                this.element.focus();
            },
        };
        lensState.events.pipe(forActions("turnedOff")).subscribe(() => {
            this.dismiss();
        });
    }
    dismiss() {
        if (this.active) {
            this.active = false;
            this.element.value = "";
            this.updateStatus();
        }
    }
    getElement() {
        return this.element;
    }
    sendInputToLens(text) {
        this.element.value = text;
        this.handleReply(text);
    }
    addEventListener(type, callback, options) {
        this.events.addEventListener(type, callback, options);
    }
    removeEventListener(type, callback) {
        this.events.removeEventListener(type, callback);
    }
    toPublicInterface() {
        return {
            addEventListener: this.addEventListener.bind(this),
            removeEventListener: this.removeEventListener.bind(this),
            getElement: this.getElement.bind(this),
            sendInputToLens: this.sendInputToLens.bind(this),
            dismiss: this.dismiss.bind(this),
        };
    }
    updateStatus() {
        const state = this.lensState.getState();
        // If lens keyboard status is changing, we know a lens must be applied.
        if (isState(state, "noLensApplied"))
            return;
        this.events.dispatchEvent(new TypedCustomEvent("active", {
            element: this.element,
            active: this.active,
            // If the keyboard is up, it has been triggered by an active lens.
            lens: state.data,
        }));
    }
}
/**
 * @internal
 */
const lensKeyboardFactory = Injectable("lensKeyboard", [lensStateFactory.token], (lensState) => new LensKeyboard(lensState));
//# sourceMappingURL=LensKeyboard.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/session/CameraKitSessionEvents.js
/**
 * A type guard helper to detect unreachable code.
 */
const isReachable = (_) => false;
/**
 * Returns true if given value is of {@link SessionErrors} type and false otherwise.
 */
function isSessionError(value) {
    if (!(value instanceof Error))
        return false;
    const maybeSessionErrorName = value.name;
    switch (maybeSessionErrorName) {
        case "CameraKitSourceError":
        case "LensExecutionError":
        case "LensImagePickerError":
            return true;
        default:
            return isReachable(maybeSessionErrorName);
    }
}
//# sourceMappingURL=CameraKitSessionEvents.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/session/CameraKitSession.js

/* eslint-disable @typescript-eslint/member-ordering */




















const CameraKitSession_logger = getLogger("CameraKitSession");
const CameraKitSession_log = errorLoggingDecorator(CameraKitSession_logger);
function isOptionalRenderTarget(value) {
    return value === "live" || value === "capture" || value === undefined;
}
/**
 * A CameraKitSession represents a single rendering pipeline connecting an input media source to output `<canvas>`
 * elements. When a Lens is applied to the session, CameraKit uses the Lens to transform the input media into rendered
 * output.
 *
 * CameraKitSession is the primary object that applications interact with when integrating the CameraKit SDK.
 *
 * A CameraKitSession instance is obtained by calling {@link CameraKit.createSession}.
 *
 * @example
 * ```ts
 * const cameraKit = await bootstrapCameraKit(config)
 * const session = await cameraKit.createSession()
 * ```
 *
 * @category Rendering
 * @category Lenses
 */
class CameraKitSession {
    /**
     * @internal
     */
    constructor(
    /**
     * Use this to interact with lenses which require text input.
     */
    keyboard, lensCore, sessionState, lensState, logEntries) {
        this.keyboard = keyboard;
        this.lensCore = lensCore;
        this.sessionState = sessionState;
        this.lensState = lensState;
        /**
         * Add event listeners here to handle events which occur during the CameraKitSession.
         *
         * **Note:** Applications may want to handle the `error` event, and check the contained error type -- if the type
         * is {@link LensExecutionError}, this means the current lens was unable to render and CameraKit will automatically
         * remove the lens.
         *
         * @example
         * ```ts
         * cameraKitSession.events.addEventListener('error', ({ detail }) => {
         *   if (detail.error.name === 'LensExecutionError') {
         *     console.log(`Lens ${detail.lens.name} encountered an error and was removed. Please pick a different lens.`)
         *   }
         * })
         * ```
         */
        this.events = new TypedEventTarget();
        const outputs = this.lensCore.getOutputCanvases();
        this.output = {
            live: outputs[this.lensCore.CanvasType.Preview.value],
            capture: outputs[this.lensCore.CanvasType.Capture.value],
        };
        this.playing = false;
        this.metrics = new LensPerformanceMetrics(this.lensCore);
        const removeOnHidden = onPageHidden(() => this.sessionState.dispatch("suspend", this));
        const removeOnVisible = onPageVisible(() => this.sessionState.dispatch("resume", this));
        this.removePageVisibilityHandlers = () => {
            removeOnHidden();
            removeOnVisible();
        };
        const sessionErrors = logEntries.pipe(filter((entry) => entry.level === "error"), map((entry) => entry.messages.find((e) => e instanceof Error)), filter(isSessionError));
        this.subscriptions = [
            // In case of LensCore lens execution error, we must remove the lens from rendering
            // NOTE: LensCore doesn't differentiate recoverable vs non-recoverable errors and
            // it is recommened to always remove the lens.
            sessionErrors
                .pipe(filter((error) => error.name === "LensExecutionError"))
                .subscribe(() => this.removeLens()),
            // Report LensExecutionError and LensImagePickerError errors to apps
            sessionErrors.subscribe((error) => {
                if (error.name !== "LensExecutionError" && error.name !== "LensImagePickerError")
                    return;
                const state = lensState.getState();
                if (!isState(state, "noLensApplied")) {
                    this.events.dispatchEvent(new TypedCustomEvent("error", { error, lens: state.data }));
                }
                else {
                    // NOTE: at this point the error is already reported, so we can just log a warning
                    CameraKitSession_logger.warn(new Error("Lens error occurred even though there is no active lens.", {
                        cause: error,
                    }));
                }
            }),
        ];
    }
    /**
     * Apply a Lens to this session.
     *
     * This method will download (and cache) the Lens executable, and then use that Lens for rendering. If the session
     * is currently playing, this will immediately update the rendered output. Otherwise, the new Lens will be used
     * when session playback in resumed.
     *
     * Calling `applyLens` replaces any prior Lens – only one Lens is allowed at a time (per session).
     *
     * **NOTE**: Errors may occur after the Lens is applied. If the Lens encounters errors while rendering,
     * Camera Kit will automatically remove the Lens from the session and emit a {@link LensExecutionError} event.
     * Applications may want to listen for this error and, for example,
     * prevent the Lens from being selected again by the user.
     *
     * ```ts
     * session.events.addEventListener("error", ({ detail }) => {
     *   if (detail.error.name === "LensExecutionError") {
     *     preventFutureLensSelection(detail.lens);
     *     showMessage("We're sorry, but the Lens you selected encountered an error. Please choose a different Lens.");
     *   }
     * });
     * ```
     *
     * @param lens The Lens to apply to this session.
     * @param launchParams: This can optionally be provided to pass some initial data to the lens – only certain lenses
     * expect launch data.
     * @returns A promise which can have the following results:
     * 1. Resolved with `true`: the lens has been applied.
     * 2. Resolved with `false`: the lens has not been applied, but no error occurred – this can happen if a
     * subsequent call to `applyLens` interrupted the lens application.
     * 3. Rejected: the lens has not been applied because an error occurred. This can happen if:
     *   - The lens ID cannot be found in the LensRepository (use LensRepository to load the lens before calling this
     *     method)
     *   - Lens content download fails, or the download of any required lens assets fails.
     *   - An internal failure occurs in the Lens rendering engine when attempting to apply the lens.
     */
    applyLens(lens, launchParams) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            const action = this.lensState.actions.applyLens({ lens, launchParams });
            return firstValueFrom(of(action).pipe(dispatch(this.lensState), 
            // If another applyLens occurs while we're waiting, resolve this applyLens promise early – we're no
            // longer waiting for the requested lens to be applied.
            takeUntil(this.lensState.events.pipe(forActions("applyLens"), filter(([a]) => a !== action))), 
            // If lens application failed, convert this into a rejected promise by throwing the error.
            tap(([a]) => {
                if (isAction(a, "applyLensFailed") && a.data.lens.id === lens.id)
                    throw a.data.error;
            }), inStates("lensApplied"), map(() => true)), 
            // The default value is used if `takeUntil` completes the Observable early – i.e. the lens was not
            // applied (application was interrupted by a new call to `applyLens`), so we'll resolve with `false`.
            { defaultValue: false });
        });
    }
    /**
     * Remove a Lens from this session.
     *
     * When a Lens is removed, rendering continues if the session is playing. It will just render the session input
     * directly to the outputs without any image processing.
     *
     * @returns A promise which can have the following results:
     * 1. Resolved with `true`: the session's rendered output has no lens applied.
     * 2. Resolved with `false`: the current lens has been removed, but a subsequent call to `applyLens` means that the
     * session's rendered output will still have a (new) lens applied.
     * 3. Rejected: the lens has failed to be removed. This can happen if an internal failure occurs in the Lens
     * rendering engine when attempting to remove the lens.
     */
    removeLens() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (isState(this.lensState.getState(), "noLensApplied"))
                return true;
            return firstValueFrom(of(this.lensState.actions.removeLens()).pipe(dispatch(this.lensState), 
            // If lens removal failed, convert this into a rejected promise by throwing the error.
            tap(([a]) => {
                if (isAction(a, "removeLensFailed"))
                    throw a.data;
            }), inStates("noLensApplied"), 
            // If applyLens is called while we're waiting for removal, complete immediately – applying the next lens
            // will replace the current one.
            takeUntil(this.lensState.events.pipe(forActions("applyLens"))), map(() => true)), 
            // The default value is used if `takeUntil` completes the Observable early (otherwise firstValueFrom will
            // return a rejected Promise).
            { defaultValue: false });
        });
    }
    /**
     * Start/resume session playback – LensCore will begin rendering frames to the output.
     *
     * If no source has been set for the session, calling `play()` will update the playing state, but no actual image
     * processing will occur until `setSource()` is called.
     *
     * @example
     * ```ts
     * const cameraKitSession = await cameraKit.createSession()
     * await cameraKitSession.setSource(mySource)
     * await cameraKitSession.play()
     *
     * // If you call `play` before `setSource`, the call to `play` will resolve but playback will only begin once a
     * // media source has been set.
     * ```
     *
     * @param target Specify the {@link RenderTarget} to render. Defaults to the `live` RenderTarget.
     * @returns Promise resolves when playback state has been updated. If no source has been set, this means `play` will
     * resolve before any frames are processed -- but once a source is set, frames will immediately begin processing.
     */
    play(target = "live") {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (this.playing)
                return;
            this.playing = target;
            const type = this.renderTargetToCanvasType(target);
            return new Promise((resolve, reject) => {
                this.lensCore.playCanvas({
                    type,
                    onSuccess: resolve,
                    onFailure: (error) => {
                        this.playing = false;
                        reject(error);
                    },
                });
            });
        });
    }
    /**
     * Pause session playback – LensCore will stop rendering frames to the output.
     *
     * @param target Specify the RenderTarget to pause playback. May be either `'live'` or `'capture'`.
     * Default is `'live'`.
     * @returns Promise resolves when playback has stopped.
     */
    pause(target = "live") {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (!this.playing)
                return;
            const priorPlayingState = this.playing;
            this.playing = false;
            const type = this.renderTargetToCanvasType(target);
            return new Promise((resolve, reject) => {
                this.lensCore.pauseCanvas({
                    type,
                    onSuccess: resolve,
                    onFailure: (error) => {
                        this.playing = priorPlayingState;
                        reject(error);
                    },
                });
            });
        });
    }
    /**
     * Mute all sounds (default SDK state is unmuted).
     *
     * @param fade Do we want audio to fade out?
     */
    mute(fade = false) {
        this.lensCore.setAllSoundsMuted({
            muted: true,
            fade,
        });
    }
    /**
     * Unmute all sounds.
     *
     * @param fade Do we want audio to fade in?
     */
    unmute(fade = false) {
        this.lensCore.setAllSoundsMuted({
            muted: false,
            fade,
        });
    }
    setSource(source, options = {}) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield this.safelyDetachSource();
            // For convenience, we allow callers to pass in native objects (e.g. MediaStream) as well as CameraKitSource.
            // Native objects are wrapped in corresponding CameraKitSource classes with default options.
            const cameraKitSource = source instanceof MediaStream
                ? createMediaStreamSource(source, options)
                : source instanceof HTMLVideoElement
                    ? createVideoSource(source, options)
                    : source;
            const priorPlayingState = this.playing;
            this.playing = false;
            // The source will provide its data to LensCore, and use other LensCore APIs (e.g. setRenderSize,
            // setInputTransform) to render the source correctly.
            yield cameraKitSource.attach(this.lensCore, (error) => {
                CameraKitSession_logger.error(cameraKitSourceError("Error happened during source attachment.", error));
            });
            // If attachment is successful, we'll update our source so that we can detach it later.
            this.source = cameraKitSource;
            // Finally we'll resume playback, if appropriate.
            if (priorPlayingState) {
                yield this.play(priorPlayingState);
            }
            return cameraKitSource;
        });
    }
    /**
     * Set an FPS limit.
     *
     * This may be useful to reduce CPU/GPU resource usage by CameraKit if, for example, the input
     * media source has a low FPS – CameraKit would then not try to render more frequently than the source produces
     * new frames.
     *
     * This may also be useful to gracefully degrade performance in situations where lowering FPS is preferable over
     * alternatives.
     *
     * @param fpsLimit A maximum FPS, rendering will not exceed this limit
     * @returns Promise is resolved when the limit is successfully set.
     */
    setFPSLimit(fpsLimit) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            // LensCore uses 0 to remove the limit.
            const fps = fpsLimit < Number.POSITIVE_INFINITY ? fpsLimit : 0;
            return new Promise((onSuccess, onFailure) => {
                this.lensCore.setFPSLimit({ fps, onSuccess, onFailure });
            });
        });
    }
    /**
     * Destroy the session.
     *
     * The session will become inoperable. Frame processing stops, and any session-scoped graphical resources are freed.
     */
    destroy() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            this.subscriptions.forEach((sub) => sub.unsubscribe());
            yield this.removeLens();
            yield this.safelyDetachSource();
            yield new Promise((resolve, reject) => {
                this.lensCore.teardown({ onSuccess: resolve, onFailure: reject });
            });
            this.removePageVisibilityHandlers();
        });
    }
    renderTargetToCanvasType(target) {
        return target === "capture" ? this.lensCore.CanvasType.Capture : this.lensCore.CanvasType.Preview;
    }
    safelyDetachSource() {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (this.source) {
                try {
                    yield this.source.detach((error) => {
                        CameraKitSession_logger.error(cameraKitSourceError("Error happened during source detachment.", error));
                    });
                    // If there's a failure to detach, we will report the error and proceed. Failure to detach may lead to a
                    // memory leak, but it shouldn't prevent us from switching to the new source.
                }
                catch (error) {
                    CameraKitSession_logger.error(cameraKitSourceError(`Detaching prior source of type ${typeof this.source} failed.`, error));
                }
            }
        });
    }
}
__decorate([
    validate_validate,
    CameraKitSession_log,
    __param(0, guard(isLens)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], CameraKitSession.prototype, "applyLens", null);
__decorate([
    CameraKitSession_log,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CameraKitSession.prototype, "removeLens", null);
__decorate([
    validate_validate,
    CameraKitSession_log,
    __param(0, guard(isOptionalRenderTarget)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], CameraKitSession.prototype, "play", null);
__decorate([
    validate_validate,
    CameraKitSession_log,
    __param(0, guard(isOptionalRenderTarget)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], CameraKitSession.prototype, "pause", null);
__decorate([
    CameraKitSession_log,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", void 0)
], CameraKitSession.prototype, "mute", null);
__decorate([
    CameraKitSession_log,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean]),
    __metadata("design:returntype", void 0)
], CameraKitSession.prototype, "unmute", null);
__decorate([
    validate_validate,
    CameraKitSession_log,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], CameraKitSession.prototype, "setSource", null);
__decorate([
    CameraKitSession_log,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], CameraKitSession.prototype, "setFPSLimit", null);
__decorate([
    CameraKitSession_log,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CameraKitSession.prototype, "destroy", null);
/**
 * @internal
 */
const cameraKitSessionFactory = Injectable("CameraKitSession", [
    lensCoreFactory.token,
    logEntriesFactory.token,
    lensKeyboardFactory.token,
    sessionStateFactory.token,
    lensStateFactory.token,
], (lensCore, logEntries, keyboard, sessionState, lensState) => new CameraKitSession(keyboard, lensCore, sessionState, lensState, logEntries));
//# sourceMappingURL=CameraKitSession.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens/assets/LensAssetsProvider.js








const LensAssetsProvider_logger = getLogger("LensAssetProvider");
/**
 * Registers a remote asset provider function with a given instance of LensCore.
 *
 * *Note:* LensCoreModule.initialize must be called on the desired LensCoreModule instance **prior** to passing it
 * to the LensAssetsProvider constructor. If this class is instantiated with a LensCoreModule that has not been
 * initialized, the registry of the asset provider function will fail silently and no remote assets will be loaded.
 * @internal
 */
const registerLensAssetsProvider = Injectable("registerLensAssetsProvider", [lensCoreFactory.token, lensRepositoryFactory.token, lensAssetRepositoryFactory.token], (lensCore, lensRepository, lensAssetRepository) => {
    lensCore.setRemoteAssetsProvider((assetDescriptor) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a;
        // Fetch an asset and provide it to LensCore. If fetching the asset fails we give LensCore
        // an empty response (which it may handle in a variety of ways, e.g. retry, gracefully
        // degrade lens behavior, throw error) and then reject.
        const { assetId, assetType, effectId } = assetDescriptor;
        try {
            const lens = effectId ? lensRepository.getLensMetadata(effectId) : undefined;
            yield lensAssetRepository.loadAsset(assetDescriptor, lens && toPublicLens(lens), (_a = lens === null || lens === void 0 ? void 0 : lens.content) === null || _a === void 0 ? void 0 : _a.assetManifest);
        }
        catch (error) {
            // if an error occurs, LensCore handles things in different ways
            // depending on the active lens. It might: 1) retry, 2) gracefully degrade lens behavior,
            // 3) lens JS might throw, which will be passed to the exceptionHandler we register with LensCore.
            lensCore.provideRemoteAssetsResponse({
                assetId,
                assetType,
            });
            LensAssetsProvider_logger.error(lensAssetError(`Unable to handle lens asset "${assetId}" request.`, error));
        }
    }));
});
//# sourceMappingURL=LensAssetsProvider.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/extensions/UriHandlers.js







const UriHandlers_logger = getLogger("UriHandlers");
const SEPARATOR = "://";
function extractSchemeAndRoute(uri) {
    const separatorIndex = uri.indexOf(SEPARATOR);
    const scheme = uri.slice(0, separatorIndex);
    const route = uri.slice(separatorIndex + SEPARATOR.length);
    return [scheme, route];
}
function isUri(value) {
    return isString(value) && value.includes(SEPARATOR);
}
function isUriHandler(value) {
    return (isRecord(value) &&
        (isUri(value.uri) || isArrayOfType(isUri, value.uri)) &&
        isFunction(value.handleRequest) &&
        (isUndefined(value.cancelRequest) || isFunction(value.cancelRequest)));
}
function isUriHandlers(value) {
    return isArrayOfType(isUriHandler, value);
}
function isUriResponse(value) {
    return (isRecord(value) &&
        isNumber(value.code) &&
        isString(value.description) &&
        isString(value.contentType) &&
        (isArrayBuffer(value.data) || isTypedArray(value.data)) &&
        (isUndefined(value.metadata) || predicateRecordValues(isString)(value.metadata)));
}
/**
 * An extension point for client URI handlers.
 */
const uriHandlersFactory = Injectable("UriHandlers", () => {
    const uriHandlers = [];
    return uriHandlers;
});
/**
 * Registers URI handlers within LensCore.
 * @internal
 */
const registerUriHandlers = Injectable("registerUriHandlers", [lensCoreFactory.token, lensStateFactory.token, uriHandlersFactory.token, lensKeyboardFactory.token], (lensCore, lensState, userHandlers, lensKeyboard) => {
    if (!isUriHandlers(userHandlers)) {
        throw new Error("Expected an array of UriHandler objects");
    }
    // Users may define UriHandlers using the uriHandlersFactory.token, but we need to add some internally-defined
    // handlers (e.g. lens keyboard handler) before registering handlers with LensCore.
    const allHandlers = userHandlers.concat(lensKeyboard.uriHandler);
    for (const { uri, handleRequest, cancelRequest } of allHandlers) {
        const uris = Array.isArray(uri) ? uri : [uri];
        for (const [scheme, route] of uris.map(extractSchemeAndRoute)) {
            lensCore.registerUriListener(scheme, route, {
                handleRequest: (request) => {
                    const reply = (response) => {
                        if (!isUriResponse(response)) {
                            throw new Error("Expected UriResponse object");
                        }
                        lensCore.provideUriResponse(request.identifier, response);
                    };
                    // Since lenses are the only things that make URI requests, we expect to always be in the
                    // "lensApplied" state – we'll sanity check, though, and log a warning if we're not.
                    const state = lensState.getState();
                    if (isState(state, "noLensApplied")) {
                        UriHandlers_logger.warn(`Got a URI request for ${request.uri}, but there is no active lens. The ` +
                            `request will not be processed.`);
                        return;
                    }
                    // NOTE: we do not handle any error thrown on an extension side when handleRequest() is called.
                    // That responsibility is delegated to the extension by design and that is exactly what Android
                    // and iOS SDKs do.
                    handleRequest(request, reply, state.data);
                },
                cancelRequest: (request) => {
                    if (cancelRequest) {
                        const state = lensState.getState();
                        if (isState(state, "noLensApplied")) {
                            UriHandlers_logger.warn(`Got a URI cancel request for ${request.uri}, but there is no active ` +
                                `lens. The cancel request will not be processed.`);
                            return;
                        }
                        cancelRequest(request, state.data);
                    }
                },
            });
        }
    }
});
//# sourceMappingURL=UriHandlers.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js

function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function (source, subscriber) {
        var hasState = hasSeed;
        var state = seed;
        var index = 0;
        source.subscribe(createOperatorSubscriber(subscriber, function (value) {
            var i = index++;
            state = hasState
                ?
                    accumulator(state, value, i)
                :
                    ((hasState = true), value);
            emitOnNext && subscriber.next(state);
        }, emitBeforeComplete &&
            (function () {
                hasState && subscriber.next(state);
                subscriber.complete();
            })));
    };
}
//# sourceMappingURL=scanInternals.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/scan.js


function scan(accumulator, seed) {
    return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
}
//# sourceMappingURL=scan.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/mappingHandler.js


/**
 * Map from one request type to another, potentially asynchronously.
 *
 * **NOTE:** If `maxMapConcurrency` is set to some finite number, and more requests are handled than are allowed to
 * be concurrently mapped, the waiting requests will be placed into a unbounded buffer. If, for example, requests are
 * handled with high frequency, `maxMapConcurrency` is low, and the `map` function returns a long-running Promise, this
 * buffer could use a large amount of memory. Keep this in mind when using this handler.
 *
 * @param map Transform each request, may be sync or async.
 * @param maxMapConcurrency If the `map` function is async, it will be invoked at most this number of times
 * concurrently. Setting this to 1 could be useful if it's important for `map` to be called in serial.
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const createMappingHandler = (map, maxMapConcurrency = Number.POSITIVE_INFINITY, flushOnPageHidden = true) => {
    const buffer = [];
    let mapConcurrency = 0;
    const processRequest = (request) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        try {
            mapConcurrency++;
            const mapped = request.map();
            // We want to make sure that if the mapping operation is not async, we don't introduce asynchronicity here
            // (which unfortunately happens even if you `await` a non-Promise value). This is important so that e.g.
            // handlers which run when the page is terminated can send requests synchronously, since the browser may
            // not pick up any async handlers registered to run on the following event loop.
            if (mapped instanceof Promise)
                request.next(yield mapped);
            else if (mapped)
                request.next(mapped);
        }
        catch (error) {
            request.reject(error);
        }
        finally {
            mapConcurrency--;
        }
        while (buffer.length > 0 && mapConcurrency < maxMapConcurrency) {
            // Safety: we just checked for `buffer.length > 0`, so the shifted value will never be undefined.
            processRequest(buffer.shift());
        }
    });
    // This may indicate that the page is being unloaded, in which case we may want to flush any buffered requests
    // regardless of our max concurrency – otherwise those requests will be lost when the page terminates.
    if (flushOnPageHidden) {
        onPageHidden(() => {
            while (buffer.length > 0)
                processRequest(buffer.shift());
        });
    }
    return (next) => (request, metadata) => {
        return new Promise((resolve, reject) => {
            const mappableRequest = {
                map: () => map(request),
                next: (mappedRequest) => next(mappedRequest, metadata).then(resolve).catch(reject),
                reject,
            };
            if (mapConcurrency < maxMapConcurrency)
                processRequest(mappableRequest);
            else
                buffer.push(mappableRequest);
        });
    };
};
//# sourceMappingURL=mappingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/batchingHandler.js



/**
 * Accumulate requests into batches, which are then sent to the next handler in the chain. Batches are sent when either:
 * - the given `isBatchComplete` function returns true, closing the current batch and sending it down the chain.
 * - an optional `maxBatchAge` time has elapsed since the first request in the batch was received.
 * - the page terminates.
 *
 * When handling a request, the Promise returned will resolve when that request has been successfully added to the
 * current batch – **NOT** when that batch has been successfully processed by the rest of the handler chain.
 *
 * The `next` handler in the chain will receive the batch and should handle any errors arising from further processing
 * on the batch (e.g. sending it to a server).
 *
 * **Note:** This handler does not support aborting handled requests via AbortSignal.
 *
 * @param options
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const createBatchingHandler = ({ batchReduce, isBatchComplete, maxBatchAge, flushOnPageHidden, }) => {
    // Flush batches when the page is hidden by default.
    const doFlushOnPageHidden = flushOnPageHidden !== null && flushOnPageHidden !== void 0 ? flushOnPageHidden : true;
    // TODO: this should just be `number`, but we're picking up NodeJS types (@types/node) when building, so setTimeout
    // gets a different return type than what it should have in the browser. We should build without NodeJS types, but
    // that will require some fixes across the codebase.
    let batchTimeout;
    let currentBatch = undefined;
    let clearOnHidden = () => { };
    const reducingHandler = createMappingHandler((request) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        currentBatch = yield batchReduce(currentBatch, request);
        return currentBatch;
    }), 1);
    const batchAndSend = (next, request, metadata) => {
        const batch = request ? batchReduce(currentBatch, request) : currentBatch;
        if (!batch)
            return;
        // `next` should handle its own errors – that is, the batchingHandler is meant to be placed in a handler chain
        // prior to any error logging, retrying, etc. handlers.
        const complete = batch instanceof Promise
            ? batch.then((b) => next(b, metadata)).catch(() => { })
            : next(batch, metadata).catch(() => { });
        currentBatch = undefined;
        clearTimeout(batchTimeout);
        clearOnHidden();
        return complete;
    };
    return (next) => (request, metadata) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        // Requests may be made while the page is transitioning to hidden – for example, the page is being unloaded and
        // we're reporting final metrics. In this case, we need to skip batching and synchronously call `next` so that
        // the request is not lost.
        if (isDuringVisibilityTransition("hidden") && doFlushOnPageHidden) {
            yield batchAndSend(next, request, metadata);
            return;
        }
        // If this is the first request in a batch, we need to set up some callbacks to flush the batch when certain
        // events occur:
        //
        // - maxBatchAge time passes.
        // - page visibility transitions to hidden (which could indicate the page is being unloaded).
        //
        if (currentBatch === undefined) {
            const sendBatch = () => batchAndSend(next, undefined, metadata);
            if (maxBatchAge !== undefined)
                batchTimeout = setTimeout(sendBatch, maxBatchAge);
            if (doFlushOnPageHidden)
                clearOnHidden = onPageHidden(sendBatch);
        }
        const handle = reducingHandler(() => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
            if (!currentBatch)
                return;
            if (!isBatchComplete(currentBatch))
                return;
            yield batchAndSend(next, undefined, metadata);
        }));
        return handle(request, metadata);
    });
};
//# sourceMappingURL=batchingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/ranking.js
/* eslint-disable */


const ranking_protobufPackage = "com.snap.camerakit.v3";
/** Operating System type. */
var RankingData_OSType;
(function (RankingData_OSType) {
    /** OS_TYPE_UNSET - Unset or unknown Operating System. */
    RankingData_OSType["OS_TYPE_UNSET"] = "OS_TYPE_UNSET";
    /** OS_TYPE_ANDROID - Android. */
    RankingData_OSType["OS_TYPE_ANDROID"] = "OS_TYPE_ANDROID";
    /** OS_TYPE_IOS - iOS. */
    RankingData_OSType["OS_TYPE_IOS"] = "OS_TYPE_IOS";
    /** OS_TYPE_IPAD_OS - iPadOS. */
    RankingData_OSType["OS_TYPE_IPAD_OS"] = "OS_TYPE_IPAD_OS";
    /** OS_TYPE_MAC_OS - MacOS. */
    RankingData_OSType["OS_TYPE_MAC_OS"] = "OS_TYPE_MAC_OS";
    /** OS_TYPE_WINDOWS - Windows. */
    RankingData_OSType["OS_TYPE_WINDOWS"] = "OS_TYPE_WINDOWS";
    /** OS_TYPE_LINUX - Linux. */
    RankingData_OSType["OS_TYPE_LINUX"] = "OS_TYPE_LINUX";
    RankingData_OSType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(RankingData_OSType || (RankingData_OSType = {}));
function rankingData_OSTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "OS_TYPE_UNSET":
            return RankingData_OSType.OS_TYPE_UNSET;
        case 1:
        case "OS_TYPE_ANDROID":
            return RankingData_OSType.OS_TYPE_ANDROID;
        case 2:
        case "OS_TYPE_IOS":
            return RankingData_OSType.OS_TYPE_IOS;
        case 3:
        case "OS_TYPE_IPAD_OS":
            return RankingData_OSType.OS_TYPE_IPAD_OS;
        case 4:
        case "OS_TYPE_MAC_OS":
            return RankingData_OSType.OS_TYPE_MAC_OS;
        case 5:
        case "OS_TYPE_WINDOWS":
            return RankingData_OSType.OS_TYPE_WINDOWS;
        case 6:
        case "OS_TYPE_LINUX":
            return RankingData_OSType.OS_TYPE_LINUX;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RankingData_OSType.UNRECOGNIZED;
    }
}
function rankingData_OSTypeToJSON(object) {
    switch (object) {
        case RankingData_OSType.OS_TYPE_UNSET:
            return "OS_TYPE_UNSET";
        case RankingData_OSType.OS_TYPE_ANDROID:
            return "OS_TYPE_ANDROID";
        case RankingData_OSType.OS_TYPE_IOS:
            return "OS_TYPE_IOS";
        case RankingData_OSType.OS_TYPE_IPAD_OS:
            return "OS_TYPE_IPAD_OS";
        case RankingData_OSType.OS_TYPE_MAC_OS:
            return "OS_TYPE_MAC_OS";
        case RankingData_OSType.OS_TYPE_WINDOWS:
            return "OS_TYPE_WINDOWS";
        case RankingData_OSType.OS_TYPE_LINUX:
            return "OS_TYPE_LINUX";
        default:
            return "UNKNOWN";
    }
}
function rankingData_OSTypeToNumber(object) {
    switch (object) {
        case RankingData_OSType.OS_TYPE_UNSET:
            return 0;
        case RankingData_OSType.OS_TYPE_ANDROID:
            return 1;
        case RankingData_OSType.OS_TYPE_IOS:
            return 2;
        case RankingData_OSType.OS_TYPE_IPAD_OS:
            return 3;
        case RankingData_OSType.OS_TYPE_MAC_OS:
            return 4;
        case RankingData_OSType.OS_TYPE_WINDOWS:
            return 5;
        case RankingData_OSType.OS_TYPE_LINUX:
            return 6;
        default:
            return 0;
    }
}
/** Camera kit connectivity type. */
var RankingData_ConnectivityType;
(function (RankingData_ConnectivityType) {
    /** CONNECTIVITY_TYPE_UNSET - Unset or unknown connectivity type. */
    RankingData_ConnectivityType["CONNECTIVITY_TYPE_UNSET"] = "CONNECTIVITY_TYPE_UNSET";
    /** CONNECTIVITY_TYPE_WIFI - Wifi connectivity type. */
    RankingData_ConnectivityType["CONNECTIVITY_TYPE_WIFI"] = "CONNECTIVITY_TYPE_WIFI";
    /** CONNECTIVITY_TYPE_MOBILE - Mobile connectivity type. */
    RankingData_ConnectivityType["CONNECTIVITY_TYPE_MOBILE"] = "CONNECTIVITY_TYPE_MOBILE";
    /** CONNECTIVITY_TYPE_UNREACHABLE - Unreachable connectivity type. */
    RankingData_ConnectivityType["CONNECTIVITY_TYPE_UNREACHABLE"] = "CONNECTIVITY_TYPE_UNREACHABLE";
    /** CONNECTIVITY_TYPE_BLUETOOTH - Bluetooth connectivity type. */
    RankingData_ConnectivityType["CONNECTIVITY_TYPE_BLUETOOTH"] = "CONNECTIVITY_TYPE_BLUETOOTH";
    RankingData_ConnectivityType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(RankingData_ConnectivityType || (RankingData_ConnectivityType = {}));
function rankingData_ConnectivityTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "CONNECTIVITY_TYPE_UNSET":
            return RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET;
        case 1:
        case "CONNECTIVITY_TYPE_WIFI":
            return RankingData_ConnectivityType.CONNECTIVITY_TYPE_WIFI;
        case 2:
        case "CONNECTIVITY_TYPE_MOBILE":
            return RankingData_ConnectivityType.CONNECTIVITY_TYPE_MOBILE;
        case 3:
        case "CONNECTIVITY_TYPE_UNREACHABLE":
            return RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNREACHABLE;
        case 4:
        case "CONNECTIVITY_TYPE_BLUETOOTH":
            return RankingData_ConnectivityType.CONNECTIVITY_TYPE_BLUETOOTH;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RankingData_ConnectivityType.UNRECOGNIZED;
    }
}
function rankingData_ConnectivityTypeToJSON(object) {
    switch (object) {
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET:
            return "CONNECTIVITY_TYPE_UNSET";
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_WIFI:
            return "CONNECTIVITY_TYPE_WIFI";
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_MOBILE:
            return "CONNECTIVITY_TYPE_MOBILE";
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNREACHABLE:
            return "CONNECTIVITY_TYPE_UNREACHABLE";
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_BLUETOOTH:
            return "CONNECTIVITY_TYPE_BLUETOOTH";
        default:
            return "UNKNOWN";
    }
}
function rankingData_ConnectivityTypeToNumber(object) {
    switch (object) {
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET:
            return 0;
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_WIFI:
            return 1;
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_MOBILE:
            return 2;
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNREACHABLE:
            return 3;
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_BLUETOOTH:
            return 4;
        default:
            return 0;
    }
}
function createBaseRankingData() {
    return {
        sessionId: "",
        locale: "",
        osType: RankingData_OSType.OS_TYPE_UNSET,
        connectivityType: RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET,
    };
}
const RankingData = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRankingData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sessionId = reader.string();
                    break;
                case 2:
                    message.locale = reader.string();
                    break;
                case 3:
                    message.osType = rankingData_OSTypeFromJSON(reader.int32());
                    break;
                case 4:
                    message.connectivityType = rankingData_ConnectivityTypeFromJSON(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sessionId: ranking_isSet(object.sessionId) ? String(object.sessionId) : "",
            locale: ranking_isSet(object.locale) ? String(object.locale) : "",
            osType: ranking_isSet(object.osType) ? rankingData_OSTypeFromJSON(object.osType) : RankingData_OSType.OS_TYPE_UNSET,
            connectivityType: ranking_isSet(object.connectivityType)
                ? rankingData_ConnectivityTypeFromJSON(object.connectivityType)
                : RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sessionId !== undefined && (obj.sessionId = message.sessionId);
        message.locale !== undefined && (obj.locale = message.locale);
        message.osType !== undefined && (obj.osType = rankingData_OSTypeToJSON(message.osType));
        message.connectivityType !== undefined &&
            (obj.connectivityType = rankingData_ConnectivityTypeToJSON(message.connectivityType));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRankingData();
        message.sessionId = (_a = object.sessionId) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.osType = (_c = object.osType) !== null && _c !== void 0 ? _c : RankingData_OSType.OS_TYPE_UNSET;
        message.connectivityType = (_d = object.connectivityType) !== null && _d !== void 0 ? _d : RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET;
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
function ranking_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=ranking.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/operational_metrics.js
/* eslint-disable */



const operational_metrics_protobufPackage = "com.snap.camerakit.v3";
function createBaseOperationalMetric() {
    return { name: "", timestamp: undefined, metric: undefined };
}
const OperationalMetric = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOperationalMetric();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.timestamp = operational_metrics_fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.metric = { $case: "count", count: operational_metrics_longToNumber(reader.uint64()) };
                    break;
                case 4:
                    message.metric = { $case: "latencyMillis", latencyMillis: operational_metrics_longToNumber(reader.uint64()) };
                    break;
                case 5:
                    message.metric = { $case: "histogram", histogram: operational_metrics_longToNumber(reader.int64()) };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: operational_metrics_isSet(object.name) ? String(object.name) : "",
            timestamp: operational_metrics_isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
            metric: operational_metrics_isSet(object.count)
                ? { $case: "count", count: Number(object.count) }
                : operational_metrics_isSet(object.latencyMillis)
                    ? { $case: "latencyMillis", latencyMillis: Number(object.latencyMillis) }
                    : operational_metrics_isSet(object.histogram)
                        ? { $case: "histogram", histogram: Number(object.histogram) }
                        : undefined,
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f;
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());
        ((_a = message.metric) === null || _a === void 0 ? void 0 : _a.$case) === "count" && (obj.count = Math.round((_b = message.metric) === null || _b === void 0 ? void 0 : _b.count));
        ((_c = message.metric) === null || _c === void 0 ? void 0 : _c.$case) === "latencyMillis" && (obj.latencyMillis = Math.round((_d = message.metric) === null || _d === void 0 ? void 0 : _d.latencyMillis));
        ((_e = message.metric) === null || _e === void 0 ? void 0 : _e.$case) === "histogram" && (obj.histogram = Math.round((_f = message.metric) === null || _f === void 0 ? void 0 : _f.histogram));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseOperationalMetric();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.timestamp = (_b = object.timestamp) !== null && _b !== void 0 ? _b : undefined;
        if (((_c = object.metric) === null || _c === void 0 ? void 0 : _c.$case) === "count" && ((_d = object.metric) === null || _d === void 0 ? void 0 : _d.count) !== undefined && ((_e = object.metric) === null || _e === void 0 ? void 0 : _e.count) !== null) {
            message.metric = { $case: "count", count: object.metric.count };
        }
        if (((_f = object.metric) === null || _f === void 0 ? void 0 : _f.$case) === "latencyMillis" &&
            ((_g = object.metric) === null || _g === void 0 ? void 0 : _g.latencyMillis) !== undefined &&
            ((_h = object.metric) === null || _h === void 0 ? void 0 : _h.latencyMillis) !== null) {
            message.metric = { $case: "latencyMillis", latencyMillis: object.metric.latencyMillis };
        }
        if (((_j = object.metric) === null || _j === void 0 ? void 0 : _j.$case) === "histogram" &&
            ((_k = object.metric) === null || _k === void 0 ? void 0 : _k.histogram) !== undefined &&
            ((_l = object.metric) === null || _l === void 0 ? void 0 : _l.histogram) !== null) {
            message.metric = { $case: "histogram", histogram: object.metric.histogram };
        }
        return message;
    },
};
function createBaseOperationalMetricsBundle() {
    return { metrics: [] };
}
const OperationalMetricsBundle = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOperationalMetricsBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metrics.push(OperationalMetric.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metrics: Array.isArray(object === null || object === void 0 ? void 0 : object.metrics) ? object.metrics.map((e) => OperationalMetric.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metrics) {
            obj.metrics = message.metrics.map((e) => (e ? OperationalMetric.toJSON(e) : undefined));
        }
        else {
            obj.metrics = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseOperationalMetricsBundle();
        message.metrics = ((_a = object.metrics) === null || _a === void 0 ? void 0 : _a.map((e) => OperationalMetric.fromPartial(e))) || [];
        return message;
    },
};
var operational_metrics_globalThis = (() => {
    if (typeof operational_metrics_globalThis !== "undefined")
        return operational_metrics_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
// @ts-ignore
function operational_metrics_toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function operational_metrics_fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return operational_metrics_fromTimestamp(Timestamp.fromJSON(o));
    }
}
function operational_metrics_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new operational_metrics_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
function operational_metrics_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=operational_metrics.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/business_events.js
/* eslint-disable */


const business_events_protobufPackage = "com.snap.camerakit.v3";
/** Camera kit flavor to be used in to Blizzard event */
var CameraKitFlavor;
(function (CameraKitFlavor) {
    /** CAMERA_KIT_FLAVOR_UNSET - Unset or unknown flavor */
    CameraKitFlavor["CAMERA_KIT_FLAVOR_UNSET"] = "CAMERA_KIT_FLAVOR_UNSET";
    /** CAMERA_KIT_FLAVOR_DEBUG - Debug flavor */
    CameraKitFlavor["CAMERA_KIT_FLAVOR_DEBUG"] = "CAMERA_KIT_FLAVOR_DEBUG";
    /** CAMERA_KIT_FLAVOR_RELEASE - Release flavor */
    CameraKitFlavor["CAMERA_KIT_FLAVOR_RELEASE"] = "CAMERA_KIT_FLAVOR_RELEASE";
    CameraKitFlavor["UNRECOGNIZED"] = "UNRECOGNIZED";
})(CameraKitFlavor || (CameraKitFlavor = {}));
function cameraKitFlavorFromJSON(object) {
    switch (object) {
        case 0:
        case "CAMERA_KIT_FLAVOR_UNSET":
            return CameraKitFlavor.CAMERA_KIT_FLAVOR_UNSET;
        case 1:
        case "CAMERA_KIT_FLAVOR_DEBUG":
            return CameraKitFlavor.CAMERA_KIT_FLAVOR_DEBUG;
        case 2:
        case "CAMERA_KIT_FLAVOR_RELEASE":
            return CameraKitFlavor.CAMERA_KIT_FLAVOR_RELEASE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return CameraKitFlavor.UNRECOGNIZED;
    }
}
function cameraKitFlavorToJSON(object) {
    switch (object) {
        case CameraKitFlavor.CAMERA_KIT_FLAVOR_UNSET:
            return "CAMERA_KIT_FLAVOR_UNSET";
        case CameraKitFlavor.CAMERA_KIT_FLAVOR_DEBUG:
            return "CAMERA_KIT_FLAVOR_DEBUG";
        case CameraKitFlavor.CAMERA_KIT_FLAVOR_RELEASE:
            return "CAMERA_KIT_FLAVOR_RELEASE";
        default:
            return "UNKNOWN";
    }
}
function cameraKitFlavorToNumber(object) {
    switch (object) {
        case CameraKitFlavor.CAMERA_KIT_FLAVOR_UNSET:
            return 0;
        case CameraKitFlavor.CAMERA_KIT_FLAVOR_DEBUG:
            return 1;
        case CameraKitFlavor.CAMERA_KIT_FLAVOR_RELEASE:
            return 2;
        default:
            return 0;
    }
}
/** Camera kit connectivity type to be used in Blizzard event */
var CameraKitConnectivityType;
(function (CameraKitConnectivityType) {
    /** CAMERA_KIT_CONNECTIVITY_TYPE_UNSET - Unset or unknown connectivity type */
    CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNSET"] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNSET";
    /** CAMERA_KIT_CONNECTIVITY_TYPE_WIFI - Wifi connectivity type */
    CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_WIFI"] = "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI";
    /** CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE - Mobile connectivity type */
    CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE"] = "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE";
    /** CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE - Unreachable connectivity type */
    CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE"] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE";
    /** CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH - Bluetooth connectivity type */
    CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH"] = "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH";
    CameraKitConnectivityType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(CameraKitConnectivityType || (CameraKitConnectivityType = {}));
function cameraKitConnectivityTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "CAMERA_KIT_CONNECTIVITY_TYPE_UNSET":
            return CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNSET;
        case 1:
        case "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI":
            return CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_WIFI;
        case 2:
        case "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE":
            return CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE;
        case 3:
        case "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE":
            return CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE;
        case 4:
        case "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH":
            return CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH;
        case -1:
        case "UNRECOGNIZED":
        default:
            return CameraKitConnectivityType.UNRECOGNIZED;
    }
}
function cameraKitConnectivityTypeToJSON(object) {
    switch (object) {
        case CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNSET:
            return "CAMERA_KIT_CONNECTIVITY_TYPE_UNSET";
        case CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_WIFI:
            return "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI";
        case CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE:
            return "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE";
        case CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE:
            return "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE";
        case CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH:
            return "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH";
        default:
            return "UNKNOWN";
    }
}
function cameraKitConnectivityTypeToNumber(object) {
    switch (object) {
        case CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNSET:
            return 0;
        case CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_WIFI:
            return 1;
        case CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE:
            return 2;
        case CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE:
            return 3;
        case CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH:
            return 4;
        default:
            return 0;
    }
}
function createBaseExtensionEventBase() {
    return {
        extensionName: "",
        extensionVersion: "",
        deviceCluster: 0,
        cameraKitVersion: "",
        lensCoreVersion: "",
        deviceModel: "",
        cameraKitFlavor: CameraKitFlavor.CAMERA_KIT_FLAVOR_UNSET,
        appId: "",
        deviceConnectivity: CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNSET,
        sessionId: "",
    };
}
const ExtensionEventBase = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtensionEventBase();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.extensionName = reader.string();
                    break;
                case 2:
                    message.extensionVersion = reader.string();
                    break;
                case 3:
                    message.deviceCluster = business_events_longToNumber(reader.int64());
                    break;
                case 4:
                    message.cameraKitVersion = reader.string();
                    break;
                case 5:
                    message.lensCoreVersion = reader.string();
                    break;
                case 6:
                    message.deviceModel = reader.string();
                    break;
                case 7:
                    message.cameraKitFlavor = cameraKitFlavorFromJSON(reader.int32());
                    break;
                case 8:
                    message.appId = reader.string();
                    break;
                case 9:
                    message.deviceConnectivity = cameraKitConnectivityTypeFromJSON(reader.int32());
                    break;
                case 10:
                    message.sessionId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            extensionName: business_events_isSet(object.extensionName) ? String(object.extensionName) : "",
            extensionVersion: business_events_isSet(object.extensionVersion) ? String(object.extensionVersion) : "",
            deviceCluster: business_events_isSet(object.deviceCluster) ? Number(object.deviceCluster) : 0,
            cameraKitVersion: business_events_isSet(object.cameraKitVersion) ? String(object.cameraKitVersion) : "",
            lensCoreVersion: business_events_isSet(object.lensCoreVersion) ? String(object.lensCoreVersion) : "",
            deviceModel: business_events_isSet(object.deviceModel) ? String(object.deviceModel) : "",
            cameraKitFlavor: business_events_isSet(object.cameraKitFlavor)
                ? cameraKitFlavorFromJSON(object.cameraKitFlavor)
                : CameraKitFlavor.CAMERA_KIT_FLAVOR_UNSET,
            appId: business_events_isSet(object.appId) ? String(object.appId) : "",
            deviceConnectivity: business_events_isSet(object.deviceConnectivity)
                ? cameraKitConnectivityTypeFromJSON(object.deviceConnectivity)
                : CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNSET,
            sessionId: business_events_isSet(object.sessionId) ? String(object.sessionId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.extensionName !== undefined && (obj.extensionName = message.extensionName);
        message.extensionVersion !== undefined && (obj.extensionVersion = message.extensionVersion);
        message.deviceCluster !== undefined && (obj.deviceCluster = Math.round(message.deviceCluster));
        message.cameraKitVersion !== undefined && (obj.cameraKitVersion = message.cameraKitVersion);
        message.lensCoreVersion !== undefined && (obj.lensCoreVersion = message.lensCoreVersion);
        message.deviceModel !== undefined && (obj.deviceModel = message.deviceModel);
        message.cameraKitFlavor !== undefined && (obj.cameraKitFlavor = cameraKitFlavorToJSON(message.cameraKitFlavor));
        message.appId !== undefined && (obj.appId = message.appId);
        message.deviceConnectivity !== undefined &&
            (obj.deviceConnectivity = cameraKitConnectivityTypeToJSON(message.deviceConnectivity));
        message.sessionId !== undefined && (obj.sessionId = message.sessionId);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseExtensionEventBase();
        message.extensionName = (_a = object.extensionName) !== null && _a !== void 0 ? _a : "";
        message.extensionVersion = (_b = object.extensionVersion) !== null && _b !== void 0 ? _b : "";
        message.deviceCluster = (_c = object.deviceCluster) !== null && _c !== void 0 ? _c : 0;
        message.cameraKitVersion = (_d = object.cameraKitVersion) !== null && _d !== void 0 ? _d : "";
        message.lensCoreVersion = (_e = object.lensCoreVersion) !== null && _e !== void 0 ? _e : "";
        message.deviceModel = (_f = object.deviceModel) !== null && _f !== void 0 ? _f : "";
        message.cameraKitFlavor = (_g = object.cameraKitFlavor) !== null && _g !== void 0 ? _g : CameraKitFlavor.CAMERA_KIT_FLAVOR_UNSET;
        message.appId = (_h = object.appId) !== null && _h !== void 0 ? _h : "";
        message.deviceConnectivity =
            (_j = object.deviceConnectivity) !== null && _j !== void 0 ? _j : CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNSET;
        message.sessionId = (_k = object.sessionId) !== null && _k !== void 0 ? _k : "";
        return message;
    },
};
var business_events_globalThis = (() => {
    if (typeof business_events_globalThis !== "undefined")
        return business_events_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function business_events_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new business_events_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
function business_events_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=business_events.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/service.js
/* eslint-disable */







const service_protobufPackage = "com.snap.camerakit.v3";
function createBaseGetGroupRequest() {
    return { id: "", rankingData: undefined };
}
const GetGroupRequest = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.rankingData = RankingData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: service_isSet(object.id) ? String(object.id) : "",
            rankingData: service_isSet(object.rankingData) ? RankingData.fromJSON(object.rankingData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.rankingData !== undefined &&
            (obj.rankingData = message.rankingData ? RankingData.toJSON(message.rankingData) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetGroupRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.rankingData =
            object.rankingData !== undefined && object.rankingData !== null
                ? RankingData.fromPartial(object.rankingData)
                : undefined;
        return message;
    },
};
function createBaseGetGroupResponse() {
    return { id: "", lenses: [] };
}
const GetGroupResponse = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.lenses.push(Lens.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: service_isSet(object.id) ? String(object.id) : "",
            lenses: Array.isArray(object === null || object === void 0 ? void 0 : object.lenses) ? object.lenses.map((e) => Lens.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        if (message.lenses) {
            obj.lenses = message.lenses.map((e) => (e ? Lens.toJSON(e) : undefined));
        }
        else {
            obj.lenses = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetGroupResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.lenses = ((_b = object.lenses) === null || _b === void 0 ? void 0 : _b.map((e) => Lens.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetGroupLensRequest() {
    return { lensId: "", groupId: "" };
}
const GetGroupLensRequest = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupLensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lensId = reader.string();
                    break;
                case 2:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            lensId: service_isSet(object.lensId) ? String(object.lensId) : "",
            groupId: service_isSet(object.groupId) ? String(object.groupId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.lensId !== undefined && (obj.lensId = message.lensId);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetGroupLensRequest();
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.groupId = (_b = object.groupId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetGroupLensResponse() {
    return { lens: undefined };
}
const GetGroupLensResponse = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupLensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lens = Lens.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            lens: service_isSet(object.lens) ? Lens.fromJSON(object.lens) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.lens !== undefined && (obj.lens = message.lens ? Lens.toJSON(message.lens) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseGetGroupLensResponse();
        message.lens = object.lens !== undefined && object.lens !== null ? Lens.fromPartial(object.lens) : undefined;
        return message;
    },
};
function createBaseGetPlaceholderConfigRequest() {
    return {};
}
const GetPlaceholderConfigRequest = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseGetPlaceholderConfigRequest();
        return message;
    },
};
function createBaseGetPlaceholderConfigResponse() {
    return { configs: {} };
}
const GetPlaceholderConfigResponse = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = GetPlaceholderConfigResponse_ConfigsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.configs[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            configs: service_isObject(object.configs)
                ? Object.entries(object.configs).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        obj.configs = {};
        if (message.configs) {
            Object.entries(message.configs).forEach(([k, v]) => {
                obj.configs[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPlaceholderConfigResponse();
        message.configs = Object.entries((_a = object.configs) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGetPlaceholderConfigResponse_ConfigsEntry() {
    return { key: "", value: "" };
}
const GetPlaceholderConfigResponse_ConfigsEntry = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigResponse_ConfigsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: service_isSet(object.key) ? String(object.key) : "",
            value: service_isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPlaceholderConfigResponse_ConfigsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetInitializationConfigRequest() {
    return {};
}
const GetInitializationConfigRequest = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInitializationConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseGetInitializationConfigRequest();
        return message;
    },
};
function createBaseGetInitializationConfigResponse() {
    return { appVendorUuidOptIn: false, watermarkEnabled: false };
}
const GetInitializationConfigResponse = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInitializationConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appVendorUuidOptIn = reader.bool();
                    break;
                case 2:
                    message.watermarkEnabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            appVendorUuidOptIn: service_isSet(object.appVendorUuidOptIn) ? Boolean(object.appVendorUuidOptIn) : false,
            watermarkEnabled: service_isSet(object.watermarkEnabled) ? Boolean(object.watermarkEnabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        message.appVendorUuidOptIn !== undefined && (obj.appVendorUuidOptIn = message.appVendorUuidOptIn);
        message.watermarkEnabled !== undefined && (obj.watermarkEnabled = message.watermarkEnabled);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetInitializationConfigResponse();
        message.appVendorUuidOptIn = (_a = object.appVendorUuidOptIn) !== null && _a !== void 0 ? _a : false;
        message.watermarkEnabled = (_b = object.watermarkEnabled) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseSetOperationalMetricsRequest() {
    return { metrics: undefined };
}
const SetOperationalMetricsRequest = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetOperationalMetricsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metrics = OperationalMetricsBundle.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metrics: service_isSet(object.metrics) ? OperationalMetricsBundle.fromJSON(object.metrics) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.metrics !== undefined &&
            (obj.metrics = message.metrics ? OperationalMetricsBundle.toJSON(message.metrics) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSetOperationalMetricsRequest();
        message.metrics =
            object.metrics !== undefined && object.metrics !== null
                ? OperationalMetricsBundle.fromPartial(object.metrics)
                : undefined;
        return message;
    },
};
function createBaseSetOperationalMetricsResponse() {
    return {};
}
const SetOperationalMetricsResponse = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetOperationalMetricsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseSetOperationalMetricsResponse();
        return message;
    },
};
function createBaseSetBusinessEventsRequest() {
    return { batchEvents: undefined };
}
const SetBusinessEventsRequest = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetBusinessEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.batchEvents = Any.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            batchEvents: service_isSet(object.batchEvents) ? Any.fromJSON(object.batchEvents) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.batchEvents !== undefined &&
            (obj.batchEvents = message.batchEvents ? Any.toJSON(message.batchEvents) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSetBusinessEventsRequest();
        message.batchEvents =
            object.batchEvents !== undefined && object.batchEvents !== null ? Any.fromPartial(object.batchEvents) : undefined;
        return message;
    },
};
function createBaseSetBusinessEventsResponse() {
    return {};
}
const SetBusinessEventsResponse = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetBusinessEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseSetBusinessEventsResponse();
        return message;
    },
};
function createBaseSetExtensionBusinessEventsRequest() {
    return { events: [], extensionEventBase: undefined };
}
const SetExtensionBusinessEventsRequest = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetExtensionBusinessEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.events.push(Any.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.extensionEventBase = ExtensionEventBase.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            events: Array.isArray(object === null || object === void 0 ? void 0 : object.events) ? object.events.map((e) => Any.fromJSON(e)) : [],
            extensionEventBase: service_isSet(object.extensionEventBase)
                ? ExtensionEventBase.fromJSON(object.extensionEventBase)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.events) {
            obj.events = message.events.map((e) => (e ? Any.toJSON(e) : undefined));
        }
        else {
            obj.events = [];
        }
        message.extensionEventBase !== undefined &&
            (obj.extensionEventBase = message.extensionEventBase
                ? ExtensionEventBase.toJSON(message.extensionEventBase)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSetExtensionBusinessEventsRequest();
        message.events = ((_a = object.events) === null || _a === void 0 ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
        message.extensionEventBase =
            object.extensionEventBase !== undefined && object.extensionEventBase !== null
                ? ExtensionEventBase.fromPartial(object.extensionEventBase)
                : undefined;
        return message;
    },
};
function createBaseSetExtensionBusinessEventsResponse() {
    return {};
}
const SetExtensionBusinessEventsResponse = {
    decode(input, length) {
        const reader = input instanceof (minimal_default()).Reader ? input : new (minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetExtensionBusinessEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseSetExtensionBusinessEventsResponse();
        return message;
    },
};
if ((minimal_default()).util.Long !== (long_default())) {
    (minimal_default()).util.Long = (long_default());
    minimal_default().configure();
}
function service_isObject(value) {
    return typeof value === "object" && value !== null;
}
function service_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=service.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/handlers/rateLimitingHandler.js



const delay = (duration) => new Promise((resolve) => setTimeout(resolve, duration));
/**
 * Limit the rate at which requests are passed to the next handler in the chain.
 *
 * During any page transitions to "hidden" – possibly indicating the page is about to terminate – requests will not be
 * rate limited, to ensure that they are not lost.
 *
 * TODO: If there are requests in the queue waiting to be sent when the page transitions to "hidden," these will not
 * be immediately sent. This means there still is an edge case in which a request may be lost on page termination. This
 * can be fixed with changes to `createMappingHandler`.
 *
 * **NOTE:** Under the hood, requests that come in faster than the set `duration` are placed in an unbounded buffer.
 * If many requests are made quickly and `duration` is long, this could result in high memory usage. Keep this in mind
 * when using this handler.
 *
 * @param duration In milliseconds. Requests will be passed to the next handler in the chain no faster than this. That
 * is, if `duration` is `1000`, the next handler will be called at most once per second.
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const createRateLimitingHandler = (duration, flushOnPageHidden = true) => {
    let mostRecentSendTime = undefined;
    const mappingHandler = createMappingHandler((request) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        if (mostRecentSendTime !== undefined) {
            const millisUntilNextSend = duration - (Date.now() - mostRecentSendTime);
            if (millisUntilNextSend > 0)
                yield delay(millisUntilNextSend);
        }
        mostRecentSendTime = Date.now();
        return request;
    }), 1, flushOnPageHidden);
    return (next) => (request, metadata) => {
        // Requests may be made while the page is transitioning to hidden – for example, the page is being unloaded and
        // we're reporting final metrics. In this case, we need to skip rate limiting and synchronously call `next`
        // so that the request is not lost.
        if (isDuringVisibilityTransition("hidden") && flushOnPageHidden)
            return next(request, metadata);
        return mappingHandler(next)(request, metadata);
    };
};
//# sourceMappingURL=rateLimitingHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/metricsHandler.js




const METRIC_REQUEST_RATE_LIMIT_MS = 1000; // send at most one metric request per second.
/**
 * @internal
 */
const metricsHandlerFactory = Injectable("metricsHandler", [cameraKitServiceFetchHandlerFactory.token], (fetchHandler) => {
    return new HandlerChainBuilder(fetchHandler).map(createRateLimitingHandler(METRIC_REQUEST_RATE_LIMIT_MS))
        .handler;
});
//# sourceMappingURL=metricsHandler.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/operationalMetricsReporter.js






// CameraKit's prod metrics endpoint.
// See: https://github.sc-corp.net/Snapchat/pb_schema/blob/c390b9c/proto/camera_kit/v3/service.proto#L126
const OPERATIONAL_METRICS_ENDPOINT = "https://api-kit.snapchat.com/com.snap.camerakit.v3.Metrics/metrics/operational_metrics";
const DIMENSION_DELIMITER = ".";
// These values are (currently) arbitrarily selected.
// TODO: Once we have gathered a sufficient quantity of metrics data, we should tune these numbers to ensure we're
// operating with the right cost vs. alarming SLA vs. IDB storage size tradeoffs.
const METRIC_BATCH_MAX_SIZE = 100;
const METRIC_BATCH_MAX_AGE_MS = 5000;
/**
 * Use this class to report operational metrics – these are metrics that describe aspects of the SDK's performance,
 * which may be used to assess and investigate operational issues.
 */
/** @internal */
class OperationalMetricsReporter {
    constructor(metricsHandler) {
        this.metricsHandler = metricsHandler;
    }
    /**
     * Record a count.
     *
     * @param name
     * @param count
     * @param dimensions An optional Map containing dimensions which describe the metric.
     * For example: `new Map([['status', '200']])`
     * @returns Promise which resolves when the metric has been handled.
     */
    count(name, count, dimensions) {
        return this.record(name, { $case: "count", count }, dimensions);
    }
    /**
     * Record a duration in milliseconds.
     *
     * @param name
     * @param latencyMillis
     * @param dimensions An optional Map containing dimensions which describe the metric.
     * For example: `new Map([['status', '200']])`
     * @returns Promise which resolves when the metric has been handled.
     */
    timer(name, latencyMillis, dimensions) {
        return this.record(name, { $case: "latencyMillis", latencyMillis }, dimensions);
    }
    /**
     * Record a histogram.
     *
     * @param name
     * @param histogram
     * @param dimensions An optional Map containing dimensions which describe the metric.
     * For example: `new Map([['status', '200']])`
     * @returns Promise which resolves when the metric has been handled.
     */
    histogram(name, histogram, dimensions) {
        return this.record(name, { $case: "histogram", histogram }, dimensions);
    }
    record(name, metric, dimensions) {
        // The naming convention (metricName.dimensionName.dimensionValue.dimensionName.dimensionValue...) is mentioned
        // the Graphene docs here https://wiki.sc-corp.net/display/METRICS/Graphene
        // TODO: find explicit documentation of the API, if it exists.
        const serializedDimensions = dimensions
            ? `.${Array.from(dimensions.entries())
                .map((d) => d.join(DIMENSION_DELIMITER))
                .join(DIMENSION_DELIMITER)}`
            : "";
        return this.metricsHandler({
            name: `${name}${serializedDimensions}`,
            timestamp: new Date(),
            metric,
        });
    }
}
/**
 * @internal
 */
const operationalMetricReporterFactory = Injectable("operationalMetricsReporter", [metricsHandlerFactory.token], (metricsHandler) => {
    const handler = new HandlerChainBuilder(metricsHandler)
        .map(createMappingHandler((metrics) => {
        const request = { metrics };
        return new Request(OPERATIONAL_METRICS_ENDPOINT, {
            method: "POST",
            body: JSON.stringify(SetOperationalMetricsRequest.toJSON(request)),
            credentials: "include",
            // Setting this to true makes fetch behave like `Navigator.sendBeacon` – that is, the request
            // will still be made even if the page terminates.
            // https://developer.mozilla.org/en-US/docs/Web/API/fetch
            keepalive: true,
        });
    }))
        .map(createBatchingHandler({
        // The batching logic here is very simple – it could be improved by e.g. combining counts with
        // the same name, computing statistics to reduce overall data sent, etc. Right now this is
        // premature optimization, but could become a good idea in the future.
        batchReduce: (previousBundle, metric) => {
            const bundle = previousBundle !== null && previousBundle !== void 0 ? previousBundle : { metrics: [] };
            bundle.metrics.push(metric);
            return bundle;
        },
        isBatchComplete: (bundle) => bundle.metrics.length >= METRIC_BATCH_MAX_SIZE,
        maxBatchAge: METRIC_BATCH_MAX_AGE_MS,
    })).handler;
    return new OperationalMetricsReporter(handler);
});
//# sourceMappingURL=operationalMetricsReporter.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportGlobalException.js










const logMethods = entries(logLevelMap).map(([level]) => level);
// How many log entries to include as the error context
const maxBufferedEntries = 15;
const contextSeparator = "\n\n----------------- Context -----------------\n\n";
const methodLength = logMethods.reduce((max, method) => Math.max(max, method.length), 0);
function getContextString(logEntry) {
    const result = [];
    for (const entry of logEntry) {
        const time = entry.time.toISOString();
        const method = entry.level.padStart(methodLength);
        // TODO: improve pretty printing
        const messages = entry.messages.map((m) => m + "").join(" ");
        result.push(`${time} [${entry.module}] ${method}: ${messages}`);
    }
    return result.join("\n");
}
function reportExceptionToBlizzard(logEntries, metricsEventTarget, reporter, lensState) {
    logEntries
        .pipe(scan((acc, recent) => ({
        entries: [...acc.entries, recent].slice(-maxBufferedEntries),
        recent,
    }), 
    // Start with a dummy recent entry -- it gets overridden each time we handle a log entry.
    { entries: [], recent: { time: new Date(), module: "any", level: "debug", messages: [] } }), filter(({ recent }) => recent.level === "error"), map(({ entries, recent }) => ({
        context: entries,
        error: recent.messages.find((e) => e instanceof Error),
    })), filter(({ error }) => !!error))
        .subscribe(({ error, context }) => {
        const currentLensState = lensState === null || lensState === void 0 ? void 0 : lensState.getState();
        const lensId = currentLensState && !isState(currentLensState, "noLensApplied") ? currentLensState.data.id : "none";
        metricsEventTarget.dispatchEvent(new TypedCustomEvent("exception", {
            name: "exception",
            lensId,
            type: error.name,
            reason: `${stringifyError(error)}${contextSeparator}${getContextString(context)}`,
        }));
        reporter.count("handled_exception", 1, new Map([["type", error.name]]));
    });
}
/**
 * Reports log entries to Blizzard when there is no CameraKit session yet.
 *
 * @internal
 */
const reportGlobalException = Injectable("reportGlobalException", [logEntriesFactory.token, metricsEventTargetFactory.token, operationalMetricReporterFactory.token], (logEntries, metricsEventTarget, reporter) => {
    // Initially we log exceptions without any lens context
    const cancellationSubject = new Subject();
    reportExceptionToBlizzard(logEntries.pipe(takeUntil(cancellationSubject)), metricsEventTarget, reporter);
    // Later session scope reporter triggers cancellation of the global one
    // and initiates exception reporting with a lens context
    return {
        attachLensContext: (lensState) => {
            cancellationSubject.next();
            reportExceptionToBlizzard(logEntries, metricsEventTarget, reporter, lensState);
        },
    };
});
//# sourceMappingURL=reportGlobalException.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportSessionException.js



/**
 * Reports log entries to Blizzard during a CameraKit session.
 *
 * @internal
 */
const reportSessionException = Injectable("reportSessionException", [reportGlobalException.token, lensStateFactory.token], (globalExceptionReporter, lensState) => {
    globalExceptionReporter.attachLensContext(lensState);
});
//# sourceMappingURL=reportSessionException.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportBenchmarks.js






// Allowlist the benchmarks we wish to report.
const reportableBenchmarks = ["gflops"];
const reportBenchmarks = Injectable("reportBenchmarks", [metricsEventTargetFactory.token, operationalMetricReporterFactory.token, configurationToken], (metricsEventTarget, reporter, config) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    if (config.lensPerformance === undefined)
        return;
    // Safety: config.lensPerformance cannot reject – all Promises contained in CameraKitConfiguration have
    // catch blocks which return a default value.
    const lensPerformance = yield config.lensPerformance;
    const baseBenchmark = {
        name: "benchmarkComplete",
        performanceCluster: lensPerformance.cluster,
        webglRendererInfo: lensPerformance.webglRendererInfo,
    };
    const dimensions = new Map([["performance_cluster", lensPerformance.cluster.toString()]]);
    for (const benchmark of lensPerformance.benchmarks) {
        if (!reportableBenchmarks.includes(benchmark.name))
            continue;
        const benchmarkComplete = Object.assign(Object.assign({}, baseBenchmark), { benchmarkName: benchmark.name, benchmarkValue: benchmark.value });
        metricsEventTarget.dispatchEvent(new TypedCustomEvent("benchmarkComplete", benchmarkComplete));
        reporter.histogram(`benchmark.${benchmark.name}`, benchmark.value, dimensions);
    }
}));
//# sourceMappingURL=reportBenchmarks.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/events/scan.js


/**
 * Each time an event is emitted, call a given accumulator function with two arguments: some state of type S and the
 * event. The accumulator returns a new state. `scan` returns a new event emitter which emits an event each time a new
 * state is produced by the accumulator.
 *
 * This can be used to implement a Redux-style state management architecture.
 *
 * @param seedState Some initial state, passed to the accumulator when the first event is emitted.
 * @returns A function which takes a source {@link TypedEventTarget}, a list of event types emitted by that target to
 * which to listen, and the accumulator function. The accumulator is called each time an event of the given type(s) is
 * emitted on the source. It is passed the current state and the event, and must return a new state.
 */
const scan_scan = (seedState) => (source, eventTypes, accumulator) => {
    let state = seedState;
    const sink = new TypedEventTarget();
    const listener = (event) => {
        state = accumulator(state, event);
        sink.dispatchEvent(new TypedCustomEvent("state", state));
    };
    // We'll use Proxies to make sure that event listeners are added/removed at the appropriate time.
    // Callers can then control when to clean up the listeners we add here in a transparent way –
    // by just removing the listener on the returned event target.
    //
    // We also prevent multiple listeners on the sink, as a simplification.
    let hasListener = false;
    sink.addEventListener = new Proxy(sink.addEventListener, {
        apply: (target, thisArg, args) => {
            if (hasListener)
                throw new Error("Cannot addEventListener. The TypedEventTarget returned by scan only " +
                    "supports a single listener, and one has already been added.");
            hasListener = true;
            eventTypes.forEach((eventType) => source.addEventListener(eventType, listener));
            target.apply(thisArg, args);
        },
    });
    sink.removeEventListener = new Proxy(sink.removeEventListener, {
        apply: (target, thisArg, args) => {
            eventTypes.forEach((eventType) => source.removeEventListener(eventType, listener));
            target.apply(thisArg, args);
        },
    });
    return sink;
};
//# sourceMappingURL=scan.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportLensAndAssetDownload.js








const relevantRequestTypes = ["lens_content", "asset"];
const isLensOrAssetRequest = (value) => {
    const requestType = value["requestType"];
    // Safety: the cast makes the type less specific so we can check if any string is present in the tuple.
    return typeof requestType === "string" && relevantRequestTypes.includes(requestType);
};
const reportLensAndAssetDownload = Injectable("reportLensAndAssetDownload", [metricsEventTargetFactory.token, operationalMetricReporterFactory.token], (metricsEventTarget, reporter) => {
    scan_scan({ name: "inProgress", inProgress: new Map() })(requestStateEventTarget, ["started", "completed", "errored"], (state, event) => {
        const { inProgress } = state;
        const { dimensions, requestId, timeMs } = event.detail;
        if (!isLensOrAssetRequest(dimensions))
            return state;
        switch (event.type) {
            case "started":
                inProgress.set(requestId, { startTimeMs: timeMs });
                return { name: "inProgress", inProgress };
            case "completed":
                const completedRequest = inProgress.get(requestId);
                if (!completedRequest)
                    return state;
                inProgress.delete(requestId);
                const downloadTimeSec = (timeMs - completedRequest.startTimeMs) / 1000;
                const { sizeByte } = event.detail;
                switch (dimensions.requestType) {
                    case "lens_content":
                        return {
                            name: "completed",
                            inProgress,
                            event: new TypedCustomEvent("lensDownload", {
                                name: "lensDownload",
                                lensId: dimensions.lensId,
                                automaticDownload: false,
                                sizeByte,
                                downloadTimeSec,
                            }),
                        };
                    case "asset":
                        return {
                            name: "completed",
                            inProgress,
                            event: new TypedCustomEvent("assetDownload", {
                                name: "assetDownload",
                                assetId: dimensions.assetId,
                                automaticDownload: false,
                                sizeByte,
                                downloadTimeSec,
                            }),
                        };
                    default:
                        assertUnreachable(dimensions);
                }
            case "errored":
                const erroredRequest = inProgress.get(requestId);
                if (!erroredRequest)
                    return state;
                inProgress.delete(requestId);
                const error = event.detail.error;
                return {
                    name: "completed",
                    inProgress,
                    event: new TypedCustomEvent("exception", {
                        name: "exception",
                        lensId: dimensions.lensId,
                        type: dimensions.requestType === "lens_content" ? "lens" : "asset",
                        reason: stringifyError(error),
                    }),
                };
            default:
                assertUnreachable(event);
        }
    }).addEventListener("state", ({ detail: state }) => {
        if (state.name !== "completed")
            return;
        metricsEventTarget.dispatchEvent(state.event);
        if (state.event.detail.name === "exception") {
            reporter.count("handled_exception", 1, new Map([["type", state.event.detail.type]]));
        }
    });
});
//# sourceMappingURL=reportLensAndAssetDownload.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportHttpMetrics.js







const getContentType = (dimensions) => {
    switch (dimensions.requestType) {
        case "lens_content":
            return "lens_content";
        case "asset":
            return dimensions.assetType;
        case COF_REQUEST_TYPE:
            return COF_REQUEST_TYPE;
        default:
            assertUnreachable(dimensions);
    }
};
const getSizeKb = (event) => {
    switch (event.type) {
        case "started":
        case "errored":
            return 0;
        case "completed":
            return event.detail.sizeByte / 1024;
        default:
            assertUnreachable(event);
    }
};
const getStatus = (event) => {
    switch (event.type) {
        case "started":
        case "errored":
            // We'll use status 0 to indicate that an exception occurred during the request. This is somewhat in keeping
            // with browsers that set the response status to 0 if the request was not able to be made (e.g. CORs
            // preflight failed, or the user canceled the request).
            return "0";
        case "completed":
            return event.detail.status.toString();
        default:
            assertUnreachable(event);
    }
};
const isRelevantRequest = (value) => {
    return isLensOrAssetRequest(value) || value["requestType"] === COF_REQUEST_TYPE;
};
const reportHttpMetrics = Injectable("reportHttpMetrics", [operationalMetricReporterFactory.token], (reporter) => {
    scan_scan({ name: "inProgress", inProgress: new Map() })(requestStateEventTarget, ["started", "completed", "errored"], (state, event) => {
        var _a, _b;
        const { inProgress } = state;
        const { dimensions, requestId, timeMs } = event.detail;
        if (!isRelevantRequest(dimensions))
            return state;
        switch (event.type) {
            case "started":
                inProgress.set(requestId, { startTimeMs: timeMs });
                return { name: "inProgress", inProgress };
            case "completed":
            case "errored":
                const completedRequest = inProgress.get(requestId);
                if (!completedRequest)
                    return state;
                inProgress.delete(requestId);
                const downloadTimeMs = timeMs - completedRequest.startTimeMs;
                const downloadSizeKb = getSizeKb(event);
                const status = getStatus(event);
                const operationalDimensions = new Map([
                    ["content_type", getContentType(dimensions)],
                    ["network_type", (_b = (_a = navigator.connection) === null || _a === void 0 ? void 0 : _a.type) !== null && _b !== void 0 ? _b : "unknown"],
                    ["status", status],
                ]);
                return {
                    name: "completed",
                    inProgress: state.inProgress,
                    dimensions: operationalDimensions,
                    downloadSizeKb,
                    downloadTimeMs,
                };
            default:
                assertUnreachable(event);
        }
    }).addEventListener("state", ({ detail: state }) => {
        if (state.name !== "completed")
            return;
        const { dimensions, downloadTimeMs, downloadSizeKb } = state;
        reporter.count("download_finished", 1, dimensions);
        reporter.timer("download_latency", downloadTimeMs, dimensions);
        reporter.histogram("download_size_kb", downloadSizeKb, dimensions);
    });
});
//# sourceMappingURL=reportHttpMetrics.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/generated-proto/blizzard/cameraKitEvents.js
const ServerEvent = {
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
        const message = createBaseServerEvent();
        message.eventName = (_a = object.eventName) !== null && _a !== void 0 ? _a : "";
        message.serverTs = (_b = object.serverTs) !== null && _b !== void 0 ? _b : 0;
        message.userId = (_c = object.userId) !== null && _c !== void 0 ? _c : "";
        message.userAgent = (_d = object.userAgent) !== null && _d !== void 0 ? _d : "";
        message.country = (_e = object.country) !== null && _e !== void 0 ? _e : "";
        message.city = (_f = object.city) !== null && _f !== void 0 ? _f : "";
        message.region = (_g = object.region) !== null && _g !== void 0 ? _g : "";
        message.eventId = (_h = object.eventId) !== null && _h !== void 0 ? _h : "";
        message.instanceId = (_j = object.instanceId) !== null && _j !== void 0 ? _j : "";
        message.sequenceId = (_k = object.sequenceId) !== null && _k !== void 0 ? _k : 0;
        message.osType = (_l = object.osType) !== null && _l !== void 0 ? _l : "";
        message.osVersion = (_m = object.osVersion) !== null && _m !== void 0 ? _m : "";
        message.appVersion = (_o = object.appVersion) !== null && _o !== void 0 ? _o : "";
        message.appBuild = (_p = object.appBuild) !== null && _p !== void 0 ? _p : "";
        message.serverUploadTs = (_q = object.serverUploadTs) !== null && _q !== void 0 ? _q : 0;
        message.eventTime = (_r = object.eventTime) !== null && _r !== void 0 ? _r : 0;
        message.serverReceiptTime = (_s = object.serverReceiptTime) !== null && _s !== void 0 ? _s : 0;
        message.maxSequenceIdOnInstance = (_t = object.maxSequenceIdOnInstance) !== null && _t !== void 0 ? _t : 0;
        message.userGuid = (_u = object.userGuid) !== null && _u !== void 0 ? _u : "";
        message.collection = (_v = object.collection) !== null && _v !== void 0 ? _v : 0;
        message.serviceId = (_w = object.serviceId) !== null && _w !== void 0 ? _w : "";
        message.appType = (_x = object.appType) !== null && _x !== void 0 ? _x : 0;
        message.spectrumInstanceId = (_y = object.spectrumInstanceId) !== null && _y !== void 0 ? _y : "";
        message.spectrumSequenceId = (_z = object.spectrumSequenceId) !== null && _z !== void 0 ? _z : 0;
        message.eventData =
            object.eventData !== undefined && object.eventData !== null
                ? ServerEventData.fromPartial(object.eventData)
                : undefined;
        return message;
    }
};
const ServerEventData = {
    fromPartial(object) {
        const message = createBaseServerEventData();
        message.cameraKitException =
            object.cameraKitException !== undefined && object.cameraKitException !== null
                ? CameraKitException.fromPartial(object.cameraKitException)
                : undefined;
        message.cameraKitLensSpin =
            object.cameraKitLensSpin !== undefined && object.cameraKitLensSpin !== null
                ? CameraKitLensSpin.fromPartial(object.cameraKitLensSpin)
                : undefined;
        message.cameraKitAssetDownload =
            object.cameraKitAssetDownload !== undefined && object.cameraKitAssetDownload !== null
                ? CameraKitAssetDownload.fromPartial(object.cameraKitAssetDownload)
                : undefined;
        message.cameraKitLensContentValidationFailed =
            object.cameraKitLensContentValidationFailed !== undefined && object.cameraKitLensContentValidationFailed !== null
                ? CameraKitLensContentValidationFailed.fromPartial(object.cameraKitLensContentValidationFailed)
                : undefined;
        message.cameraKitLensDownload =
            object.cameraKitLensDownload !== undefined && object.cameraKitLensDownload !== null
                ? CameraKitLensDownload.fromPartial(object.cameraKitLensDownload)
                : undefined;
        message.cameraKitAssetValidationFailed =
            object.cameraKitAssetValidationFailed !== undefined && object.cameraKitAssetValidationFailed !== null
                ? CameraKitAssetValidationFailed.fromPartial(object.cameraKitAssetValidationFailed)
                : undefined;
        message.cameraKitSession =
            object.cameraKitSession !== undefined && object.cameraKitSession !== null
                ? cameraKitEvents_CameraKitSession.fromPartial(object.cameraKitSession)
                : undefined;
        message.cameraKitWebLensSwipe =
            object.cameraKitWebLensSwipe !== undefined && object.cameraKitWebLensSwipe !== null
                ? CameraKitWebLensSwipe.fromPartial(object.cameraKitWebLensSwipe)
                : undefined;
        message.cameraKitWebBenchmarkComplete =
            object.cameraKitWebBenchmarkComplete !== undefined && object.cameraKitWebBenchmarkComplete !== null
                ? CameraKitWebBenchmarkComplete.fromPartial(object.cameraKitWebBenchmarkComplete)
                : undefined;
        message.cameraKitLegalPrompt =
            object.cameraKitLegalPrompt !== undefined && object.cameraKitLegalPrompt !== null
                ? CameraKitLegalPrompt.fromPartial(object.cameraKitLegalPrompt)
                : undefined;
        return message;
    }
};
function createBaseServerEventData() {
    return {
        cameraKitException: undefined,
        cameraKitLensSpin: undefined,
        cameraKitAssetDownload: undefined,
        cameraKitLensContentValidationFailed: undefined,
        cameraKitLensDownload: undefined,
        cameraKitAssetValidationFailed: undefined,
        cameraKitSession: undefined,
        cameraKitWebLensSwipe: undefined,
        cameraKitWebBenchmarkComplete: undefined,
        cameraKitLegalPrompt: undefined
    };
}
function createBaseServerEvent() {
    return {
        eventName: "",
        serverTs: 0,
        userId: "",
        userAgent: "",
        country: "",
        city: "",
        region: "",
        eventId: "",
        instanceId: "",
        sequenceId: 0,
        osType: "",
        osVersion: "",
        appVersion: "",
        appBuild: "",
        serverUploadTs: 0,
        eventTime: 0,
        serverReceiptTime: 0,
        maxSequenceIdOnInstance: 0,
        userGuid: "",
        collection: 0,
        serviceId: "",
        appType: 0,
        spectrumInstanceId: "",
        spectrumSequenceId: 0,
        eventData: undefined
    };
}
var AppType;
(function (AppType) {
    AppType[AppType["IOS_NATIVE"] = 0] = "IOS_NATIVE";
    AppType[AppType["IOS_WEB_DESKTOP"] = 1] = "IOS_WEB_DESKTOP";
    AppType[AppType["IOS_WEB_MOBILE"] = 2] = "IOS_WEB_MOBILE";
    AppType[AppType["ANDROID_NATIVE"] = 3] = "ANDROID_NATIVE";
    AppType[AppType["ANDROID_WEB_DESKTOP"] = 4] = "ANDROID_WEB_DESKTOP";
    AppType[AppType["ANDROID_WEB_MOBILE"] = 5] = "ANDROID_WEB_MOBILE";
    AppType[AppType["OSX_WEB_DESKTOP"] = 6] = "OSX_WEB_DESKTOP";
    AppType[AppType["OSX_WEB_MOBILE"] = 7] = "OSX_WEB_MOBILE";
    AppType[AppType["WINDOWS_WEB_DESKTOP"] = 8] = "WINDOWS_WEB_DESKTOP";
    AppType[AppType["WINDOWS_WEB_MOBILE"] = 9] = "WINDOWS_WEB_MOBILE";
    AppType[AppType["LINUX_WEB_DESKTOP"] = 10] = "LINUX_WEB_DESKTOP";
    AppType[AppType["LINUX_WEB_MOBILE"] = 11] = "LINUX_WEB_MOBILE";
    AppType[AppType["LENSSTUDIO"] = 12] = "LENSSTUDIO";
    AppType[AppType["SNAPCAMERA"] = 13] = "SNAPCAMERA";
    AppType[AppType["WEB_DESKTOP"] = 14] = "WEB_DESKTOP";
    AppType[AppType["WEB_MOBILE"] = 15] = "WEB_MOBILE";
    AppType[AppType["LENSSTUDIO_REMAKE"] = 16] = "LENSSTUDIO_REMAKE";
    AppType[AppType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AppType || (AppType = {}));
var Collection;
(function (Collection) {
    Collection[Collection["COLLECTION_UNUSED"] = 0] = "COLLECTION_UNUSED";
    Collection[Collection["GAE"] = 1] = "GAE";
    Collection[Collection["GCE_M"] = 2] = "GCE_M";
    Collection[Collection["GCE_S"] = 3] = "GCE_S";
    Collection[Collection["GCE_T"] = 4] = "GCE_T";
    Collection[Collection["GKE_M"] = 5] = "GKE_M";
    Collection[Collection["GKE_S"] = 6] = "GKE_S";
    Collection[Collection["GKE_T"] = 7] = "GKE_T";
    Collection[Collection["LOCAL"] = 8] = "LOCAL";
    Collection[Collection["GCE_ST"] = 9] = "GCE_ST";
    Collection[Collection["GKE_ST"] = 10] = "GKE_ST";
    Collection[Collection["GCE_C"] = 11] = "GCE_C";
    Collection[Collection["GCE_SC"] = 12] = "GCE_SC";
    Collection[Collection["GCE_TC"] = 13] = "GCE_TC";
    Collection[Collection["GCE_TSC"] = 14] = "GCE_TSC";
    Collection[Collection["GKE_C"] = 15] = "GKE_C";
    Collection[Collection["GKE_SC"] = 16] = "GKE_SC";
    Collection[Collection["GKE_TC"] = 17] = "GKE_TC";
    Collection[Collection["GKE_TSC"] = 18] = "GKE_TSC";
    Collection[Collection["GKE_W"] = 19] = "GKE_W";
    Collection[Collection["GKE_WT"] = 20] = "GKE_WT";
    Collection[Collection["GKE_WC"] = 21] = "GKE_WC";
    Collection[Collection["GKE_WSC"] = 22] = "GKE_WSC";
    Collection[Collection["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Collection || (Collection = {}));
const CameraKitLensSpin = {
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCameraKitLensSpin();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.viewTimeSec = (_b = object.viewTimeSec) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
};
function createBaseCameraKitLensSpin() {
    return { cameraKitEventBase: undefined, lensId: "", viewTimeSec: 0 };
}
const CameraKitWebLensSwipe = {
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseCameraKitWebLensSwipe();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.performanceCluster = (_a = object.performanceCluster) !== null && _a !== void 0 ? _a : 0;
        message.webglRendererInfo = (_b = object.webglRendererInfo) !== null && _b !== void 0 ? _b : "";
        message.lensId = (_c = object.lensId) !== null && _c !== void 0 ? _c : "";
        message.lensFrameProcessingTimeMsAvg = (_d = object.lensFrameProcessingTimeMsAvg) !== null && _d !== void 0 ? _d : 0;
        message.lensFrameProcessingTimeMsStd = (_e = object.lensFrameProcessingTimeMsStd) !== null && _e !== void 0 ? _e : 0;
        message.viewTimeSec = (_f = object.viewTimeSec) !== null && _f !== void 0 ? _f : 0;
        message.recordingTimeSec = (_g = object.recordingTimeSec) !== null && _g !== void 0 ? _g : 0;
        message.applyDelaySec = (_h = object.applyDelaySec) !== null && _h !== void 0 ? _h : 0;
        message.avgFps = (_j = object.avgFps) !== null && _j !== void 0 ? _j : 0;
        message.isLensFirstWithinDay = (_k = object.isLensFirstWithinDay) !== null && _k !== void 0 ? _k : false;
        message.isLensFirstWithinMonth = (_l = object.isLensFirstWithinMonth) !== null && _l !== void 0 ? _l : false;
        return message;
    }
};
function createBaseCameraKitWebLensSwipe() {
    return {
        cameraKitEventBase: undefined,
        performanceCluster: 0,
        webglRendererInfo: "",
        lensId: "",
        lensFrameProcessingTimeMsAvg: 0,
        lensFrameProcessingTimeMsStd: 0,
        viewTimeSec: 0,
        recordingTimeSec: 0,
        applyDelaySec: 0,
        avgFps: 0,
        isLensFirstWithinDay: false,
        isLensFirstWithinMonth: false
    };
}
const CameraKitLensDownload = {
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCameraKitLensDownload();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.automaticDownload = (_b = object.automaticDownload) !== null && _b !== void 0 ? _b : false;
        message.downloadTimeSec = (_c = object.downloadTimeSec) !== null && _c !== void 0 ? _c : 0;
        message.sizeByte = (_d = object.sizeByte) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
};
function createBaseCameraKitLensDownload() {
    return { cameraKitEventBase: undefined, lensId: "", automaticDownload: false, downloadTimeSec: 0, sizeByte: 0 };
}
const CameraKitAssetDownload = {
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCameraKitAssetDownload();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.automaticDownload = (_a = object.automaticDownload) !== null && _a !== void 0 ? _a : false;
        message.downloadTimeSec = (_b = object.downloadTimeSec) !== null && _b !== void 0 ? _b : 0;
        message.sizeByte = (_c = object.sizeByte) !== null && _c !== void 0 ? _c : 0;
        message.assetId = (_d = object.assetId) !== null && _d !== void 0 ? _d : "";
        return message;
    }
};
function createBaseCameraKitAssetDownload() {
    return { cameraKitEventBase: undefined, automaticDownload: false, downloadTimeSec: 0, sizeByte: 0, assetId: "" };
}
const CameraKitException = {
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseCameraKitException();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : "";
        message.reason = (_c = object.reason) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseCameraKitException() {
    return { cameraKitEventBase: undefined, lensId: "", type: "", reason: "" };
}
const cameraKitEvents_CameraKitSession = {
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseCameraKitSession();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.dailySessionBucket = (_a = object.dailySessionBucket) !== null && _a !== void 0 ? _a : 0;
        message.isFirstWithinMonth = (_b = object.isFirstWithinMonth) !== null && _b !== void 0 ? _b : false;
        message.day = (_c = object.day) !== null && _c !== void 0 ? _c : 0;
        message.month = (_d = object.month) !== null && _d !== void 0 ? _d : 0;
        message.year = (_e = object.year) !== null && _e !== void 0 ? _e : 0;
        return message;
    }
};
function createBaseCameraKitSession() {
    return { cameraKitEventBase: undefined, dailySessionBucket: 0, isFirstWithinMonth: false, day: 0, month: 0, year: 0 };
}
var DailySessionBucket;
(function (DailySessionBucket) {
    DailySessionBucket[DailySessionBucket["NO_SESSION_BUCKET"] = 0] = "NO_SESSION_BUCKET";
    DailySessionBucket[DailySessionBucket["ONE_SESSION"] = 1] = "ONE_SESSION";
    DailySessionBucket[DailySessionBucket["TWO_SESSION"] = 2] = "TWO_SESSION";
    DailySessionBucket[DailySessionBucket["THREE_SESSION"] = 3] = "THREE_SESSION";
    DailySessionBucket[DailySessionBucket["FOUR_SESSION"] = 4] = "FOUR_SESSION";
    DailySessionBucket[DailySessionBucket["FIVE_SESSION"] = 5] = "FIVE_SESSION";
    DailySessionBucket[DailySessionBucket["SIX_SESSION"] = 6] = "SIX_SESSION";
    DailySessionBucket[DailySessionBucket["SEVEN_SESSION"] = 7] = "SEVEN_SESSION";
    DailySessionBucket[DailySessionBucket["EIGHT_SESSION"] = 8] = "EIGHT_SESSION";
    DailySessionBucket[DailySessionBucket["NINE_SESSION"] = 9] = "NINE_SESSION";
    DailySessionBucket[DailySessionBucket["TEN_OR_MORE_SESSION"] = 10] = "TEN_OR_MORE_SESSION";
    DailySessionBucket[DailySessionBucket["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DailySessionBucket || (DailySessionBucket = {}));
const CameraKitLensContentValidationFailed = {
    fromPartial(object) {
        var _a;
        const message = createBaseCameraKitLensContentValidationFailed();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseCameraKitLensContentValidationFailed() {
    return { cameraKitEventBase: undefined, lensId: "" };
}
const CameraKitAssetValidationFailed = {
    fromPartial(object) {
        var _a;
        const message = createBaseCameraKitAssetValidationFailed();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.assetId = (_a = object.assetId) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseCameraKitAssetValidationFailed() {
    return { cameraKitEventBase: undefined, assetId: "" };
}
const CameraKitWebBenchmarkComplete = {
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCameraKitWebBenchmarkComplete();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.benchmarkName = (_a = object.benchmarkName) !== null && _a !== void 0 ? _a : "";
        message.benchmarkValue = (_b = object.benchmarkValue) !== null && _b !== void 0 ? _b : 0;
        message.performanceCluster = (_c = object.performanceCluster) !== null && _c !== void 0 ? _c : 0;
        message.webglRendererInfo = (_d = object.webglRendererInfo) !== null && _d !== void 0 ? _d : "";
        return message;
    }
};
function createBaseCameraKitWebBenchmarkComplete() {
    return {
        cameraKitEventBase: undefined,
        benchmarkName: "",
        benchmarkValue: 0,
        performanceCluster: 0,
        webglRendererInfo: ""
    };
}
const CameraKitLegalPrompt = {
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCameraKitLegalPrompt();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.legalPromptId = (_a = object.legalPromptId) !== null && _a !== void 0 ? _a : "";
        message.legalPromptResult = (_b = object.legalPromptResult) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
};
const CameraKitEventBase = {
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseCameraKitEventBase();
        message.kitEventBase =
            object.kitEventBase !== undefined && object.kitEventBase !== null
                ? KitEventBase.fromPartial(object.kitEventBase)
                : undefined;
        message.deviceCluster = (_a = object.deviceCluster) !== null && _a !== void 0 ? _a : 0;
        message.cameraKitVersion = (_b = object.cameraKitVersion) !== null && _b !== void 0 ? _b : "";
        message.lensCoreVersion = (_c = object.lensCoreVersion) !== null && _c !== void 0 ? _c : "";
        message.deviceModel = (_d = object.deviceModel) !== null && _d !== void 0 ? _d : "";
        message.cameraKitVariant = (_e = object.cameraKitVariant) !== null && _e !== void 0 ? _e : 0;
        message.cameraKitFlavor = (_f = object.cameraKitFlavor) !== null && _f !== void 0 ? _f : 0;
        message.appId = (_g = object.appId) !== null && _g !== void 0 ? _g : "";
        message.deviceConnectivity = (_h = object.deviceConnectivity) !== null && _h !== void 0 ? _h : 0;
        message.sessionId = (_j = object.sessionId) !== null && _j !== void 0 ? _j : "";
        message.appVendorUuid = (_k = object.appVendorUuid) !== null && _k !== void 0 ? _k : "";
        message.rankingRequestId = (_l = object.rankingRequestId) !== null && _l !== void 0 ? _l : "";
        return message;
    }
};
const KitEventBase = {
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        const message = createBaseKitEventBase();
        message.oauthClientId = (_a = object.oauthClientId) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.kitUserAgent = (_c = object.kitUserAgent) !== null && _c !== void 0 ? _c : "";
        message.ipAddress = (_d = object.ipAddress) !== null && _d !== void 0 ? _d : "";
        message.osMinorVersion = (_e = object.osMinorVersion) !== null && _e !== void 0 ? _e : "";
        message.kitVariant = (_f = object.kitVariant) !== null && _f !== void 0 ? _f : 0;
        message.kitVariantVersion = (_g = object.kitVariantVersion) !== null && _g !== void 0 ? _g : "";
        message.kitClientTimestampMillis = (_h = object.kitClientTimestampMillis) !== null && _h !== void 0 ? _h : 0;
        message.clientSequenceId = (_j = object.clientSequenceId) !== null && _j !== void 0 ? _j : 0;
        message.maxClientSequenceIdOnInstance = (_k = object.maxClientSequenceIdOnInstance) !== null && _k !== void 0 ? _k : 0;
        message.targetArchitecture = (_l = object.targetArchitecture) !== null && _l !== void 0 ? _l : "";
        message.runningWithDebuggerAttached = (_m = object.runningWithDebuggerAttached) !== null && _m !== void 0 ? _m : false;
        message.runningInTests = (_o = object.runningInTests) !== null && _o !== void 0 ? _o : false;
        message.runningInSimulator = (_p = object.runningInSimulator) !== null && _p !== void 0 ? _p : false;
        message.isAppPrerelease = (_q = object.isAppPrerelease) !== null && _q !== void 0 ? _q : false;
        message.kitAppId = (_r = object.kitAppId) !== null && _r !== void 0 ? _r : "";
        message.kitSessionId = (_s = object.kitSessionId) !== null && _s !== void 0 ? _s : "";
        message.kitPluginType = (_t = object.kitPluginType) !== null && _t !== void 0 ? _t : 0;
        message.isFromReactNativePlugin = (_u = object.isFromReactNativePlugin) !== null && _u !== void 0 ? _u : false;
        return message;
    }
};
function createBaseKitEventBase() {
    return {
        oauthClientId: "",
        locale: "",
        kitUserAgent: "",
        ipAddress: "",
        osMinorVersion: "",
        kitVariant: 0,
        kitVariantVersion: "",
        kitClientTimestampMillis: 0,
        clientSequenceId: 0,
        maxClientSequenceIdOnInstance: 0,
        targetArchitecture: "",
        runningWithDebuggerAttached: false,
        runningInTests: false,
        runningInSimulator: false,
        isAppPrerelease: false,
        kitAppId: "",
        kitSessionId: "",
        kitPluginType: 0,
        isFromReactNativePlugin: false
    };
}
function createBaseCameraKitEventBase() {
    return {
        kitEventBase: undefined,
        deviceCluster: 0,
        cameraKitVersion: "",
        lensCoreVersion: "",
        deviceModel: "",
        cameraKitVariant: 0,
        cameraKitFlavor: 0,
        appId: "",
        deviceConnectivity: 0,
        sessionId: "",
        appVendorUuid: "",
        rankingRequestId: ""
    };
}
function createBaseCameraKitLegalPrompt() {
    return { cameraKitEventBase: undefined, legalPromptId: "", legalPromptResult: 0 };
}
var CameraKitLegalPromptResult;
(function (CameraKitLegalPromptResult) {
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_MISSING"] = 0] = "CAMERA_KIT_LEGAL_PROMPT_MISSING";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_ACCEPTED"] = 1] = "CAMERA_KIT_LEGAL_PROMPT_ACCEPTED";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_DISMISSED"] = 2] = "CAMERA_KIT_LEGAL_PROMPT_DISMISSED";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitLegalPromptResult || (CameraKitLegalPromptResult = {}));
var cameraKitEvents_CameraKitConnectivityType;
(function (CameraKitConnectivityType) {
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN"] = 0] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_WIFI"] = 1] = "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE"] = 2] = "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE"] = 3] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH"] = 4] = "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH";
    CameraKitConnectivityType[CameraKitConnectivityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(cameraKitEvents_CameraKitConnectivityType || (cameraKitEvents_CameraKitConnectivityType = {}));
var cameraKitEvents_CameraKitFlavor;
(function (CameraKitFlavor) {
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_UNKNOWN"] = 0] = "CAMERA_KIT_FLAVOR_UNKNOWN";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_DEBUG"] = 1] = "CAMERA_KIT_FLAVOR_DEBUG";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_RELEASE"] = 2] = "CAMERA_KIT_FLAVOR_RELEASE";
    CameraKitFlavor[CameraKitFlavor["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(cameraKitEvents_CameraKitFlavor || (cameraKitEvents_CameraKitFlavor = {}));
var CameraKitVariant;
(function (CameraKitVariant) {
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_UNKNOWN"] = 0] = "CAMERA_KIT_VARIANT_UNKNOWN";
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_PARTNER"] = 1] = "CAMERA_KIT_VARIANT_PARTNER";
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_PUBLIC"] = 2] = "CAMERA_KIT_VARIANT_PUBLIC";
    CameraKitVariant[CameraKitVariant["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CameraKitVariant || (CameraKitVariant = {}));
var KitPluginType;
(function (KitPluginType) {
    KitPluginType[KitPluginType["NO_PLUGIN"] = 0] = "NO_PLUGIN";
    KitPluginType[KitPluginType["UNITY"] = 1] = "UNITY";
    KitPluginType[KitPluginType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(KitPluginType || (KitPluginType = {}));
var KitType;
(function (KitType) {
    KitType[KitType["UNKNOWN_KIT_TYPE"] = 0] = "UNKNOWN_KIT_TYPE";
    KitType[KitType["BITMOJI_KIT"] = 1] = "BITMOJI_KIT";
    KitType[KitType["CREATIVE_KIT"] = 2] = "CREATIVE_KIT";
    KitType[KitType["LOGIN_KIT"] = 3] = "LOGIN_KIT";
    KitType[KitType["STORY_KIT"] = 4] = "STORY_KIT";
    KitType[KitType["CAMERA_KIT"] = 5] = "CAMERA_KIT";
    KitType[KitType["SHOP_KIT"] = 6] = "SHOP_KIT";
    KitType[KitType["EULA_KIT"] = 7] = "EULA_KIT";
    KitType[KitType["PAYMENTS_KIT"] = 8] = "PAYMENTS_KIT";
    KitType[KitType["INVITE_KIT"] = 9] = "INVITE_KIT";
    KitType[KitType["CAMERA_KIT_WEB"] = 10] = "CAMERA_KIT_WEB";
    KitType[KitType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(KitType || (KitType = {}));
//# sourceMappingURL=cameraKitEvents.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportLegalState.js








/**
 * @internal
 */
const reportLegalState = Injectable("reportLegalState", [legalStateFactory.token, metricsEventTargetFactory.token, operationalMetricReporterFactory.token], (legalState, metricsEventTarget, operationalMetricsReporter) => {
    legalState.events
        .pipe(forActions("accept", "reject"), map(([{ data, name }]) => ({
        name: "legalPrompt",
        legalPromptId: data,
        legalPromptResult: name === "accept"
            ? CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_ACCEPTED
            : CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_DISMISSED,
    })))
        .subscribe({
        next: (legalPromptEvent) => {
            metricsEventTarget.dispatchEvent(new TypedCustomEvent("legalPrompt", legalPromptEvent));
            operationalMetricsReporter.count("legal_prompt_interaction", 1, new Map([
                [
                    "accepted",
                    (legalPromptEvent.legalPromptResult ===
                        CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_ACCEPTED).toString(),
                ],
            ]));
        },
    });
});
//# sourceMappingURL=reportLegalState.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportLensValidationFailed.js






/**
 * @internal
 */
const reportLensValidationFailed = Injectable("reportLensValidationFailed", [lensStateFactory.token, metricsEventTargetFactory.token], (lensState, metricsEventTarget) => {
    lensState.events
        .pipe(forActions("applyLensFailed"), filter(([a]) => a.data.error.name === "LensContentValidationError"))
        .subscribe({
        next: ([{ data }]) => {
            const { lens } = data;
            const lensContentValidationFailed = {
                name: "lensContentValidationFailed",
                lensId: lens.id,
            };
            metricsEventTarget.dispatchEvent(new TypedCustomEvent("lensContentValidationFailed", lensContentValidationFailed));
        },
    });
});
//# sourceMappingURL=reportLensValidationFailed.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js









function combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    var resultSelector = popResultSelector(args);
    var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
    if (observables.length === 0) {
        return from([], scheduler);
    }
    var result = new Observable(combineLatestInit(observables, scheduler, keys
        ?
            function (values) { return createObject(keys, values); }
        :
            identity));
    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) { valueTransform = identity_identity; }
    return function (subscriber) {
        maybeSchedule(scheduler, function () {
            var length = observables.length;
            var values = new Array(length);
            var active = length;
            var remainingFirstValues = length;
            var _loop_1 = function (i) {
                maybeSchedule(scheduler, function () {
                    var source = from_from(observables[i], scheduler);
                    var hasFirstValue = false;
                    source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                        values[i] = value;
                        if (!hasFirstValue) {
                            hasFirstValue = true;
                            remainingFirstValues--;
                        }
                        if (!remainingFirstValues) {
                            subscriber.next(valueTransform(values.slice()));
                        }
                    }, function () {
                        if (!--active) {
                            subscriber.complete();
                        }
                    }));
                }, subscriber);
            };
            for (var i = 0; i < length; i++) {
                _loop_1(i);
            }
        }, subscriber);
    };
}
function maybeSchedule(scheduler, execute, subscription) {
    if (scheduler) {
        executeSchedule(subscription, scheduler, execute);
    }
    else {
        execute();
    }
}
//# sourceMappingURL=combineLatest.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js







function combineLatest_combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var resultSelector = args_popResultSelector(args);
    return resultSelector
        ? pipe(combineLatest_combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs_mapOneOrManyArgs(resultSelector))
        : operate(function (source, subscriber) {
            combineLatestInit(__spreadArray([source], __read(argsOrArgArray_argsOrArgArray(args))))(subscriber);
        });
}
//# sourceMappingURL=combineLatest.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js


function combineLatestWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return combineLatest_combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));
}
//# sourceMappingURL=combineLatestWith.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportLensView.js












// We ignore short-duration lens views.
//
// The value is documented here:
// https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/edit#heading=h.q5liip76r9lt
const viewTimeThresholdSec = 0.1;
/**
 * @internal
 */
const reportLensView = Injectable("reportLensView", [
    cameraKitSessionFactory.token,
    lensStateFactory.token,
    sessionStateFactory.token,
    metricsEventTargetFactory.token,
    operationalMetricReporterFactory.token,
    configurationToken,
], (session, lensState, sessionState, metricsEventTarget, operationalMetricsReporter, configuration) => {
    merge(
    // Begin measuring LensCore apply time once the lens has finished downloading and we actually add the lens
    // to LensCore (LensWait measures the full download + LensCore apply time i.e. perceived UX latency).
    lensState.events.pipe(forActions("downloadComplete"), map(([a]) => a.data)), 
    // If the session is resumed (e.g. user returns to this tab while a lens is on), we count this as a new
    // LensView (and applyDelaySec will be 0).
    lensState.events.pipe(inStates("lensApplied"), switchMap(([, s]) => sessionState.events.pipe(forActions("resume"), takeUntil(lensState.events.pipe(forActions("removeLens"))), map(() => s.data)))))
        .pipe(map((lens) => [getTimeMs(), lens.id]), mergeMap(([applyLensStartTime, lensId]) => {
        const alreadyOn = isState(lensState.getState(), "lensApplied");
        const applyDelay = alreadyOn
            ? of(0)
            : lensState.events.pipe(forActions("resourcesLoaded"), filter(([a]) => a.data.id === lensId), 
            // Applying a new lens may happen before removing the old one, so if we kept taking events
            // we would get the lensResourcesLoaded for the next lens, too.
            take(1), map(() => (getTimeMs() - applyLensStartTime) / 1000));
        const viewMetrics = (alreadyOn
            ? of([getTimeMs(), session.metrics.beginMeasurement()])
            : lensState.events.pipe(forActions("turnedOn"), filter(([a]) => a.data.id === lensId), map(() => [getTimeMs(), session.metrics.beginMeasurement()]))).pipe(take(1), mergeMap(([lensTurnedOnTime, metricsMeasurement]) => lensState.events.pipe(forActions("turnedOff"), 
        // Applying a new lens may happen before removing the old one, so we'll get a
        // lensTurnedOff for the prior lens (if one was applied), which we must filter out.
        filter(([a]) => a.data.id === lensId), 
        // If the session is suspended, we'll count that as the lens turning off.
        raceWith(sessionState.events.pipe(forActions("suspend"))), map(() => {
            metricsMeasurement.end();
            return Object.assign({ viewTimeSec: (getTimeMs() - lensTurnedOnTime) / 1000 }, metricsMeasurement.measure());
        }))));
        return applyDelay.pipe(combineLatestWith(viewMetrics), 
        // This lens should always receive the lensTurnedOff action *before* the next lens is turned on.
        // But just in case that assumption is violated, we'll clean up (and not report) if another lens
        // turns on before our lens is turned off.
        takeUntil(lensState.events.pipe(forActions("turnedOn"), filter(([a]) => a.data.id !== lensId))), take(1), map(([applyDelaySec, viewMetrics]) => (Object.assign({ applyDelaySec,
            lensId }, viewMetrics))));
    }))
        .subscribe({
        next: ({ applyDelaySec, lensId, viewTimeSec, avgFps, lensFrameProcessingTimeMsAvg, lensFrameProcessingTimeMsStd, }) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
            var _a;
            if (viewTimeSec < viewTimeThresholdSec)
                return;
            const { cluster: performanceCluster, webglRendererInfo } = (_a = (yield configuration.lensPerformance)) !== null && _a !== void 0 ? _a : {
                cluster: 0,
                webglRendererInfo: "unknown",
            };
            const lensView = {
                name: "lensView",
                applyDelaySec,
                avgFps,
                lensId,
                lensFrameProcessingTimeMsAvg,
                lensFrameProcessingTimeMsStd,
                // We don't support recording video, but applications may do this without our knowledge.
                recordingTimeSec: 0,
                viewTimeSec,
                // TODO: if we want to support these fields, we'll need some persistence to keep track of the
                // date of last application per lens.
                // https://jira.sc-corp.net/browse/CAMKIT-3050
                isLensFirstWithinDay: false,
                isLensFirstWithinMonth: false,
                performanceCluster,
                webglRendererInfo,
            };
            metricsEventTarget.dispatchEvent(new TypedCustomEvent("lensView", lensView));
            // Reporting operational metrics described here:
            // https://docs.google.com/document/d/1g4PncAmKdyrLEFVp8ODp58oer2UJu9PIetRW035nnTo
            //
            // We ignore if applyDelaySec is 0, which will be the case if the session was suspended and then
            // resumed - we only care about this metric when a new lens has been loaded.
            if (applyDelaySec > 0)
                operationalMetricsReporter.timer("lens.core_loading_latency", applyDelaySec * 1000);
            operationalMetricsReporter.timer("lens.processing_time", lensFrameProcessingTimeMsAvg, new Map([["performance_cluster", performanceCluster.toString()]]));
        }),
    });
});
//# sourceMappingURL=reportLensView.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportLensWait.js








// We ignore short-duration lens waits.
//
// The value is documented here:
// https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/edit#heading=h.q5liip76r9lt
const reportLensWait_viewTimeThresholdSec = 0.1;
/**
 * Each time a lens is applied, we measure the duration until the lens is fully loaded by LensCore. This
 * includes any time spent downloading the lens content and required assets from the lens manifest.
 *
 * The intention of this event is to measure the experienced UX latency between a user requesting a lens and
 * the lens rendering. Of course, the application may call `applyLens` at any time, and may hide/show the
 * rendered result at any time – but this should give us a good baseline for how much UX latency could be seen.
 *
 * @internal
 */
const reportLensWait = Injectable("reportLensWait", [lensStateFactory.token, metricsEventTargetFactory.token, operationalMetricReporterFactory.token], (lensState, metricsEventTarget, reporter) => {
    lensState.events
        .pipe(forActions("applyLens"), mergeMap(([a]) => {
        const lensId = a.data.lens.id;
        const applyLensStartTime = getTimeMs();
        return lensState.events.pipe(
        // We'll measure the time until either the requested lens was rendered, or a new applyLens
        // request was made (in both cases, we're done waiting for this lens).
        //
        // This does have the side-effect that if a user rapidly switches between lenses, we'll record
        // many low-duration lensWait events that are measuring user behavior instead of system latency.
        // But this is a good trade-off so that we can capture those long-duration lensWaits that are
        // terminated by the user trying a different lens.
        //
        // (This effect can be mitigated by increasing the viewtimeThresholdSec to ignore low-duration
        // waits that are likely caused by user behavior).
        forActions("firstFrameProcessed", "applyLens"), take(1), map(() => [(getTimeMs() - applyLensStartTime) / 1000, lensId]));
    }))
        .subscribe({
        next: ([viewTimeSec, lensId]) => {
            if (viewTimeSec < reportLensWait_viewTimeThresholdSec)
                return;
            const lensWait = {
                name: "lensWait",
                lensId,
                viewTimeSec,
            };
            metricsEventTarget.dispatchEvent(new TypedCustomEvent("lensWait", lensWait));
            reporter.timer("lens.apply_lens_latency", viewTimeSec * 1000);
        },
    });
});
//# sourceMappingURL=reportLensWait.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportUserSession.js






/**
 * @internal
 */
const reportUserSession = Injectable("reportUserSession", [metricsEventTargetFactory.token], (metricsEventTarget) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const userSessionKey = "userSessionInfo";
    const db = new IndexedDBPersistence({ databaseName: "SessionHistory" });
    // We standardize all user dates to PST as per our documentation:
    // https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/
    const date = new Date(new Date().toLocaleDateString("en-US", {
        timeZone: "America/Los_Angeles",
    }));
    const currentMonth = date.getMonth();
    const currentDay = date.getDate();
    const currentYear = date.getFullYear();
    const userSessionInfo = yield db.retrieve(userSessionKey);
    const mostRecentSessionStartDate = userSessionInfo === null || userSessionInfo === void 0 ? void 0 : userSessionInfo.mostRecentSessionStartDate;
    const dailySessionBucketMap = new Map([
        [1, DailySessionBucket.ONE_SESSION],
        [2, DailySessionBucket.TWO_SESSION],
        [3, DailySessionBucket.THREE_SESSION],
        [4, DailySessionBucket.FOUR_SESSION],
        [5, DailySessionBucket.FIVE_SESSION],
        [6, DailySessionBucket.SIX_SESSION],
        [7, DailySessionBucket.SEVEN_SESSION],
        [8, DailySessionBucket.EIGHT_SESSION],
        [9, DailySessionBucket.NINE_SESSION],
    ]);
    let dailySessionBucket = (_a = userSessionInfo === null || userSessionInfo === void 0 ? void 0 : userSessionInfo.dailySessionBucket) !== null && _a !== void 0 ? _a : DailySessionBucket.NO_SESSION_BUCKET;
    let isFirstWithinMonth = false;
    if (mostRecentSessionStartDate &&
        mostRecentSessionStartDate.getMonth() === currentMonth &&
        mostRecentSessionStartDate.getDate() === currentDay &&
        mostRecentSessionStartDate.getFullYear() === currentYear) {
        dailySessionBucket =
            (_b = dailySessionBucketMap.get(dailySessionBucket + 1)) !== null && _b !== void 0 ? _b : DailySessionBucket.TEN_OR_MORE_SESSION;
        yield db.remove(userSessionKey);
        yield db.store(userSessionKey, {
            mostRecentSessionStartDate: date,
            dailySessionBucket,
        });
    }
    else {
        isFirstWithinMonth = !mostRecentSessionStartDate || mostRecentSessionStartDate.getMonth() !== currentMonth;
        yield db.remove(userSessionKey);
        yield db.store(userSessionKey, {
            mostRecentSessionStartDate: date,
            dailySessionBucket: (dailySessionBucket = DailySessionBucket.ONE_SESSION),
        });
    }
    const session = {
        name: "session",
        dailySessionBucket,
        isFirstWithinMonth,
        month: currentMonth + 1,
        day: currentDay,
        year: currentYear,
    };
    metricsEventTarget.dispatchEvent(new TypedCustomEvent("session", session));
}));
//# sourceMappingURL=reportUserSession.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/reporters/reporters.js










/**
 * These metrics reporters must be run once in the top-level DI container. They only depend on globally-available
 * services.
 *
 * The businessEventsReporter is special, it doesn't create any of its own metrics, it simply listens to the global
 * metricsEventTarget and reports metrics emitted there to our backend.
 */
const reportGloballyScopedMetrics = new PartialContainer_PartialContainer({})
    .provides(reportHttpMetrics)
    .provides(reportBenchmarks)
    .provides(reportLensAndAssetDownload);
/**
 * These metrics reporters must be run once for each CameraKitSession DI container created. They may depend on services
 * which are only available at the session scope (e.g. the CameraKitSession itself).
 */
const reportSessionScopedMetrics = new PartialContainer_PartialContainer({})
    .provides(reportUserSession)
    .provides(reportLensView)
    .provides(reportLensWait)
    .provides(reportSessionException)
    .provides(reportLensValidationFailed)
    .provides(reportLegalState);
//# sourceMappingURL=reporters.js.map
;// CONCATENATED MODULE: ./node_modules/browser-fs-access/dist/index.modern.js
const e=(()=>{if("undefined"==typeof self)return!1;if("top"in self&&self!==top)try{top}catch(e){return!1}else if("showOpenFilePicker"in self)return"showOpenFilePicker";return!1})(),t=e?Promise.resolve().then(function(){return l}):Promise.resolve().then(function(){return h});async function n(...e){return(await t).default(...e)}const r=e?Promise.resolve().then(function(){return y}):Promise.resolve().then(function(){return P});async function i(...e){return(await r).default(...e)}const a=e?Promise.resolve().then(function(){return m}):Promise.resolve().then(function(){return k});async function o(...e){return(await a).default(...e)}const s=async e=>{const t=await e.getFile();return t.handle=e,t};var c=async(e=[{}])=>{Array.isArray(e)||(e=[e]);const t=[];e.forEach((e,n)=>{t[n]={description:e.description||"Files",accept:{}},e.mimeTypes?e.mimeTypes.map(r=>{t[n].accept[r]=e.extensions||[]}):t[n].accept["*/*"]=e.extensions||[]});const n=await window.showOpenFilePicker({id:e[0].id,startIn:e[0].startIn,types:t,multiple:e[0].multiple||!1,excludeAcceptAllOption:e[0].excludeAcceptAllOption||!1}),r=await Promise.all(n.map(s));return e[0].multiple?r:r[0]},l={__proto__:null,default:c};function u(e){function t(e){if(Object(e)!==e)return Promise.reject(new TypeError(e+" is not an object."));var t=e.done;return Promise.resolve(e.value).then(function(e){return{value:e,done:t}})}return u=function(e){this.s=e,this.n=e.next},u.prototype={s:null,n:null,next:function(){return t(this.n.apply(this.s,arguments))},return:function(e){var n=this.s.return;return void 0===n?Promise.resolve({value:e,done:!0}):t(n.apply(this.s,arguments))},throw:function(e){var n=this.s.return;return void 0===n?Promise.reject(e):t(n.apply(this.s,arguments))}},new u(e)}const p=async(e,t,n=e.name,r)=>{const i=[],a=[];var o,s=!1,c=!1;try{for(var l,d=function(e){var t,n,r,i=2;for("undefined"!=typeof Symbol&&(n=Symbol.asyncIterator,r=Symbol.iterator);i--;){if(n&&null!=(t=e[n]))return t.call(e);if(r&&null!=(t=e[r]))return new u(t.call(e));n="@@asyncIterator",r="@@iterator"}throw new TypeError("Object is not async iterable")}(e.values());s=!(l=await d.next()).done;s=!1){const o=l.value,s=`${n}/${o.name}`;"file"===o.kind?a.push(o.getFile().then(t=>(t.directoryHandle=e,t.handle=o,Object.defineProperty(t,"webkitRelativePath",{configurable:!0,enumerable:!0,get:()=>s})))):"directory"!==o.kind||!t||r&&r(o)||i.push(p(o,t,s,r))}}catch(e){c=!0,o=e}finally{try{s&&null!=d.return&&await d.return()}finally{if(c)throw o}}return[...(await Promise.all(i)).flat(),...await Promise.all(a)]};var d=async(e={})=>{e.recursive=e.recursive||!1,e.mode=e.mode||"read";const t=await window.showDirectoryPicker({id:e.id,startIn:e.startIn,mode:e.mode});return p(t,e.recursive,void 0,e.skipDirectory)},y={__proto__:null,default:d},f=async(e,t=[{}],n=null,r=!1,i=null)=>{Array.isArray(t)||(t=[t]),t[0].fileName=t[0].fileName||"Untitled";const a=[];let o=null;if(e instanceof Blob&&e.type?o=e.type:e.headers&&e.headers.get("content-type")&&(o=e.headers.get("content-type")),t.forEach((e,t)=>{a[t]={description:e.description||"Files",accept:{}},e.mimeTypes?(0===t&&o&&e.mimeTypes.push(o),e.mimeTypes.map(n=>{a[t].accept[n]=e.extensions||[]})):o?a[t].accept[o]=e.extensions||[]:a[t].accept["*/*"]=e.extensions||[]}),n)try{await n.getFile()}catch(e){if(n=null,r)throw e}const s=n||await window.showSaveFilePicker({suggestedName:t[0].fileName,id:t[0].id,startIn:t[0].startIn,types:a,excludeAcceptAllOption:t[0].excludeAcceptAllOption||!1});!n&&i&&i(s);const c=await s.createWritable();if("stream"in e){const t=e.stream();return await t.pipeTo(c),s}return"body"in e?(await e.body.pipeTo(c),s):(await c.write(await e),await c.close(),s)},m={__proto__:null,default:f},w=async(e=[{}])=>(Array.isArray(e)||(e=[e]),new Promise((t,n)=>{const r=document.createElement("input");r.type="file";const i=[...e.map(e=>e.mimeTypes||[]),...e.map(e=>e.extensions||[])].join();r.multiple=e[0].multiple||!1,r.accept=i||"",r.style.display="none",document.body.append(r);const a=e=>{"function"==typeof o&&o(),t(e)},o=e[0].legacySetup&&e[0].legacySetup(a,()=>o(n),r),s=()=>{window.removeEventListener("focus",s),r.remove()};r.addEventListener("click",()=>{window.addEventListener("focus",s)}),r.addEventListener("change",()=>{window.removeEventListener("focus",s),r.remove(),a(r.multiple?Array.from(r.files):r.files[0])}),"showPicker"in HTMLInputElement.prototype?r.showPicker():r.click()})),h={__proto__:null,default:w},v=async(e=[{}])=>(Array.isArray(e)||(e=[e]),e[0].recursive=e[0].recursive||!1,new Promise((t,n)=>{const r=document.createElement("input");r.type="file",r.webkitdirectory=!0;const i=e=>{"function"==typeof a&&a(),t(e)},a=e[0].legacySetup&&e[0].legacySetup(i,()=>a(n),r);r.addEventListener("change",()=>{let t=Array.from(r.files);e[0].recursive?e[0].recursive&&e[0].skipDirectory&&(t=t.filter(t=>t.webkitRelativePath.split("/").every(t=>!e[0].skipDirectory({name:t,kind:"directory"})))):t=t.filter(e=>2===e.webkitRelativePath.split("/").length),i(t)}),"showPicker"in HTMLInputElement.prototype?r.showPicker():r.click()})),P={__proto__:null,default:v},b=async(e,t={})=>{Array.isArray(t)&&(t=t[0]);const n=document.createElement("a");let r=e;"body"in e&&(r=await async function(e,t){const n=e.getReader(),r=new ReadableStream({start:e=>async function t(){return n.read().then(({done:n,value:r})=>{if(!n)return e.enqueue(r),t();e.close()})}()}),i=new Response(r),a=await i.blob();return n.releaseLock(),new Blob([a],{type:t})}(e.body,e.headers.get("content-type"))),n.download=t.fileName||"Untitled",n.href=URL.createObjectURL(await r);const i=()=>{"function"==typeof a&&a()},a=t.legacySetup&&t.legacySetup(i,()=>a(),n);return n.addEventListener("click",()=>{setTimeout(()=>URL.revokeObjectURL(n.href),3e4),i()}),n.click(),null},k={__proto__:null,default:b};

;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens-client-interface/exif.js
const JPEG_ID = 0xffd8;
const APP1_MARKER = 0xffe1;
const EXIF_ID = 0x45786966;
const LITTLE_ENDIAN = 0x4949;
const ORIENTATION_TAG_OFFSET = 0x0112;
// http://sylvana.net/jpegcrop/exif_orientation.html
var Orientation;
(function (Orientation) {
    Orientation[Orientation["TopLeft"] = 1] = "TopLeft";
    Orientation[Orientation["TopRight"] = 2] = "TopRight";
    Orientation[Orientation["BottomRight"] = 3] = "BottomRight";
    Orientation[Orientation["BottomLeft"] = 4] = "BottomLeft";
    Orientation[Orientation["LeftTop"] = 5] = "LeftTop";
    Orientation[Orientation["RightTop"] = 6] = "RightTop";
    Orientation[Orientation["RightBottom"] = 7] = "RightBottom";
    Orientation[Orientation["LeftBottom"] = 8] = "LeftBottom";
})(Orientation || (Orientation = {}));
/**
 * Parses JPEG EXIF metadata and returns Orientation tag of it, or undefined if not applicable.
 *
 * Adopted from https://stackoverflow.com/a/32490603
 *
 * @internal
 * @param data JPEG binary.
 * @returns Orientation tag value or undefined.
 */
function extractJpegOrientationTag(data) {
    const view = new DataView(data);
    if (view.getUint16(0, false) !== JPEG_ID)
        return undefined;
    const length = view.byteLength;
    let offset = 2;
    while (offset < length) {
        if (view.getUint16(offset + 2, false) <= 8)
            return undefined;
        let marker = view.getUint16(offset, false);
        offset += 2;
        if (marker === APP1_MARKER) {
            if (view.getUint32((offset += 2), false) !== EXIF_ID) {
                return undefined;
            }
            let little = view.getUint16((offset += 6), false) === LITTLE_ENDIAN;
            offset += view.getUint32(offset + 4, little);
            let tags = view.getUint16(offset, little);
            offset += 2;
            for (let i = 0; i < tags; i++) {
                if (view.getUint16(offset + i * 12, little) === ORIENTATION_TAG_OFFSET) {
                    return view.getUint16(offset + i * 12 + 8, little);
                }
            }
        }
        else if ((marker & 0xff00) !== 0xff00) {
            break;
        }
        else {
            offset += view.getUint16(offset, false);
        }
    }
    return undefined;
}
//# sourceMappingURL=exif.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens-client-interface/imagePicker.js




const imagePicker_logger = getLogger("lensClientInterfaceImagePicker");
// Common MIME types supported by all browsers as per:
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
const imagePicker_mimeTypes = {
    image: [
        "image/avif",
        "image/bmp",
        "image/gif",
        "image/jpeg",
        "image/png",
        "image/svg+xml",
        "image/tiff",
        "image/webp",
    ],
    video: [
        "video/3gpp",
        "video/3gpp2",
        "video/mp2t",
        "video/mp4",
        "video/mpeg",
        "video/ogg",
        "video/quicktime",
        "video/webm",
        "video/x-msvideo",
    ],
};
function* enumerateSupportedVideoTypes(types) {
    // test video element to perform MIME types support check
    const testVideoElement = typeof document !== "undefined" ? document.createElement("video") : undefined;
    for (const type of types) {
        if ((testVideoElement === null || testVideoElement === void 0 ? void 0 : testVideoElement.canPlayType(type)) || false) {
            yield type;
        }
    }
}
function readFileAsArrayBuffer(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.addEventListener("load", (event) => {
            // Safety: target.result is always an ArrayBuffer because we read file using readAsArrayBuffer()
            resolve(event.target.result);
        });
        reader.addEventListener("error", (event) => {
            reject(event.target.error);
        });
        reader.readAsArrayBuffer(file);
    });
}
function getMimeType({ ImageEnabled, VideoEnabled }) {
    const types = [];
    if (ImageEnabled === "1")
        types.push(...imagePicker_mimeTypes.image);
    if (VideoEnabled === "1")
        types.push(...enumerateSupportedVideoTypes(imagePicker_mimeTypes.video));
    if (types.length === 0) {
        throw new Error("Unknown media type requested");
    }
    return types;
}
function getOrientation(data, lensCore) {
    var _a;
    const orientationMap = {
        [1 /* Orientation.TopLeft */]: lensCore.ExternalMediaOrientation.CW0,
        [2 /* Orientation.TopRight */]: lensCore.ExternalMediaOrientation.CW0,
        [3 /* Orientation.BottomRight */]: lensCore.ExternalMediaOrientation.CW180,
        [4 /* Orientation.BottomLeft */]: lensCore.ExternalMediaOrientation.CW180,
        [5 /* Orientation.LeftTop */]: lensCore.ExternalMediaOrientation.CW90,
        [6 /* Orientation.RightTop */]: lensCore.ExternalMediaOrientation.CW90,
        [7 /* Orientation.RightBottom */]: lensCore.ExternalMediaOrientation.CW270,
        [8 /* Orientation.LeftBottom */]: lensCore.ExternalMediaOrientation.CW270,
    };
    try {
        return orientationMap[(_a = extractJpegOrientationTag(data)) !== null && _a !== void 0 ? _a : 1 /* Orientation.TopLeft */];
    }
    catch (error) {
        imagePicker_logger.info("Error occured while reading EXIF orientation tag", error);
        return lensCore.ExternalMediaOrientation.CW0;
    }
}
/**
 * Shows file open dialog to allow user to select image/video and provides the selection to LensCore.
 *
 * @internal
 */
function pickClientImage(clientInterfaceData, lensCore) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        const mimeTypes = getMimeType(clientInterfaceData);
        imagePicker_logger.debug(`Opening file dialog for MIME types: ${mimeTypes}`);
        const file = yield n({ mimeTypes });
        imagePicker_logger.debug(`Selected file MIME type: ${file.type}`);
        const data = yield readFileAsArrayBuffer(file);
        if (file.type.startsWith("image/")) {
            lensCore.provideExternalImage({
                data,
                orientation: getOrientation(data, lensCore),
                // As per Corvyn: both iOS and Android clients have the ability to pick out individual faces
                // from an image to apply the effect on, using each of their native face detectors (not using LensCore).
                // That's what the faceRects is for. For now, we can just apply the effect to the whole image (so face rect
                // [[0,0][1,1]]). In future, in order to be able to pick out individual faces in the media picker, we could:
                // - hook up some external web face tracking library
                // - make LensCore to expose face tracker to external clients
                faceRects: [
                    {
                        origin: {
                            x: 0,
                            y: 0,
                        },
                        size: {
                            width: 1,
                            height: 1,
                        },
                    },
                ],
            });
        }
        else {
            lensCore.provideExternalVideo({
                data,
                orientation: lensCore.ExternalMediaOrientation.CW0,
            });
        }
    });
}
//# sourceMappingURL=imagePicker.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/lens-client-interface/lensClientInterface.js






const lensClientInterface_logger = getLogger("lensClientInterface");
/**
 * Registers client interface handler in LensCore.
 *
 * @internal
 * @param lensCore LensCore instance to register in.
 * @param sessionErrors EventTarget to dispatch errors in.
 */
const registerLensClientInterfaceHandler = Injectable("registerLensClientInterfaceHandler", [lensCoreFactory.token], (lensCore) => {
    // Make sure we are compatible with previous LensCore versions
    if (!lensCore.setClientInterfaceRequestHandler) {
        lensClientInterface_logger.warn("Current LensCore version doesn't support lens client interface requests");
        return;
    }
    lensCore.setClientInterfaceRequestHandler(({ data, interfaceControl, interfaceAction }) => tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        if (interfaceControl === lensCore.InterfaceControl.ImagePicker &&
            interfaceAction === lensCore.InterfaceAction.Show) {
            yield pickClientImage(data, lensCore).catch((error) => {
                lensClientInterface_logger.error(lensImagePickerError("Failed to pick an image.", error));
            });
        }
    }));
});
//# sourceMappingURL=lensClientInterface.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/CameraKit.js



















const CameraKit_logger = getLogger("CameraKit");
const CameraKit_log = errorLoggingDecorator(CameraKit_logger);
/**
 * Metrics event names that are exposed to apps.
 */
const publicMetricsEventNames = ["lensView", "lensWait"];
/**
 * The entry point to the CameraKit SDK's API. Most of CameraKit's features are accessed via this class.
 *
 * Applications obtain an instance of CameraKit by calling {@link bootstrapCameraKit}.
 *
 * @example
 * ```ts
 * const cameraKit = await bootstrapCameraKit(config)
 * ```
 *
 * Then this class can be used to:
 * - Create a {@link CameraKitSession} instance, which provides the API for setting up media inputs, applying Lenses,
 * and obtaining rendered `<canvas>` outputs.
 * - Query for lenses using {@link LensRepository}.
 * - Listen for lens usage metrics events using {@link MetricsEventTarget}.
 *
 * @category Rendering
 * @category Lenses
 */
class CameraKit {
    /** @internal */
    constructor(
    /**
     * Used to query for lenses and lens groups.
     */
    lensRepository, lensCore, container, allMetrics) {
        this.lensRepository = lensRepository;
        this.lensCore = lensCore;
        this.container = container;
        /**
         * Business metrics (e.g. each time a lens is viewed) are emitted here.
         */
        this.metrics = new TypedEventTarget();
        this.lenses = { repository: this.lensRepository };
        // Proxy only a subset of all metrics events to the public-facing emitter -- applications don't need to
        // know about most events.
        publicMetricsEventNames.forEach((eventName) => {
            allMetrics.addEventListener(eventName, (e) => this.metrics.dispatchEvent(e));
        });
    }
    /**
     * Create a CameraKitSession.
     *
     * This initializes the rendering engine and returns a {@link CameraKitSession} instance, which provides access
     * to Lens rendering.
     *
     * @example
     * ```ts
     * const cameraKit = await bootstrapCameraKit(config)
     * const session = await cameraKit.createSession()
     *
     * const lens = await cameraKit.lensRepository.loadLens(lensId, groupId)
     * session.applyLens(lens)
     * ```
     *
     * @param options
     */
    createSession({ liveRenderTarget, renderWhileTabHidden, } = {}) {
        return tslib_es6_awaiter(this, void 0, void 0, function* () {
            // Any error happened during lens rendering can be processed by subscribing to sessionErrors
            const exceptionHandler = (e) => CameraKit_logger.error(lensExecutionError("Lens execution error.", e));
            /**
             * If/when we add support for multiple concurrent sessions, we'll need to create a copy of the LensCore WASM
             * module. If we move managing web workers into JS, spawing a new worker thread with its own copy of LensCore
             * probably becomes a lot more straightforward.
             *
             * Currently chromium has a bug preventing rendering while tab is hidden when LensCore is in worker mode.
             * In order to process tab while it is hidden, the current stopgap is to pass in renderWhileTabHidden as true,
             * which will initiate session in non worker mode, and set the RenderLoopMode to `SetTimeout`.
             */
            yield new Promise((onSuccess, onFailure) => {
                this.lensCore.initialize({
                    canvas: liveRenderTarget,
                    shouldUseWorker: !renderWhileTabHidden && this.container.get(configurationToken).shouldUseWorker,
                    exceptionHandler,
                    onSuccess,
                    onFailure,
                });
            });
            yield new Promise((onSuccess, onFailure) => {
                this.lensCore.setRenderLoopMode({
                    mode: renderWhileTabHidden
                        ? this.lensCore.RenderLoopMode.SetTimeout
                        : this.lensCore.RenderLoopMode.RequestAnimationFrame,
                    onSuccess,
                    onFailure,
                });
            });
            // Each session gets its own DI Container – some Services provided by this Container may be shared with the
            // root CameraKit Container, but others may be scoped to the session by passing their token to `copy()`.
            const sessionContainer = this.container
                // Right now this is a no-op. If/when we add support for multiple concurrent sessions, we may end up
                // scoping LensCore to the session.
                .copy()
                .provides(sessionStateFactory)
                .provides(lensStateFactory)
                .provides(lensKeyboardFactory)
                .provides(cameraKitSessionFactory)
                .run(registerLensAssetsProvider)
                .run(registerLensClientInterfaceHandler)
                // We'll run a PartialContainer containing reporters for session-scoped metrics. Running this container
                // allows each metric reporter to initialize itself (e.g. by adding event listeners to detect when certain
                // actions occur).
                .run(reportSessionScopedMetrics)
                // UriHandlers may have dependencies on session-scoped services (e.g. LensState, LensKeyboard), so they'll
                // be registered with LensCore here.
                .run(registerUriHandlers);
            return sessionContainer.get(cameraKitSessionFactory.token);
        });
    }
}
__decorate([
    CameraKit_log,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], CameraKit.prototype, "createSession", null);
/** @internal */
const cameraKitFactory = Injectable("CameraKit", [lensRepositoryFactory.token, metricsEventTargetFactory.token, lensCoreFactory.token, CONTAINER], (lensRepository, metrics, lensCore, container) => new CameraKit(lensRepository, lensCore, container, metrics));
//# sourceMappingURL=CameraKit.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/assertPlatformSupported.js


/**
 * Assert current platform is supported.
 */
function assertPlatformSupported() {
    const canvas = document.createElement("canvas");
    assert(!!canvas.getContext("webgl2") || !!canvas.getContext("webgl"), platformNotSupportedError("Cannot bootstrap the SDK because the browser does not support WebGL canvas rendering context."));
}
//# sourceMappingURL=assertPlatformSupported.js.map
;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/native.js
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
/* harmony default export */ const esm_browser_native = ({
  randomUUID
});
;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).slice(1));
}

function unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

function stringify(arr, offset = 0) {
  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const esm_browser_stringify = ((/* unused pure expression or super */ null && (stringify)));
;// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js




function v4(options, buf, offset) {
  if (esm_browser_native.randomUUID && !buf && !options) {
    return esm_browser_native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return unsafeStringify(rnds);
}

/* harmony default export */ const esm_browser_v4 = (v4);
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/metrics/businessEventsReporter.js











const businessEventsReporter_logger = getLogger("BusinessEventsReporter");
// CameraKit's prod metrics endpoint.
// See: https://github.sc-corp.net/Snapchat/pb_schema/blob/2a966db/proto/camera_kit/v3/service.proto#L133
const BUSINESS_EVENTS_ENDPOINT = "https://api-kit.snapchat.com/com.snap.camerakit.v3.Metrics/metrics/business_events";
// These values are (currently) arbitrarily selected.
// TODO: Once we have gathered a sufficient quantity of metrics data, we should tune these numbers to ensure we're
// operating with the right cost vs. staying under the `keepalive` request body limit of 64 kibibytes.
const BUSINESS_EVENT_BATCH_MAX_SIZE = 100;
const BUSINESS_EVENT_BATCH_MAX_AGE_MS = 5000;
function listenAndReport(metricsEventTarget, metricsHandler, eventHandlers) {
    const sessionId = esm_browser_v4();
    businessEventsReporter_logger.log(`Session ID: ${sessionId}`);
    const handler = new HandlerChainBuilder(metricsHandler)
        .map(createMappingHandler((events) => {
        const body = {
            batchEvents: {
                "@type": "com.snapchat.analytics.blizzard.ServerEventBatch",
                serverEvents: events,
            },
        };
        return new Request(BUSINESS_EVENTS_ENDPOINT, {
            method: "POST",
            body: JSON.stringify(body),
            credentials: "include",
            // Setting this to true makes fetch behave like `Navigator.sendBeacon` – that is, the request
            // will still be made even if the page terminates.
            // https://developer.mozilla.org/en-US/docs/Web/API/fetch
            keepalive: true,
        });
    }))
        .map(createBatchingHandler({
        batchReduce: (previousBundle, businessEvent) => {
            const bundle = previousBundle !== null && previousBundle !== void 0 ? previousBundle : [];
            bundle.push(businessEvent);
            return bundle;
        },
        isBatchComplete: (bundle) => bundle.length >= BUSINESS_EVENT_BATCH_MAX_SIZE,
        maxBatchAge: BUSINESS_EVENT_BATCH_MAX_AGE_MS,
    })).handler;
    const makeBlizzardEvent = (event) => {
        return Object.assign(Object.assign({}, event), { cameraKitEventBase: CameraKitEventBase.fromPartial({
                kitEventBase: KitEventBase.fromPartial({
                    locale: cameraKitUserAgent.locale,
                    kitVariant: KitType.CAMERA_KIT_WEB,
                    kitVariantVersion: cameraKitUserAgent.sdkShortVersion,
                    kitClientTimestampMillis: Date.now(),
                }),
                deviceCluster: 0,
                cameraKitVersion: cameraKitUserAgent.sdkLongVersion,
                lensCoreVersion: cameraKitUserAgent.lensCoreVersion,
                deviceModel: cameraKitUserAgent.deviceModel,
                cameraKitVariant: CameraKitVariant.CAMERA_KIT_VARIANT_PARTNER,
                cameraKitFlavor: cameraKitEvents_CameraKitFlavor.CAMERA_KIT_FLAVOR_DEBUG,
                // We overload appId, using the origin instead because it's nice and human-readable (our backed adds
                // the true appId as oauth_client_id before forwarding events to Blizzard).
                appId: cameraKitUserAgent.origin,
                deviceConnectivity: cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_WIFI,
                sessionId: sessionId,
            }) });
    };
    const sendServerEvent = (eventName, eventData) => {
        return handler(ServerEvent.fromPartial({
            eventName,
            osType: cameraKitUserAgent.osType,
            osVersion: cameraKitUserAgent.osVersion,
            maxSequenceIdOnInstance: 0,
            sequenceId: 0,
            eventData,
        }));
    };
    entries(eventHandlers).forEach(([eventType, createEventData]) => {
        metricsEventTarget.addEventListener(eventType, ({ detail }) => {
            // Safety: When iterating over object keys in a mapped type, we lose the association between the key type
            // and the value type – at each iteration, the key type is a union of all possible keys and the value type
            // is a union of all possible values. When the value is a function with an argument, and that argument
            // depends on the key type (which is a union), the contravariance of the argument type means that the union
            // becomes an intersection. In our case here, this means the compiler expects each argument to contain all
            // properties from all event types. The cast is safe because the mapped `EventHandlers` type ensures that
            // `createEventData` takes an argument of the type corresponding its key's `eventType`'s event detail.
            const [eventName, eventData] = createEventData(makeBlizzardEvent(detail));
            sendServerEvent(eventName, eventData);
        });
    });
}
const businessEventsReporterFactory = Injectable("businessEventsReporter", [metricsEventTargetFactory.token, metricsHandlerFactory.token], (metricsEventTarget, metricsHandler) => {
    /**
     * This defines a mapping from a business event's external name (the name we document in public API docs), to
     * its internal representation as a Blizzard ServerEvent.
     *
     * It is important that we do this, since the naming of these internal business events are unintuitive and will
     * not make sense to SDK users.
     *
     * To specify the internal event, we must give the ServerEvent's eventName, the specific property name which
     * contains the event data (this is a "oneof" property on ServerEvent), and use the correct event type's
     * `fromPartial` method (this is generated from the ServerEvent protobuf).
     *
     * These events are documented here:
     * https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/
     *
     * They are defined in code here:
     * https://github.sc-corp.net/Snapchat/snapchat/tree/master/blizzard/schema/blizzard-schema/
     *  codeGen/src/main/java/com/snapchat/analytics/schema/events/cameraKit
     */
    listenAndReport(metricsEventTarget, metricsHandler, {
        assetDownload: (event) => [
            "CAMERA_KIT_ASSET_DOWNLOAD",
            { cameraKitAssetDownload: CameraKitAssetDownload.fromPartial(event) },
        ],
        assetValidationFailed: (event) => [
            "CAMERA_KIT_ASSET_VALIDATION_FAILED",
            { cameraKitAssetValidationFailed: CameraKitAssetValidationFailed.fromPartial(event) },
        ],
        benchmarkComplete: (event) => [
            "CAMERA_KIT_WEB_BENCHMARK_COMPLETE",
            { cameraKitWebBenchmarkComplete: CameraKitWebBenchmarkComplete.fromPartial(event) },
        ],
        exception: (event) => [
            "CAMERA_KIT_EXCEPTION",
            { cameraKitException: CameraKitException.fromPartial(event) },
        ],
        legalPrompt: (event) => [
            "CAMERA_KIT_LEGAL_PROMPT",
            { cameraKitLegalPrompt: CameraKitLegalPrompt.fromPartial(event) },
        ],
        lensDownload: (event) => [
            "CAMERA_KIT_LENS_DOWNLOAD",
            { cameraKitLensDownload: CameraKitLensDownload.fromPartial(event) },
        ],
        lensView: (event) => [
            "CAMERA_KIT_WEB_LENS_SWIPE",
            { cameraKitWebLensSwipe: CameraKitWebLensSwipe.fromPartial(event) },
        ],
        lensWait: (event) => [
            "CAMERA_KIT_LENS_SPIN",
            { cameraKitLensSpin: CameraKitLensSpin.fromPartial(event) },
        ],
        lensContentValidationFailed: (event) => [
            "CAMERA_KIT_LENS_CONTENT_VALIDATION_FAILED",
            {
                cameraKitLensContentValidationFailed: CameraKitLensContentValidationFailed.fromPartial(event),
            },
        ],
        session: (event) => [
            "CAMERA_KIT_SESSION",
            { cameraKitSession: cameraKitEvents_CameraKitSession.fromPartial(event) },
        ],
    });
});
//# sourceMappingURL=businessEventsReporter.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/logger/registerLogEntriesSubscriber.js





/**
 * The factory subscribes to log entry events and, based on the configured log level,
 * forwards matching log entries to the logger specified in the CameraKit configuration object.
 *
 * @internal
 */
const registerLogEntriesSubscriber = Injectable("registerLogEntriesSubscriber", [configurationToken, logEntriesFactory.token], (configuration, logEntries) => {
    logEntries
        .pipe(filter((entry) => logLevelMap[entry.level] >= logLevelMap[configuration.logLevel]))
        .subscribe((logEntry) => {
        switch (configuration.logger) {
            case "console":
                console[logEntry.level](`[CameraKit.${logEntry.module}]`, ...logEntry.messages);
                break;
        }
    });
});
//# sourceMappingURL=registerLogEntriesSubscriber.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/bootstrapCameraKit.js

































const bootstrapCameraKit_logger = getLogger("bootstrapCameraKit");
// The following errors are not wrapped with BootstrapError and bubble up as is.
const nonWrappableErrors = [
    "ConfigurationError",
    "PlatformNotSupportedError",
];
/**
 * Returns true if given error has to be wrapped with BoostrapError.
 */
function shouldWrapError(error) {
    if (error instanceof Error) {
        return !nonWrappableErrors.some((name) => error.name === name);
    }
    return true;
}
/**
 * Bootstrap CameraKit. This will download the WebAssembly code which powers CameraKit's rendering engine, and return
 * an instance of {@link CameraKit}.
 *
 * CameraKit must be provided with some configuration (the application's API token), and there are some additional
 * configurations which are optional.
 *
 * Descriptions of the available configurations can be found in the documentation for
 * {@link CameraKitBootstrapConfiguration}
 *
 * ---
 *
 * There is also a second, more advanced way to modify CameraKit to provide greater flexibility to support less common
 * use cases.
 *
 * This requires some knowledge of CameraKit's dependency injection system, and allows applications to provide their
 * own custom implementations of certain CameraKit components. This functionality will only be needed by applications
 * with very specific, more advanced requirements.
 *
 * @example
 * ```ts
 * // The most common way to bootstrap:
 * const cameraKit = await bootstrapCameraKit({ apiToken: myApiToken })
 *
 * // For special advanced use-cases, it is possible to provide custom implementations for certain CameraKit components.
 * const cameraKit = await bootstrapCameraKit(config, (container) => {
 *   return container.provides(myCustomRemoteMediaAssetLoaderFactory)
 * })
 * ```
 *
 * @param configuration Configure CameraKit with e.g. credentials, global resource endpoints, etc.
 * @param provide Optional function that can make modifications to CameraKit's root DI container.
 * @returns A {@link CameraKit} instance, which is the entry point to CameraKit's API.
 *
 * @throws
 *  - {@link ConfigurationError} when provided configuration object is invalid
 *  - {@link PlatformNotSupportedError} when current platform is not supported by CameraKit
 *  - {@link BootstrapError} when a failure occurs while initializing CameraKit and downloading the render engine
 * WebAssembly binary.
 *
 * @category Bootstrapping and Configuration
 */
function bootstrapCameraKit(configuration, provide) {
    return tslib_es6_awaiter(this, void 0, void 0, function* () {
        try {
            const startTimeMs = performance.now();
            assert(isSafeString(configuration.apiToken), configurationError("Unsafe apiToken"));
            const configurationFactory = createCameraKitConfigurationFactory(configuration);
            // Public container holds services which applications can overwrite with their own implementations.
            const defaultPublicContainer = Container.provides(configurationFactory)
                .provides(defaultFetchHandlerFactory)
                .provides(remoteMediaAssetLoaderFactory)
                .provides(lensSourcesFactory)
                .provides(uriHandlersFactory);
            const publicContainer = provide ? provide(defaultPublicContainer) : defaultPublicContainer;
            // Now that the client's provide() function has completed and the configuration override is ready,
            // we create another container to initialize the logger. This ensures that logging is available
            // as we continue bootstrapping. We don't initialize the logger as part of the defaultPublicContainer
            // because we don't want applications to provide their own logger implementations,
            // and we're not interested in errors thrown by their provide() function.
            // Below is the minimum required container to report errors to Blizzard.
            const telemetryContainer = Container.provides(publicContainer)
                .provides(logEntriesFactory)
                .provides(cameraKitServiceFetchHandlerFactory)
                .provides(metricsEventTargetFactory)
                .provides(metricsHandlerFactory)
                .provides(operationalMetricReporterFactory)
                .provides(reportGlobalException)
                .run(businessEventsReporterFactory)
                .run(registerLogEntriesSubscriber);
            // Run the exception logger so that it can subscribe to log events -- we can't use `Container.run()` because
            // reportGlobalException is also used as a dependency by other Services (and run does not provide Services,
            // it just runs them once).
            telemetryContainer.get(reportGlobalException.token);
            // At this point, logger is configured to report to console and Blizzard.
            assertPlatformSupported();
            // LensCore is a foundational component which must be created asynchronously.
            // But it's annoying for every consumer of LensCore to have to wait on Promise<LensCore>
            // (which means they become async themselves). So we'll create a DI container which provides Promise<LensCore>,
            // wait for that promise once here, then create a new DI container that just contains LensCore.
            const lensCore = yield telemetryContainer.provides(lensCoreFactory).get(lensCoreFactory.token);
            const container = telemetryContainer
                .provides(Injectable(lensCoreFactory.token, () => lensCore))
                .provides(remoteConfigurationFactory)
                .provides(lensPersistenceStoreFactory)
                .provides(deviceDependentAssetLoaderFactory)
                .provides(staticAssetLoaderFactory)
                .provides(lensAssetRepositoryFactory)
                .provides(lensRepositoryFactory)
                .provides(legalPromptFactory)
                .provides(legalStateFactory)
                .provides(cameraKitFactory)
                // We'll run a PartialContainer containing reporters for globally-scoped metrics. Running this container
                // allows each metric reporter to initialize itself (e.g. by adding event listeners to detect when certain
                // actions occur). This PartialContainer also includes the service which listens to locally-reported metrics
                // and sends them to our backend.
                .run(reportGloballyScopedMetrics);
            const cameraKit = container.get(cameraKitFactory.token);
            const bootstrapTimeMs = performance.now() - startTimeMs;
            const reporter = container.get(operationalMetricReporterFactory.token);
            reporter.timer("bootstrap_time", bootstrapTimeMs);
            return cameraKit;
        }
        catch (error) {
            if (shouldWrapError(error)) {
                error = bootstrapError("Failed to bootstrap Camera Kit.", error);
            }
            bootstrapCameraKit_logger.error(error);
            throw error;
        }
    });
}
/**
 * Extensions offer a way to provide custom implementations of certain parts of the CameraKit SDK.
 *
 * This enables more advanced use-cases, in which the default behavior of the SDK is substantially altered. For example,
 * replacing the default implementation that loads remote lens assets with a custom implementation that returns
 * different assets based on some business logic within the application.
 *
 * An extension is implemented as a [PartialContainer] – a collection of factory functions, each with its own
 * dependencies, which each provide some "Service." A Service can be of any type, and the CameraKit SDK defines its
 * own Services, some of which can be overridden by providing a custom implementation of the type via an extension.
 *
 * Here's an example of how extensions might be used:
 * ```ts
 * import { bootstrapCameraKit, createExtension, remoteMediaAssetLoaderFactory } from '@snap/camera-kit'
 *
 * const myCustomRemoteAssetLoader = Injectable(
 *   remoteMediaAssetLoaderFactory.token,
 *   [remoteMediaAssetLoaderFactory.token] as const,
 *   (defaultLoader: AssetLoader): AssetLoader => {
 *     return async (asset, lens) => {
 *       if (lens?.id === MY_SPECIAL_LENS) {
 *         return (await fetch('my/asset.glb')).arrayBuffer()
 *       }
 *       return defaultLoader(asset, lens)
 *     }
 *   },
 * )
 *
 * const myExtension = createExtension().provides(myCustomeRemoteAssetLoader)
 * const cameraKit = bootstrapCameraKit(config, container => container.provides(myExtension))
 * ```
 *
 * This also enables greater modularity – the person/team creating the extension can do so in their own package, which
 * could be shared by many applications that all require the same functionality.
 *
 * @returns A {@link PartialContainer} which can be used to create a collection of Services, and can later be provided
 * to CameraKit's DI container during {@link bootstrapCameraKit}.
 *
 * @category Bootstrapping and Configuration
 */
function createExtension() {
    return new PartialContainer({});
}
//# sourceMappingURL=bootstrapCameraKit.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/extensions/extensionRequestContext.js



function getExtensionRequestContext() {
    return ExtensionRequestContext.encode({
        userAgent: cameraKitUserAgent.userAgent,
        locale: fullLocale,
    }).finish();
}
/**
 * Extension request context.
 */
const extensionRequestContext = getExtensionRequestContext();
//# sourceMappingURL=extensionRequestContext.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/media-sources/FunctionSource.js


const getYUVImageData = (canvas, lensCore) => __awaiter(void 0, void 0, void 0, function* () {
    const { width, height } = canvas;
    // A YUV buffer has lower-res UV channels, so the total number of bytes works out like so:
    const outputBuffer = new ArrayBuffer((width * height * 3) / 2);
    yield new Promise((onSuccess, onFailure) => {
        lensCore.imageToYuvBuffer({ image: canvas, width, height, outputBuffer, onSuccess, onFailure });
    });
    const pixels = new Uint8ClampedArray(outputBuffer);
    return new ImageData(pixels, width, height);
});
const getRGBImageData = (output, imageReader2D) => {
    if (imageReader2D === null)
        return new ImageData(0, 0);
    imageReader2D.drawImage(output, 0, 0);
    return imageReader2D.getImageData(0, 0, output.width, output.height);
};
const getImageBitmap = (imageData, format) => __awaiter(void 0, void 0, void 0, function* () {
    switch (format) {
        case "nv12":
        case "yuv":
            if (!window.VideoFrame)
                return Promise.reject(new Error(`Cannot process frame. ImageData in ${format} ` + `is not supported by this browser.`));
            const frame = new VideoFrame(imageData.data.buffer, {
                format: "NV12",
                codedWidth: imageData.width,
                codedHeight: imageData.height,
                timestamp: 0,
            });
            return createImageBitmap(frame);
        case "rgb":
            return createImageBitmap(imageData);
    }
});
/**
 * Creates a {@link CameraKitSource} from a function which provides per-frame pixel data to CameraKit.
 *
 * @param sourceFunction This function will be called in a requestAnimationFrame loop. Each time it is called, it is
 * passed a `render` function. It may call `render` and CameraKit will process the pixel data passed to `render` and
 * return a Promise of the processed pixels (along with rendering them to the normal output canvases).
 * @param options
 * @param options.cameraType By default we set this to 'front', which is the camera type most Lenses expect.
 *
 * @internal
 */
const createFunctionSource = (sourceFunction, options = {}) => {
    let width = 0;
    let height = 0;
    let shouldProcessFrame = true;
    // We require an auxiliary canvas that we can use to read back pixel data (unless we're in YUV mode, in which case
    // we use LensCore to convert between formats and we don't need this canvas).
    const imageReaderCanvas = document.createElement("canvas");
    const imageReader2D = imageReaderCanvas.getContext("2d");
    const subscriber = {
        onAttach: (source, lensCore, reportError) => {
            const outputs = lensCore.getOutputCanvases();
            const output = {
                live: outputs[lensCore.CanvasType.Preview.value],
                capture: outputs[lensCore.CanvasType.Capture.value],
            };
            const processFrame = (source, lensCore, reportError) => requestAnimationFrame(() => __awaiter(void 0, void 0, void 0, function* () {
                var _a;
                if (!shouldProcessFrame)
                    return;
                try {
                    yield sourceFunction(({ format, imageData, timestampMillis }) => {
                        const frameOutput = new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
                            const inputFrame = yield getImageBitmap(imageData, format !== null && format !== void 0 ? format : "rgb");
                            if (inputFrame.width !== width || inputFrame.height !== height) {
                                width = imageReaderCanvas.width = inputFrame.width;
                                height = imageReaderCanvas.height = inputFrame.height;
                                // We don't await this promise, because we want to continue to process frames and
                                // let LensCore manage the concurrency between setting resolution and processing a
                                // frame.
                                source.setRenderSize(width, height);
                            }
                            lensCore.processFrame({
                                inputFrame,
                                timestampMillis,
                                onSuccess: () => __awaiter(void 0, void 0, void 0, function* () {
                                    // Closing releases graphics resources associated with the frame, now that is
                                    // has been processed.
                                    inputFrame.close();
                                    switch (format !== null && format !== void 0 ? format : "rgb") {
                                        case "nv12":
                                        case "yuv":
                                            const [live, capture] = yield Promise.all([
                                                getYUVImageData(output.live, lensCore),
                                                getYUVImageData(output.capture, lensCore),
                                            ]).catch((error) => {
                                                reject(error);
                                                return [undefined, undefined];
                                            });
                                            // if either of these is undefined, we'll have already rejected
                                            // the promise, so we can return.
                                            if (!live || !capture)
                                                return;
                                            return resolve({ live, capture });
                                        case "rgb":
                                            return resolve({
                                                live: getRGBImageData(output.live, imageReader2D),
                                                capture: getRGBImageData(output.capture, imageReader2D),
                                            });
                                    }
                                }),
                                onFailure: (error) => {
                                    inputFrame.close();
                                    reject(error);
                                },
                            });
                        }));
                        // Even if there's an error processing the frame, we do want to attempt to process the next
                        // frame. We expect `sourceFunction` to handle a rejected `frameOutput` Promise.
                        frameOutput.finally(() => processFrame(source, lensCore, reportError));
                        return frameOutput;
                    });
                }
                catch (error) {
                    reportError(new Error("Failure to process frame, which was not handled by the provided " +
                        `MediaSourceFunction ${(_a = sourceFunction.name) !== null && _a !== void 0 ? _a : "anonymous"}.`, { cause: error }));
                }
            }));
            processFrame(source, lensCore, reportError);
        },
        onDetach: () => {
            shouldProcessFrame = false;
        },
    };
    return new CameraKitSource({ useManualFrameProcessing: true }, subscriber, options);
};
//# sourceMappingURL=FunctionSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/media-sources/ImageSource.js

/**
 * Create a {@link CameraKitSource} from an
 * [HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement).
 *
 * @param image Image element.
 * @param options
 * @param options.cameraType By default we set this to 'front', which is the camera type most Lenses expect.
 * @param options.fpsLimit By default we set no limit on FPS.
 *
 * @category Rendering
 */
function createImageSource(image, options = {}) {
    return new CameraKitSource({
        media: image,
    }, {
        onAttach: (source) => {
            // If the image element has no explicit width/height (which may be the case for elements that have not
            // been added to the DOM or had their size set explicitly), we'll render at the image's native
            // resolution.
            const [width, height] = image.width === 0 || image.height === 0
                ? [image.naturalWidth, image.naturalHeight]
                : [image.width, image.height];
            return source.setRenderSize(width, height);
        },
    }, options);
}
//# sourceMappingURL=ImageSource.js.map
;// CONCATENATED MODULE: ./node_modules/@snap/camera-kit/lib/index.js


console.info(`SDK: ${environment_namespaceObject.l} \
(${lensCoreWasmVersions_namespaceObject.i8}/${lensCoreWasmVersions_namespaceObject.c$})`);



























//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ./src/main.js


    (async function(){
    var cameraKit = await bootstrapCameraKit({ apiToken: 'eyJhbGciOiJIUzI1NiIsImtpZCI6IkNhbnZhc1MyU0hNQUNQcm9kIiwidHlwIjoiSldUIn0.eyJhdWQiOiJjYW52YXMtY2FudmFzYXBpIiwiaXNzIjoiY2FudmFzLXMyc3Rva2VuIiwibmJmIjoxNjY0NzQ4ODkzLCJzdWIiOiJjYmM3NTUxOS1hYTAzLTRiZDMtOTIzMi04NjA3ZDU5YzE3Zjl-U1RBR0lOR35hYzlhYTRhNC1iODUzLTQ1OWItOWJjNS04ODExYzM4N2VkNzIifQ.r4YbsWJp4kRUPAkokn2naKXDt8cMaqXurg02gyVqVvA' })

    const session = await cameraKit.createSession()
    document.getElementById ('canvas').replaceWith (session.output.live)

    const { lenses } = await cameraKit.lensRepository.loadLensGroups (['7dbc9fa1-1ecf-4946-8bf4-ca8f7eee30c5'])

    session.applyLens (lenses[3])
    let mediaStream = await navigator. mediaDevices.getUserMedia ({ video: true });

    const source = createMediaStreamSource(mediaStream, {
    transform: Transform2D_Transform2D.MirrorX, 
    cameraType: 'front'
    })

    await session.setSource(source)

    session.source.setRenderSize (window.innerWidth, window.innerHeight)

    session. play ()
    })();
})();

/******/ })()
;